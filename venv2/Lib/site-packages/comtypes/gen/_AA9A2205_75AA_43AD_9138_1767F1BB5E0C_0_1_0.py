# -*- coding: mbcs -*-

from ctypes import *
from comtypes import (
    _check_version, BSTR, CoClass, COMMETHOD, dispid, DISPMETHOD,
    GUID, helpstring, IUnknown
)
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from ctypes import HRESULT
from comtypes.automation import _midlSAFEARRAY, IDispatch, VARIANT
from ctypes.wintypes import VARIANT_BOOL

_lcid = 0  # change this if required
typelib_path = 'C:\\Program Files\\Common Files\\Autodesk Shared\\acax24enu.tlb'
ACAD_NOUNITS = c_double
LONG_PTR = c_longlong
ACAD_ANGLE = c_double
ACAD_LTYPE = BSTR
ACAD_LAYER = BSTR
ACAD_DISTANCE = c_double
ACAD_NULL = c_int
ACAD_POINT = VARIANT



class AcadUCS(CoClass):
    """A user-defined coordinate system that determines the orientation of the X, Y, and Z axes in 3D space"""
    _reg_clsid_ = GUID('{A49DCF2A-E89D-4E57-8424-E3A8ECDD9333}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """The standard interface for a basic AutoCAD object"""
    _case_insensitive_ = True
    _iid_ = GUID('{C932C340-CE5D-442A-BC19-D35997549D4A}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadUCS(IAcadObject):
    """A user-defined coordinate system that determines the orientation of the X, Y, and Z axes in 3D space"""
    _case_insensitive_ = True
    _iid_ = GUID('{BFDBCCFC-E4F2-4C36-85FC-20595E28CD3B}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadObjectEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    """Event interface for AutoCAD entites"""
    _case_insensitive_ = True
    _iid_ = GUID('{6B854981-D908-4086-8AA1-9183B102ECA7}')
    _idlflags_ = ['oleautomation']


AcadUCS._com_interfaces_ = [IAcadUCS]
AcadUCS._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDimRadialLarge(CoClass):
    """AutoCAD Jogged Dimension Object"""
    _reg_clsid_ = GUID('{6A3CCEE5-4E37-46E6-BDFD-4B60D5319819}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadEntity(IAcadObject):
    """AutoCAD Entity Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{AB9F53A4-BA00-499B-BE4C-D178EC67FFCC}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDimension(IAcadEntity):
    """IAcadDimension Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{27A64296-0D45-4E1A-8FBC-ABD0F29B20ED}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDimRadialLarge(IAcadDimension):
    """AutoCAD Jogged Dimension Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{BE187C5A-C4A2-4962-9F35-8EFD546BF5D2}')
    _idlflags_ = ['dual', 'oleautomation']


AcadDimRadialLarge._com_interfaces_ = [IAcadDimRadialLarge]
AcadDimRadialLarge._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadView(CoClass):
    """A graphical representation of a 2D drawing or 3D model from a specific location (viewpoint) in space"""
    _reg_clsid_ = GUID('{4A02F1AB-E854-44B5-B6BD-305DCB89298C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadView(IAcadObject):
    """A graphical representation of a 2D drawing or 3D model from a specific location (viewpoint) in space"""
    _case_insensitive_ = True
    _iid_ = GUID('{46A58B9D-5804-49B7-8D92-1D626863A025}')
    _idlflags_ = ['dual', 'oleautomation']


AcadView._com_interfaces_ = [IAcadView]
AcadView._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferencesProfiles(CoClass):
    """This object contains the options from the Profiles tab on the Options dialog"""
    _reg_clsid_ = GUID('{CBC1112B-C780-4BE3-9F08-3C144FDEA37F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPreferencesProfiles(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the Profiles tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{55276CBD-A0CB-4E81-BB8D-66435D793708}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPreferencesProfiles._com_interfaces_ = [IAcadPreferencesProfiles]
# values for enumeration 'AcColor'
acByBlock = 0
acRed = 1
acYellow = 2
acGreen = 3
acCyan = 4
acBlue = 5
acMagenta = 6
acWhite = 7
acByLayer = 256
AcColor = c_int  # enum
ACAD_COLOR = AcColor
# values for enumeration 'AcDimTextMovement'
acDimLineWithText = 0
acMoveTextAddLeader = 1
acMoveTextNoLeader = 2
AcDimTextMovement = c_int  # enum


class AcadBlock(CoClass):
    """A block definition containing a name and a set of objects"""
    _reg_clsid_ = GUID('{40CAB1F1-F618-4A38-A641-5D89B1CDF3F5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadBlock(IAcadObject):
    """A block definition containing a name and a set of objects"""
    _case_insensitive_ = True
    _iid_ = GUID('{B77B7E91-EDDE-4AEA-A36E-A478DE36C405}')
    _idlflags_ = ['dual', 'oleautomation']


AcadBlock._com_interfaces_ = [IAcadBlock]
AcadBlock._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadSubEntity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """AutoCAD SubEntity Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{FE717DFA-1F61-41FE-A514-BCE84CA99189}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadSubEntSolidFace(IAcadSubEntity):
    """AutoCAD Interface for a face on an AcDb3dSolid"""
    _case_insensitive_ = True
    _iid_ = GUID('{86553635-FF8C-4DA4-A4B4-AA43575E1626}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadAcCmColor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """AutoCAD AcCmColor Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{3C282526-B9FD-4131-9B76-CBCCE8B94ACF}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcLineWeight'
acLnWt000 = 0
acLnWt005 = 5
acLnWt009 = 9
acLnWt013 = 13
acLnWt015 = 15
acLnWt018 = 18
acLnWt020 = 20
acLnWt025 = 25
acLnWt030 = 30
acLnWt035 = 35
acLnWt040 = 40
acLnWt050 = 50
acLnWt053 = 53
acLnWt060 = 60
acLnWt070 = 70
acLnWt080 = 80
acLnWt090 = 90
acLnWt100 = 100
acLnWt106 = 106
acLnWt120 = 120
acLnWt140 = 140
acLnWt158 = 158
acLnWt200 = 200
acLnWt211 = 211
acLnWtByLayer = -1
acLnWtByBlock = -2
acLnWtByLwDefault = -3
AcLineWeight = c_int  # enum
ACAD_LWEIGHT = AcLineWeight


class IAcadHyperlinks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """The collection of all hyperlinks for a given entity"""
    _case_insensitive_ = True
    _iid_ = GUID('{5175757D-927E-47BD-8F7A-17B9A4C69E0B}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSubEntity._methods_ = [
    COMMETHOD([dispid(1024), 'nonbrowsable'], HRESULT, 'OnModified'),
    COMMETHOD(
        [dispid(1025), helpstring('Gets the AutoCAD class name of the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ObjectName',
        (['out', 'retval'], POINTER(BSTR), 'ObjectName')
    ),
    COMMETHOD(
        [dispid(1302), helpstring('Returns the true color of the object.'), 'propget'],
        HRESULT,
        'color',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(1302), helpstring('Returns the true color of the object.'), 'propput'],
        HRESULT,
        'color',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(1281), helpstring('Specifies the current layer of the object'), 'propget'],
        HRESULT,
        'Layer',
        (['out', 'retval'], POINTER(BSTR), 'Layer')
    ),
    COMMETHOD(
        [dispid(1282), helpstring('Specifies the current linetype of the object'), 'propget'],
        HRESULT,
        'Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(1283), helpstring('Specifies the linetype scale factor of the object'), 'propget'],
        HRESULT,
        'LinetypeScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale')
    ),
    COMMETHOD(
        [dispid(1299), helpstring('Specifies the plotstyle name for the object'), 'propget'],
        HRESULT,
        'PlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(1300), helpstring('Specifies the lineweight for the object'), 'propget'],
        HRESULT,
        'Lineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(1301), helpstring('Assigns a hyperlink to an object and displays the hyperlink name or description (if one is specified)'), 'propget'],
        HRESULT,
        'Hyperlinks',
        (['out', 'retval'], POINTER(POINTER(IAcadHyperlinks)), 'Hyperlinks')
    ),
]

################################################################
# code template for IAcadSubEntity implementation
# class IAcadSubEntity_Impl(object):
#     def OnModified(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ObjectName(self):
#         'Gets the AutoCAD class name of the object'
#         #return ObjectName
#
#     def _get(self):
#         'Returns the true color of the object.'
#         #return pColor
#     def _set(self, pColor):
#         'Returns the true color of the object.'
#     color = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Layer(self):
#         'Specifies the current layer of the object'
#         #return Layer
#
#     @property
#     def Linetype(self):
#         'Specifies the current linetype of the object'
#         #return Linetype
#
#     @property
#     def LinetypeScale(self):
#         'Specifies the linetype scale factor of the object'
#         #return ltScale
#
#     @property
#     def PlotStyleName(self):
#         'Specifies the plotstyle name for the object'
#         #return plotStyle
#
#     @property
#     def Lineweight(self):
#         'Specifies the lineweight for the object'
#         #return Lineweight
#
#     @property
#     def Hyperlinks(self):
#         'Assigns a hyperlink to an object and displays the hyperlink name or description (if one is specified)'
#         #return Hyperlinks
#

IAcadSubEntSolidFace._methods_ = [
    COMMETHOD(
        [dispid(1399), helpstring('Specifies the material'), 'propget'],
        HRESULT,
        'Material',
        (['out', 'retval'], POINTER(BSTR), 'Material')
    ),
    COMMETHOD(
        [dispid(1399), helpstring('Specifies the material'), 'propput'],
        HRESULT,
        'Material',
        (['in'], BSTR, 'Material')
    ),
]

################################################################
# code template for IAcadSubEntSolidFace implementation
# class IAcadSubEntSolidFace_Impl(object):
#     def _get(self):
#         'Specifies the material'
#         #return Material
#     def _set(self, Material):
#         'Specifies the material'
#     Material = property(_get, _set, doc = _set.__doc__)
#


class AcadViewport(CoClass):
    """A bounded area that displays some portion of a drawing's model space"""
    _reg_clsid_ = GUID('{B9509029-77C1-4B48-B5D2-81712F6B4554}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadViewport(IAcadObject):
    """A bounded area that displays some portion of a drawing's model space"""
    _case_insensitive_ = True
    _iid_ = GUID('{37113848-87F7-4A28-BEA7-4B8559C603C7}')
    _idlflags_ = ['dual', 'oleautomation']


AcadViewport._com_interfaces_ = [IAcadViewport]
AcadViewport._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferencesSelection(CoClass):
    """This object contains the options from the Selection tab on the Options dialog"""
    _reg_clsid_ = GUID('{46762221-9693-4CC5-8C58-B9A7FF499776}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPreferencesSelection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the Selection tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{4D4FD045-8B92-4A18-91D3-5E5C88C40C77}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPreferencesSelection._com_interfaces_ = [IAcadPreferencesSelection]
# values for enumeration 'AcHorizontalAlignment'
acHorizontalAlignmentLeft = 0
acHorizontalAlignmentCenter = 1
acHorizontalAlignmentRight = 2
acHorizontalAlignmentAligned = 3
acHorizontalAlignmentMiddle = 4
acHorizontalAlignmentFit = 5
AcHorizontalAlignment = c_int  # enum


class AcadModelSpace(CoClass):
    """A special Block object containing all model space entities"""
    _reg_clsid_ = GUID('{4A7435A7-5AFA-44B1-8DA0-411D5EB98E94}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadModelSpace(IAcadBlock):
    """A special Block object containing all model space entities"""
    _case_insensitive_ = True
    _iid_ = GUID('{34BD05D6-AC90-4409-8D22-D7B3C820E32B}')
    _idlflags_ = ['dual', 'oleautomation']


AcadModelSpace._com_interfaces_ = [IAcadModelSpace]
AcadModelSpace._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadRay(IAcadEntity):
    """AutoCAD Ray Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{FC0BDEB2-8060-4E6E-B8E0-3718DFD47DC3}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDatabase(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """The contents of an XRef block"""
    _case_insensitive_ = True
    _iid_ = GUID('{3280D375-1DE4-4DA2-89EE-591E860056DC}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDictionary(IAcadObject):
    """A container object for storing and retrieving objects"""
    _case_insensitive_ = True
    _iid_ = GUID('{8ED1EC97-E674-4AE4-89AF-8EDCDEFFEFA7}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadObject._methods_ = [
    COMMETHOD(
        [dispid(1024), helpstring('Gets the handle of an object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Handle',
        (['out', 'retval'], POINTER(BSTR), 'Handle')
    ),
    COMMETHOD(
        [dispid(1025), helpstring('Gets the AutoCAD class name of the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ObjectName',
        (['out', 'retval'], POINTER(BSTR), 'ObjectName')
    ),
    COMMETHOD(
        [dispid(1026), helpstring('Gets the extended data (XData) associated with an object')],
        HRESULT,
        'GetXData',
        (['in'], BSTR, 'AppName'),
        (['out'], POINTER(VARIANT), 'XDataType'),
        (['out'], POINTER(VARIANT), 'XDataValue')
    ),
    COMMETHOD(
        [dispid(1027), helpstring('Sets the extended data (XData) associated with an object')],
        HRESULT,
        'SetXData',
        (['in'], VARIANT, 'XDataType'),
        (['in'], VARIANT, 'XDataValue')
    ),
    COMMETHOD(
        [dispid(1028), helpstring('Deletes a specified object')],
        HRESULT,
        'Delete',
    ),
    COMMETHOD(
        [dispid(1029), helpstring('Gets the object ID of the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ObjectID',
        (['out', 'retval'], POINTER(LONG_PTR), 'ObjectID')
    ),
    COMMETHOD(
        [dispid(1030), helpstring('Gets the Application object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject')
    ),
    COMMETHOD(
        [dispid(1031), helpstring('Gets the database in which the object belongs'), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'Database',
        (['out', 'retval'], POINTER(POINTER(IAcadDatabase)), 'pDatabase')
    ),
    COMMETHOD(
        [dispid(1032), helpstring('Determines if the object has an extension dictionary associated with it'), 'nonbrowsable', 'propget'],
        HRESULT,
        'HasExtensionDictionary',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bHasDictionary')
    ),
    COMMETHOD(
        [dispid(1033), helpstring('Gets the extension dictionary associated with an object')],
        HRESULT,
        'GetExtensionDictionary',
        (['out', 'retval'], POINTER(POINTER(IAcadDictionary)), 'pExtDictionary')
    ),
    COMMETHOD(
        [dispid(1034), helpstring('Gets the object ID of the owner (parent) object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'OwnerID',
        (['out', 'retval'], POINTER(LONG_PTR), 'OwnerID')
    ),
    COMMETHOD(
        [dispid(1035), helpstring('Gets the document (drawing) in which the object belongs'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Document',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pDocument')
    ),
    COMMETHOD(
        [dispid(1141), helpstring('Erases all the objects in a selection set'), 'hidden'],
        HRESULT,
        'Erase',
    ),
]

################################################################
# code template for IAcadObject implementation
# class IAcadObject_Impl(object):
#     @property
#     def Handle(self):
#         'Gets the handle of an object'
#         #return Handle
#
#     @property
#     def ObjectName(self):
#         'Gets the AutoCAD class name of the object'
#         #return ObjectName
#
#     def GetXData(self, AppName):
#         'Gets the extended data (XData) associated with an object'
#         #return XDataType, XDataValue
#
#     def SetXData(self, XDataType, XDataValue):
#         'Sets the extended data (XData) associated with an object'
#         #return 
#
#     def Delete(self):
#         'Deletes a specified object'
#         #return 
#
#     @property
#     def ObjectID(self):
#         'Gets the object ID of the object'
#         #return ObjectID
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return ApplicationObject
#
#     @property
#     def Database(self):
#         'Gets the database in which the object belongs'
#         #return pDatabase
#
#     @property
#     def HasExtensionDictionary(self):
#         'Determines if the object has an extension dictionary associated with it'
#         #return bHasDictionary
#
#     def GetExtensionDictionary(self):
#         'Gets the extension dictionary associated with an object'
#         #return pExtDictionary
#
#     @property
#     def OwnerID(self):
#         'Gets the object ID of the owner (parent) object'
#         #return OwnerID
#
#     @property
#     def Document(self):
#         'Gets the document (drawing) in which the object belongs'
#         #return pDocument
#
#     def Erase(self):
#         'Erases all the objects in a selection set'
#         #return 
#
# values for enumeration 'AcExtendOption'
acExtendNone = 0
acExtendThisEntity = 1
acExtendOtherEntity = 2
acExtendBoth = 3
AcExtendOption = c_int  # enum

IAcadEntity._methods_ = [
    COMMETHOD(
        [dispid(1302), helpstring('Returns the true color of the object.'), 'propget'],
        HRESULT,
        'TrueColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(1302), helpstring('Returns the true color of the object.'), 'propput'],
        HRESULT,
        'TrueColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(1281), helpstring('Specifies the current layer of the object'), 'propget'],
        HRESULT,
        'Layer',
        (['out', 'retval'], POINTER(BSTR), 'Layer')
    ),
    COMMETHOD(
        [dispid(1281), helpstring('Specifies the current layer of the object'), 'propput'],
        HRESULT,
        'Layer',
        (['in'], BSTR, 'Layer')
    ),
    COMMETHOD(
        [dispid(1282), helpstring('Specifies the current linetype of the object'), 'propget'],
        HRESULT,
        'Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(1282), helpstring('Specifies the current linetype of the object'), 'propput'],
        HRESULT,
        'Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(1283), helpstring('Specifies the linetype scale factor of the object'), 'propget'],
        HRESULT,
        'LinetypeScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale')
    ),
    COMMETHOD(
        [dispid(1283), helpstring('Specifies the linetype scale factor of the object'), 'propput'],
        HRESULT,
        'LinetypeScale',
        (['in'], ACAD_NOUNITS, 'ltScale')
    ),
    COMMETHOD(
        [dispid(1284), helpstring('Specifies the visibility of an object or the application'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVisible')
    ),
    COMMETHOD(
        [dispid(1284), helpstring('Specifies the visibility of an object or the application'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'bVisible')
    ),
    COMMETHOD(
        [dispid(1285), helpstring('Creates an array of selected objects in a polar pattern.')],
        HRESULT,
        'ArrayPolar',
        (['in'], c_int, 'NumberOfObjects'),
        (['in'], c_double, 'AngleToFill'),
        (['in'], VARIANT, 'CenterPoint'),
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
    COMMETHOD(
        [dispid(1286), helpstring('Creates an array of selected objects in a rectangular pattern.')],
        HRESULT,
        'ArrayRectangular',
        (['in'], c_int, 'NumberOfRows'),
        (['in'], c_int, 'NumberOfColumns'),
        (['in'], c_int, 'NumberOfLevels'),
        (['in'], c_double, 'DistBetweenRows'),
        (['in'], c_double, 'DistBetweenCols'),
        (['in'], c_double, 'DistBetweenLevels'),
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
    COMMETHOD(
        [dispid(1287), helpstring('Highlights the entity object.')],
        HRESULT,
        'Highlight',
        (['in'], VARIANT_BOOL, 'HighlightFlag')
    ),
    COMMETHOD(
        [dispid(1288), helpstring('Copies the entity object.')],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pCopyObj')
    ),
    COMMETHOD(
        [dispid(1289), helpstring('Moves the entity object from source to destination.')],
        HRESULT,
        'Move',
        (['in'], VARIANT, 'FromPoint'),
        (['in'], VARIANT, 'ToPoint')
    ),
    COMMETHOD(
        [dispid(1290), helpstring('Rotates the entity object about a point.')],
        HRESULT,
        'Rotate',
        (['in'], VARIANT, 'BasePoint'),
        (['in'], c_double, 'RotationAngle')
    ),
    COMMETHOD(
        [dispid(1291), helpstring('Rotates the entity object about a 3D line.')],
        HRESULT,
        'Rotate3D',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['in'], c_double, 'RotationAngle')
    ),
    COMMETHOD(
        [dispid(1292), helpstring('Mirrors selected objects about a line.')],
        HRESULT,
        'Mirror',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pMirrorObj')
    ),
    COMMETHOD(
        [dispid(1293), helpstring('Mirrors selected objects about a plane defined by three points.')],
        HRESULT,
        'Mirror3D',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['in'], VARIANT, 'point3'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pMirrorObj')
    ),
    COMMETHOD(
        [dispid(1294), helpstring('Scale the entity object with respect to the base point and the scale factor.')],
        HRESULT,
        'ScaleEntity',
        (['in'], VARIANT, 'BasePoint'),
        (['in'], c_double, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(1295), helpstring('Performs the specified transformation on the entity object.')],
        HRESULT,
        'TransformBy',
        (['in'], VARIANT, 'TransformationMatrix')
    ),
    COMMETHOD(
        [dispid(1296), helpstring('Updates the graphics of the entity object.')],
        HRESULT,
        'Update',
    ),
    COMMETHOD(
        [dispid(1297), helpstring('Returns the min and max point of the bounding box of the entity object.')],
        HRESULT,
        'GetBoundingBox',
        (['out'], POINTER(VARIANT), 'MinPoint'),
        (['out'], POINTER(VARIANT), 'MaxPoint')
    ),
    COMMETHOD(
        [dispid(1298), helpstring('Intersects with the input entity object.')],
        HRESULT,
        'IntersectWith',
        (['in'], POINTER(IDispatch), 'IntersectObject'),
        (['in'], AcExtendOption, 'option'),
        (['out', 'retval'], POINTER(VARIANT), 'intPoints')
    ),
    COMMETHOD(
        [dispid(1299), helpstring('Specifies the plotstyle name for the object'), 'propget'],
        HRESULT,
        'PlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(1299), helpstring('Specifies the plotstyle name for the object'), 'propput'],
        HRESULT,
        'PlotStyleName',
        (['in'], BSTR, 'plotStyle')
    ),
    COMMETHOD(
        [dispid(1300), helpstring('Specifies the lineweight for the object'), 'propget'],
        HRESULT,
        'Lineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(1300), helpstring('Specifies the lineweight for the object'), 'propput'],
        HRESULT,
        'Lineweight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(1401), helpstring('Specifies the transparency of the object'), 'propget'],
        HRESULT,
        'EntityTransparency',
        (['out', 'retval'], POINTER(BSTR), 'transparency')
    ),
    COMMETHOD(
        [dispid(1401), helpstring('Specifies the transparency of the object'), 'propput'],
        HRESULT,
        'EntityTransparency',
        (['in'], BSTR, 'transparency')
    ),
    COMMETHOD(
        [dispid(1301), helpstring('Assigns a hyperlink to an object and displays the hyperlink name or description (if one is specified)'), 'propget'],
        HRESULT,
        'Hyperlinks',
        (['out', 'retval'], POINTER(POINTER(IAcadHyperlinks)), 'Hyperlinks')
    ),
    COMMETHOD(
        [dispid(1399), helpstring('Specifies the material'), 'propget'],
        HRESULT,
        'Material',
        (['out', 'retval'], POINTER(BSTR), 'Material')
    ),
    COMMETHOD(
        [dispid(1399), helpstring('Specifies the material'), 'propput'],
        HRESULT,
        'Material',
        (['in'], BSTR, 'Material')
    ),
    COMMETHOD(
        [dispid(1397), helpstring('Returns the class name of the object.'), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'EntityName',
        (['out', 'retval'], POINTER(BSTR), 'EntityName')
    ),
    COMMETHOD(
        [dispid(1398), helpstring('Returns the entity type of the object as an integer.'), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'EntityType',
        (['out', 'retval'], POINTER(c_int), 'entType')
    ),
    COMMETHOD(
        [dispid(1280), helpstring('Specifies the color for objects'), 'hidden', 'propget'],
        HRESULT,
        'color',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'color')
    ),
    COMMETHOD(
        [dispid(1280), helpstring('Specifies the color for objects'), 'hidden', 'propput'],
        HRESULT,
        'color',
        (['in'], ACAD_COLOR, 'color')
    ),
]

################################################################
# code template for IAcadEntity implementation
# class IAcadEntity_Impl(object):
#     def _get(self):
#         'Returns the true color of the object.'
#         #return pColor
#     def _set(self, pColor):
#         'Returns the true color of the object.'
#     TrueColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current layer of the object'
#         #return Layer
#     def _set(self, Layer):
#         'Specifies the current layer of the object'
#     Layer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current linetype of the object'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the current linetype of the object'
#     Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype scale factor of the object'
#         #return ltScale
#     def _set(self, ltScale):
#         'Specifies the linetype scale factor of the object'
#     LinetypeScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the visibility of an object or the application'
#         #return bVisible
#     def _set(self, bVisible):
#         'Specifies the visibility of an object or the application'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
#         'Creates an array of selected objects in a polar pattern.'
#         #return pArrayObjs
#
#     def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
#         'Creates an array of selected objects in a rectangular pattern.'
#         #return pArrayObjs
#
#     def Highlight(self, HighlightFlag):
#         'Highlights the entity object.'
#         #return 
#
#     def Copy(self):
#         'Copies the entity object.'
#         #return pCopyObj
#
#     def Move(self, FromPoint, ToPoint):
#         'Moves the entity object from source to destination.'
#         #return 
#
#     def Rotate(self, BasePoint, RotationAngle):
#         'Rotates the entity object about a point.'
#         #return 
#
#     def Rotate3D(self, Point1, Point2, RotationAngle):
#         'Rotates the entity object about a 3D line.'
#         #return 
#
#     def Mirror(self, Point1, Point2):
#         'Mirrors selected objects about a line.'
#         #return pMirrorObj
#
#     def Mirror3D(self, Point1, Point2, point3):
#         'Mirrors selected objects about a plane defined by three points.'
#         #return pMirrorObj
#
#     def ScaleEntity(self, BasePoint, ScaleFactor):
#         'Scale the entity object with respect to the base point and the scale factor.'
#         #return 
#
#     def TransformBy(self, TransformationMatrix):
#         'Performs the specified transformation on the entity object.'
#         #return 
#
#     def Update(self):
#         'Updates the graphics of the entity object.'
#         #return 
#
#     def GetBoundingBox(self):
#         'Returns the min and max point of the bounding box of the entity object.'
#         #return MinPoint, MaxPoint
#
#     def IntersectWith(self, IntersectObject, option):
#         'Intersects with the input entity object.'
#         #return intPoints
#
#     def _get(self):
#         'Specifies the plotstyle name for the object'
#         #return plotStyle
#     def _set(self, plotStyle):
#         'Specifies the plotstyle name for the object'
#     PlotStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the lineweight for the object'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the lineweight for the object'
#     Lineweight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the transparency of the object'
#         #return transparency
#     def _set(self, transparency):
#         'Specifies the transparency of the object'
#     EntityTransparency = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Hyperlinks(self):
#         'Assigns a hyperlink to an object and displays the hyperlink name or description (if one is specified)'
#         #return Hyperlinks
#
#     def _get(self):
#         'Specifies the material'
#         #return Material
#     def _set(self, Material):
#         'Specifies the material'
#     Material = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def EntityName(self):
#         'Returns the class name of the object.'
#         #return EntityName
#
#     @property
#     def EntityType(self):
#         'Returns the entity type of the object as an integer.'
#         #return entType
#
#     def _get(self):
#         'Specifies the color for objects'
#         #return color
#     def _set(self, color):
#         'Specifies the color for objects'
#     color = property(_get, _set, doc = _set.__doc__)
#

IAcadRay._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the basepoint of the ray or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'BasePoint',
        (['out', 'retval'], POINTER(VARIANT), 'BasePoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the basepoint of the ray or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'BasePoint',
        (['in'], VARIANT, 'BasePoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the second point of the ray or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'SecondPoint',
        (['out', 'retval'], POINTER(VARIANT), 'SecondPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the second point of the ray or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'SecondPoint',
        (['in'], VARIANT, 'SecondPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specify the X, Y, Z direction vectors of the ray'), 'propget'],
        HRESULT,
        'DirectionVector',
        (['out', 'retval'], POINTER(VARIANT), 'dirVector')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specify the X, Y, Z direction vectors of the ray'), 'propput'],
        HRESULT,
        'DirectionVector',
        (['in'], VARIANT, 'dirVector')
    ),
]

################################################################
# code template for IAcadRay implementation
# class IAcadRay_Impl(object):
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the basepoint of the ray or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return BasePoint
#     def _set(self, BasePoint):
#         'Specify the X, Y, Z coordinate of the basepoint of the ray or use the Pick Point button to set X, Y, Z values simultaneously'
#     BasePoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the second point of the ray or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return SecondPoint
#     def _set(self, SecondPoint):
#         'Specify the X, Y, Z coordinate of the second point of the ray or use the Pick Point button to set X, Y, Z values simultaneously'
#     SecondPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z direction vectors of the ray'
#         #return dirVector
#     def _set(self, dirVector):
#         'Specify the X, Y, Z direction vectors of the ray'
#     DirectionVector = property(_get, _set, doc = _set.__doc__)
#


class AcadGroup(CoClass):
    """A named SelectionSet object"""
    _reg_clsid_ = GUID('{5D653066-340C-4C20-BAA4-C08F663D7720}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadGroup(IAcadObject):
    """A named SelectionSet object"""
    _case_insensitive_ = True
    _iid_ = GUID('{2DB9C67E-2834-4616-9AED-C436300148A2}')
    _idlflags_ = ['dual', 'oleautomation']


AcadGroup._com_interfaces_ = [IAcadGroup]
AcadGroup._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferencesSystem(CoClass):
    """This object contains the options from the System tab on the Options dialog"""
    _reg_clsid_ = GUID('{759C8892-796F-427C-92A8-E1039C20DCB1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPreferencesSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the System tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{D9677553-A98F-4D1C-AA34-E07E2507128E}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPreferencesSystem._com_interfaces_ = [IAcadPreferencesSystem]


class AcadPaperSpace(CoClass):
    """A special Block object containing all the entities in the active paper space layout"""
    _reg_clsid_ = GUID('{E6DE2C14-5BD6-4D81-B019-1FE5A40148C5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPaperSpace(IAcadBlock):
    """A special Block object containing all the entities in the active paper space layout"""
    _case_insensitive_ = True
    _iid_ = GUID('{BB92334B-CEBE-4C67-8E06-E4181B95F7B8}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPaperSpace._com_interfaces_ = [IAcadPaperSpace]
AcadPaperSpace._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadPointCloudEx(IAcadEntity):
    """AutoCAD Point Cloud Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{FA50CDBF-2F12-4B8E-B7B5-A3F42B882F91}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcPointCloudExStylizationType'
acRGB = 0
acObject = 1
acNormals = 2
acIntensities = 3
acElevation = 4
acClassification = 5
AcPointCloudExStylizationType = c_int  # enum

IAcadPointCloudEx._methods_ = [
    COMMETHOD(
        [dispid(4), helpstring('Specifies the point cloud color source.'), 'propget'],
        HRESULT,
        'Stylization',
        (['out', 'retval'], POINTER(AcPointCloudExStylizationType), 'val')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the point cloud color source.'), 'propput'],
        HRESULT,
        'Stylization',
        (['in'], AcPointCloudExStylizationType, 'val')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the color scheme to display point cloud.'), 'propget'],
        HRESULT,
        'ColorScheme',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the color scheme to display point cloud.'), 'propput'],
        HRESULT,
        'ColorScheme',
        (['in'], c_int, 'val')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the insertion point of the point cloud.'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'EndPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the insertion point of the point cloud.'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'EndPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the rotation angle of the point cloud.'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'val')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the rotation angle of the point cloud.'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'val')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the scale value of the point cloud.'), 'propget'],
        HRESULT,
        'scale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'val')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the scale value of the point cloud.'), 'propput'],
        HRESULT,
        'scale',
        (['in'], ACAD_NOUNITS, 'val')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the name of the point cloud file.'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the name of the point cloud file.'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'val')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the path to the point cloud file.'), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies if the cropping is shown.'), 'propget'],
        HRESULT,
        'ShowCropped',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'val')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies if the cropping is shown.'), 'propput'],
        HRESULT,
        'ShowCropped',
        (['in'], VARIANT_BOOL, 'val')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies if the point cloud is locked.'), 'propget'],
        HRESULT,
        'Locked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'val')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies if the point cloud is locked.'), 'propput'],
        HRESULT,
        'Locked',
        (['in'], VARIANT_BOOL, 'val')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies if the point cloud is geolocated.'), 'propget'],
        HRESULT,
        'Geolocate',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'val')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies if the point cloud is geolocated.'), 'propput'],
        HRESULT,
        'Geolocate',
        (['in'], VARIANT_BOOL, 'val')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the unit of the point cloud file.'), 'propget'],
        HRESULT,
        'Unit',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies insert unit factor of the point cloud file.'), 'propget'],
        HRESULT,
        'UnitFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'val')
    ),
]

################################################################
# code template for IAcadPointCloudEx implementation
# class IAcadPointCloudEx_Impl(object):
#     def _get(self):
#         'Specifies the point cloud color source.'
#         #return val
#     def _set(self, val):
#         'Specifies the point cloud color source.'
#     Stylization = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color scheme to display point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the color scheme to display point cloud.'
#     ColorScheme = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the insertion point of the point cloud.'
#         #return EndPoint
#     def _set(self, EndPoint):
#         'Specifies the insertion point of the point cloud.'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the rotation angle of the point cloud.'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the scale value of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the scale value of the point cloud.'
#     scale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the point cloud file.'
#         #return val
#     def _set(self, val):
#         'Specifies the name of the point cloud file.'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Path(self):
#         'Specifies the path to the point cloud file.'
#         #return val
#
#     def _get(self):
#         'Specifies if the cropping is shown.'
#         #return val
#     def _set(self, val):
#         'Specifies if the cropping is shown.'
#     ShowCropped = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the point cloud is locked.'
#         #return val
#     def _set(self, val):
#         'Specifies if the point cloud is locked.'
#     Locked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the point cloud is geolocated.'
#         #return val
#     def _set(self, val):
#         'Specifies if the point cloud is geolocated.'
#     Geolocate = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Unit(self):
#         'Specifies the unit of the point cloud file.'
#         #return val
#
#     @property
#     def UnitFactor(self):
#         'Specifies insert unit factor of the point cloud file.'
#         #return val
#


class AcadPlotConfiguration(CoClass):
    """A named collection of plot settings"""
    _reg_clsid_ = GUID('{0F8A73CC-B84B-48E3-B524-856774046AFA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPlotConfiguration(IAcadObject):
    """A named collection of plot settings"""
    _case_insensitive_ = True
    _iid_ = GUID('{5C7DCDF9-0A55-4A13-9461-23BF37C77D3D}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPlotConfiguration._com_interfaces_ = [IAcadPlotConfiguration]
AcadPlotConfiguration._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferencesUser(CoClass):
    """This object contains the options from the User tab on the Options dialog"""
    _reg_clsid_ = GUID('{C4E07DD5-F25F-42EA-B786-8FC7469C6D9C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPreferencesUser(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the User tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{F3816DB4-2048-4D5B-B0BA-A4FAAAD6F996}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPreferencesUser._com_interfaces_ = [IAcadPreferencesUser]
# values for enumeration 'AcDimToleranceMethod'
acTolNone = 0
acTolSymmetrical = 1
acTolDeviation = 2
acTolLimits = 3
acTolBasic = 4
AcDimToleranceMethod = c_int  # enum


class AcadLayout(CoClass):
    """The plot settings and visual properties of a model space or paper space block"""
    _reg_clsid_ = GUID('{CD4D07B0-8979-4D31-9A70-8591660A6526}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadLayout(IAcadPlotConfiguration):
    """The plot settings and visual properties of a model space or paper space block"""
    _case_insensitive_ = True
    _iid_ = GUID('{7A524437-AD0E-48C6-BC94-98BC85368BD8}')
    _idlflags_ = ['dual', 'oleautomation']


AcadLayout._com_interfaces_ = [IAcadLayout]
AcadLayout._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDwfUnderlay(CoClass):
    _reg_clsid_ = GUID('{345C9439-5A05-4B6D-B7B8-83FFD1EB6280}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadUnderlay(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{3008DB35-3F6A-4DE4-8A07-71F6FBCCAFC9}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDwfUnderlay(IAcadUnderlay):
    _case_insensitive_ = True
    _iid_ = GUID('{EAF5801D-82B0-4558-AEEA-706D63F3C934}')
    _idlflags_ = ['dual', 'oleautomation']


AcadDwfUnderlay._com_interfaces_ = [IAcadUnderlay, IAcadDwfUnderlay]
AcadDwfUnderlay._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadMenuGroups(CoClass):
    """A collection of MenuGroup objects representing all the menu groups loaded in the current AutoCAD session"""
    _reg_clsid_ = GUID('{B2A3DAF3-7420-4539-AAEC-901D2A8E1E3B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadMenuGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A collection of MenuGroup objects representing all the menu groups loaded in the current AutoCAD session"""
    _case_insensitive_ = True
    _iid_ = GUID('{B6AD6C44-3524-477D-B5C5-2CBA04E7D410}')
    _idlflags_ = ['dual', 'oleautomation']


AcadMenuGroups._com_interfaces_ = [IAcadMenuGroups]


class IAcadTableStyle(IAcadObject):
    """AutoCAD IAcadTableStyle Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{0FE4779E-AD2A-4119-BEA5-2CD6C1E46660}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcTableDirection'
acTableTopToBottom = 0
acTableBottomToTop = 1
AcTableDirection = c_int  # enum
# values for enumeration 'AcRowType'
acUnknownRow = 0
acDataRow = 1
acTitleRow = 2
acHeaderRow = 4
AcRowType = c_int  # enum
# values for enumeration 'AcCellAlignment'
acTopLeft = 1
acTopCenter = 2
acTopRight = 3
acMiddleLeft = 4
acMiddleCenter = 5
acMiddleRight = 6
acBottomLeft = 7
acBottomCenter = 8
acBottomRight = 9
AcCellAlignment = c_int  # enum
# values for enumeration 'AcGridLineType'
acInvalidGridLine = 0
acHorzTop = 1
acHorzInside = 2
acHorzBottom = 4
acVertLeft = 8
acVertInside = 16
acVertRight = 32
AcGridLineType = c_int  # enum
# values for enumeration 'AcValueDataType'
acUnknownDataType = 0
acLong = 1
acDouble = 2
acString = 4
acDate = 8
acPoint2d = 16
acPoint3d = 32
acObjectId = 64
acBuffer = 128
acResbuf = 256
acGeneral = 512
AcValueDataType = c_int  # enum
# values for enumeration 'AcValueUnitType'
acUnitless = 0
acUnitDistance = 1
acUnitAngle = 2
acUnitArea = 4
acUnitVolume = 8
AcValueUnitType = c_int  # enum
# values for enumeration 'AcMergeCellStyleOption'
acMergeCellStyleNone = 0
acMergeCellStyleCopyDuplicates = 1
acMergeCellStyleOverwriteDuplicates = 2
acMergeCellStyleConvertDuplicatesToOverrides = 4
acMergeCellStyleIgnoreNewStyles = 8
AcMergeCellStyleOption = c_int  # enum

IAcadTableStyle._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Returns and sets the name of the tablestyle.'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrValue')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Returns and sets the name of the tablestyle.'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrValue')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Returns and sets the description of the tablestyle.'), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Returns and sets the description of the tablestyle.'), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'bstr')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Returns and sets the bit flag values.'), 'propget'],
        HRESULT,
        'BitFlags',
        (['out', 'retval'], POINTER(c_int), 'bitFlag')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Returns and sets the bit flag values.'), 'propput'],
        HRESULT,
        'BitFlags',
        (['in'], c_int, 'bitFlag')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns and sets the table flow direction value.'), 'propget'],
        HRESULT,
        'FlowDirection',
        (['out', 'retval'], POINTER(AcTableDirection), 'pFlow')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns and sets the table flow direction value.'), 'propput'],
        HRESULT,
        'FlowDirection',
        (['in'], AcTableDirection, 'pFlow')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Returns and sets the horizontal cell margin value.'), 'propget'],
        HRESULT,
        'HorzCellMargin',
        (['out', 'retval'], POINTER(c_double), 'dHorzCellMargin')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Returns and sets the horizontal cell margin value.'), 'propput'],
        HRESULT,
        'HorzCellMargin',
        (['in'], c_double, 'dHorzCellMargin')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns and sets the vertical cell margin value.'), 'propget'],
        HRESULT,
        'VertCellMargin',
        (['out', 'retval'], POINTER(c_double), 'dVertCellMargin')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns and sets the vertical cell margin value.'), 'propput'],
        HRESULT,
        'VertCellMargin',
        (['in'], c_double, 'dVertCellMargin')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Returns and sets the title suppressed flag value.'), 'propget'],
        HRESULT,
        'TitleSuppressed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Returns and sets the title suppressed flag value.'), 'propput'],
        HRESULT,
        'TitleSuppressed',
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns and sets the header suppressed flag value.'), 'propget'],
        HRESULT,
        'HeaderSuppressed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns and sets the header suppressed flag value.'), 'propput'],
        HRESULT,
        'HeaderSuppressed',
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Returns the text style name for the specified row type.')],
        HRESULT,
        'GetTextStyle',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Sets the text style name for the specified row types.')],
        HRESULT,
        'SetTextStyle',
        (['in'], c_int, 'rowTypes'),
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Returns the text height for the specified row type.')],
        HRESULT,
        'GetTextHeight',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(c_double), 'pTextHeight')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Sets the text height for the specified row types.')],
        HRESULT,
        'SetTextHeight',
        (['in'], c_int, 'rowTypes'),
        (['in'], c_double, 'TextHeight')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Returns the cell alignment for the specified row type.')],
        HRESULT,
        'GetAlignment',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Sets the cell alignment for the specified row types.')],
        HRESULT,
        'SetAlignment',
        (['in'], c_int, 'rowTypes'),
        (['in'], AcCellAlignment, 'cellAlignment')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Returns the true color value for the specified row type.')],
        HRESULT,
        'GetColor',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Sets the true color value for the specifed row types.')],
        HRESULT,
        'SetColor',
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Returns the background true color value for the specified row type.')],
        HRESULT,
        'GetBackgroundColor',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Sets the background true color value for the specifed row types.')],
        HRESULT,
        'SetBackgroundColor',
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Returns the backgroundColorNone flag value for the specified row type.')],
        HRESULT,
        'GetBackgroundColorNone',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Sets the backgroundColorNone flag value for the specified row types.')],
        HRESULT,
        'SetBackgroundColorNone',
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Returns the gridLineWeight value for the specifed gridLineType and row type.')],
        HRESULT,
        'GetGridLineWeight',
        (['in'], AcGridLineType, 'gridLineType'),
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Sets the gridLineWeight value for the specifed gridLineTypes and row types.')],
        HRESULT,
        'SetGridLineWeight',
        (['in'], c_int, 'gridLineTypes'),
        (['in'], c_int, 'rowTypes'),
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Returns the gridColor value for the specifed gridLineType and row type.')],
        HRESULT,
        'GetGridColor',
        (['in'], AcGridLineType, 'gridLineType'),
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Sets the gridColor value for the specifed gridLineTypes and row types.')],
        HRESULT,
        'SetGridColor',
        (['in'], c_int, 'gridLineTypes'),
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Returns the gridVisibility value for the specifed gridLineType and row type.')],
        HRESULT,
        'GetGridVisibility',
        (['in'], AcGridLineType, 'gridLineType'),
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets the gridVisibility value for the specifed gridLineTypes and row types.')],
        HRESULT,
        'SetGridVisibility',
        (['in'], c_int, 'gridLineTypes'),
        (['in'], c_int, 'rowTypes'),
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Returns the data type and unit type for the specifed row type.')],
        HRESULT,
        'GetDataType',
        (['in'], AcRowType, 'rowType'),
        (['out'], POINTER(AcValueDataType), 'pDataType'),
        (['out'], POINTER(AcValueUnitType), 'pUnitType')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets the data type and unit type for the specifed row type.')],
        HRESULT,
        'SetDataType',
        (['in'], c_int, 'rowTypes'),
        (['in'], AcValueDataType, 'nDataType'),
        (['in'], AcValueUnitType, 'nUnitType')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Returns the format for the specifed row type.')],
        HRESULT,
        'GetFormat',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(BSTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets the format for the specifed row type.')],
        HRESULT,
        'SetFormat',
        (['in'], c_int, 'rowTypes'),
        (['in'], BSTR, 'val')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'CreateCellStyle',
        (['in'], BSTR, 'bstrCellStyle')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'CreateCellStyleFromStyle',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], BSTR, 'bstrSourceCellStyle')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'RenameCellStyle',
        (['in'], BSTR, 'bstrOldName'),
        (['in'], BSTR, 'bstrNewName')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'DeleteCellStyle',
        (['in'], BSTR, 'bstrCellStyle')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'GetUniqueCellStyleName',
        (['in'], BSTR, 'pszBaseName'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrUniqueName')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'GetIsCellStyleInUse',
        (['in'], BSTR, 'pszCellStyle'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(37), 'propget'],
        HRESULT,
        'NumCellStyles',
        (['out', 'retval'], POINTER(c_int), 'NumCellStyles')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'GetCellStyles',
        (['in'], POINTER(VARIANT), 'cellStylesArray')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Returns the text style name for the specified cellStyle.')],
        HRESULT,
        'GetTextStyleId',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(LONG_PTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Sets the text style name for the specified cellStyle.')],
        HRESULT,
        'SetTextStyleId',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], LONG_PTR, 'val')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Returns the text height for the specified cellStyle.')],
        HRESULT,
        'GetTextHeight2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(42), helpstring('Sets the text height for the specified cellStyle.')],
        HRESULT,
        'SetTextHeight2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Returns the cell alignment for the specified cellStyle.')],
        HRESULT,
        'GetAlignment2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Sets the cell alignment for the specified cellStyle.')],
        HRESULT,
        'SetAlignment2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcCellAlignment, 'cellAlignment')
    ),
    COMMETHOD(
        [dispid(45), helpstring('Returns the true color value for the specified cellStyle.')],
        HRESULT,
        'GetColor2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color')
    ),
    COMMETHOD(
        [dispid(46), helpstring('Sets the true color value for the specified cellStyle.')],
        HRESULT,
        'SetColor2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], POINTER(IAcadAcCmColor), 'color')
    ),
    COMMETHOD(
        [dispid(47), helpstring('Returns the background true color value for the specified cellStyle.')],
        HRESULT,
        'GetBackgroundColor2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets the background true color value for the specified cellStyle.')],
        HRESULT,
        'SetBackgroundColor2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], POINTER(IAcadAcCmColor), 'color')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Returns the data type and unit type for the specifed cellStyle.')],
        HRESULT,
        'GetDataType2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out'], POINTER(AcValueDataType), 'pDataType'),
        (['out'], POINTER(AcValueUnitType), 'pUnitType')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets the data type and unit type for the specifed cellStyle.')],
        HRESULT,
        'SetDataType2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcValueDataType, 'nDataType'),
        (['in'], AcValueUnitType, 'nUnitType')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Returns the format for the specifed cellStyle.')],
        HRESULT,
        'GetFormat2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out'], POINTER(BSTR), 'pbstrFormat')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets the format for the specifed cellStyle.')],
        HRESULT,
        'SetFormat2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], BSTR, 'bstrFormat')
    ),
    COMMETHOD(
        [dispid(1610809404)],
        HRESULT,
        'GetCellClass',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(c_int), 'cellClass')
    ),
    COMMETHOD(
        [dispid(1610809405)],
        HRESULT,
        'SetCellClass',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], c_int, 'cellClass')
    ),
    COMMETHOD(
        [dispid(1610809406)],
        HRESULT,
        'GetRotation',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(c_double), 'Rotation')
    ),
    COMMETHOD(
        [dispid(1610809407)],
        HRESULT,
        'SetRotation',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], c_double, 'Rotation')
    ),
    COMMETHOD(
        [dispid(1610809408)],
        HRESULT,
        'GetIsMergeAllEnabled',
        (['in'], BSTR, 'bstrCellStyle'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnable')
    ),
    COMMETHOD(
        [dispid(1610809409)],
        HRESULT,
        'EnableMergeAll',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], VARIANT_BOOL, 'bEnable')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Gets the gridLineWeight value for the specified gridLineType(s) and cellStyle.')],
        HRESULT,
        'GetGridLineWeight2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcGridLineType, 'gridLineType'),
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets the gridLineWeight value for the specified gridLineType(s) and cellStyle.')],
        HRESULT,
        'SetGridLineWeight2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcGridLineType, 'gridLineTypes'),
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Returns the gridColor value for the specified gridLineType and cellStyle.')],
        HRESULT,
        'GetGridColor2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcGridLineType, 'gridLineType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets the gridColor value for the specified gridLineType and cellStyle.')],
        HRESULT,
        'SetGridColor2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcGridLineType, 'gridLineTypes'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Returns the gridVisibility value for the specified gridLineType and cellStyle.')],
        HRESULT,
        'GetGridVisibility2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcGridLineType, 'gridLineType'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Sets the gridVisibility value for the specified gridLineType and cellStyle.')],
        HRESULT,
        'SetGridVisibility2',
        (['in'], BSTR, 'bstrCellStyle'),
        (['in'], AcGridLineType, 'gridLineTypes'),
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(61), 'propget'],
        HRESULT,
        'TemplateId',
        (['out', 'retval'], POINTER(LONG_PTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(61), 'propput'],
        HRESULT,
        'TemplateId',
        (['in'], LONG_PTR, 'pVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'SetTemplateId',
        (['in'], LONG_PTR, 'val'),
        ([], AcMergeCellStyleOption, 'option')
    ),
]

################################################################
# code template for IAcadTableStyle implementation
# class IAcadTableStyle_Impl(object):
#     def _get(self):
#         'Returns and sets the name of the tablestyle.'
#         #return bstrValue
#     def _set(self, bstrValue):
#         'Returns and sets the name of the tablestyle.'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the description of the tablestyle.'
#         #return bstr
#     def _set(self, bstr):
#         'Returns and sets the description of the tablestyle.'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the bit flag values.'
#         #return bitFlag
#     def _set(self, bitFlag):
#         'Returns and sets the bit flag values.'
#     BitFlags = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the table flow direction value.'
#         #return pFlow
#     def _set(self, pFlow):
#         'Returns and sets the table flow direction value.'
#     FlowDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the horizontal cell margin value.'
#         #return dHorzCellMargin
#     def _set(self, dHorzCellMargin):
#         'Returns and sets the horizontal cell margin value.'
#     HorzCellMargin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the vertical cell margin value.'
#         #return dVertCellMargin
#     def _set(self, dVertCellMargin):
#         'Returns and sets the vertical cell margin value.'
#     VertCellMargin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the title suppressed flag value.'
#         #return bValue
#     def _set(self, bValue):
#         'Returns and sets the title suppressed flag value.'
#     TitleSuppressed = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the header suppressed flag value.'
#         #return bValue
#     def _set(self, bValue):
#         'Returns and sets the header suppressed flag value.'
#     HeaderSuppressed = property(_get, _set, doc = _set.__doc__)
#
#     def GetTextStyle(self, rowType):
#         'Returns the text style name for the specified row type.'
#         #return bstrName
#
#     def SetTextStyle(self, rowTypes, bstrName):
#         'Sets the text style name for the specified row types.'
#         #return 
#
#     def GetTextHeight(self, rowType):
#         'Returns the text height for the specified row type.'
#         #return pTextHeight
#
#     def SetTextHeight(self, rowTypes, TextHeight):
#         'Sets the text height for the specified row types.'
#         #return 
#
#     def GetAlignment(self, rowType):
#         'Returns the cell alignment for the specified row type.'
#         #return pCellAlignment
#
#     def SetAlignment(self, rowTypes, cellAlignment):
#         'Sets the cell alignment for the specified row types.'
#         #return 
#
#     def GetColor(self, rowType):
#         'Returns the true color value for the specified row type.'
#         #return pColor
#
#     def SetColor(self, rowTypes, pColor):
#         'Sets the true color value for the specifed row types.'
#         #return 
#
#     def GetBackgroundColor(self, rowType):
#         'Returns the background true color value for the specified row type.'
#         #return pColor
#
#     def SetBackgroundColor(self, rowTypes, pColor):
#         'Sets the background true color value for the specifed row types.'
#         #return 
#
#     def GetBackgroundColorNone(self, rowType):
#         'Returns the backgroundColorNone flag value for the specified row type.'
#         #return bValue
#
#     def SetBackgroundColorNone(self, rowTypes, bValue):
#         'Sets the backgroundColorNone flag value for the specified row types.'
#         #return 
#
#     def GetGridLineWeight(self, gridLineType, rowType):
#         'Returns the gridLineWeight value for the specifed gridLineType and row type.'
#         #return Lineweight
#
#     def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
#         'Sets the gridLineWeight value for the specifed gridLineTypes and row types.'
#         #return 
#
#     def GetGridColor(self, gridLineType, rowType):
#         'Returns the gridColor value for the specifed gridLineType and row type.'
#         #return pColor
#
#     def SetGridColor(self, gridLineTypes, rowTypes, pColor):
#         'Sets the gridColor value for the specifed gridLineTypes and row types.'
#         #return 
#
#     def GetGridVisibility(self, gridLineType, rowType):
#         'Returns the gridVisibility value for the specifed gridLineType and row type.'
#         #return bValue
#
#     def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
#         'Sets the gridVisibility value for the specifed gridLineTypes and row types.'
#         #return 
#
#     def GetDataType(self, rowType):
#         'Returns the data type and unit type for the specifed row type.'
#         #return pDataType, pUnitType
#
#     def SetDataType(self, rowTypes, nDataType, nUnitType):
#         'Sets the data type and unit type for the specifed row type.'
#         #return 
#
#     def GetFormat(self, rowType):
#         'Returns the format for the specifed row type.'
#         #return pVal
#
#     def SetFormat(self, rowTypes, val):
#         'Sets the format for the specifed row type.'
#         #return 
#
#     def CreateCellStyle(self, bstrCellStyle):
#         '-no docstring-'
#         #return 
#
#     def CreateCellStyleFromStyle(self, bstrCellStyle, bstrSourceCellStyle):
#         '-no docstring-'
#         #return 
#
#     def RenameCellStyle(self, bstrOldName, bstrNewName):
#         '-no docstring-'
#         #return 
#
#     def DeleteCellStyle(self, bstrCellStyle):
#         '-no docstring-'
#         #return 
#
#     def GetUniqueCellStyleName(self, pszBaseName):
#         '-no docstring-'
#         #return pbstrUniqueName
#
#     def GetIsCellStyleInUse(self, pszCellStyle):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def NumCellStyles(self):
#         '-no docstring-'
#         #return NumCellStyles
#
#     def GetCellStyles(self, cellStylesArray):
#         '-no docstring-'
#         #return 
#
#     def GetTextStyleId(self, bstrCellStyle):
#         'Returns the text style name for the specified cellStyle.'
#         #return pVal
#
#     def SetTextStyleId(self, bstrCellStyle, val):
#         'Sets the text style name for the specified cellStyle.'
#         #return 
#
#     def GetTextHeight2(self, bstrCellStyle):
#         'Returns the text height for the specified cellStyle.'
#         #return pHeight
#
#     def SetTextHeight2(self, bstrCellStyle, Height):
#         'Sets the text height for the specified cellStyle.'
#         #return 
#
#     def GetAlignment2(self, bstrCellStyle):
#         'Returns the cell alignment for the specified cellStyle.'
#         #return pCellAlignment
#
#     def SetAlignment2(self, bstrCellStyle, cellAlignment):
#         'Sets the cell alignment for the specified cellStyle.'
#         #return 
#
#     def GetColor2(self, bstrCellStyle):
#         'Returns the true color value for the specified cellStyle.'
#         #return color
#
#     def SetColor2(self, bstrCellStyle, color):
#         'Sets the true color value for the specified cellStyle.'
#         #return 
#
#     def GetBackgroundColor2(self, bstrCellStyle):
#         'Returns the background true color value for the specified cellStyle.'
#         #return color
#
#     def SetBackgroundColor2(self, bstrCellStyle, color):
#         'Sets the background true color value for the specified cellStyle.'
#         #return 
#
#     def GetDataType2(self, bstrCellStyle):
#         'Returns the data type and unit type for the specifed cellStyle.'
#         #return pDataType, pUnitType
#
#     def SetDataType2(self, bstrCellStyle, nDataType, nUnitType):
#         'Sets the data type and unit type for the specifed cellStyle.'
#         #return 
#
#     def GetFormat2(self, bstrCellStyle):
#         'Returns the format for the specifed cellStyle.'
#         #return pbstrFormat
#
#     def SetFormat2(self, bstrCellStyle, bstrFormat):
#         'Sets the format for the specifed cellStyle.'
#         #return 
#
#     def GetCellClass(self, bstrCellStyle):
#         '-no docstring-'
#         #return cellClass
#
#     def SetCellClass(self, bstrCellStyle, cellClass):
#         '-no docstring-'
#         #return 
#
#     def GetRotation(self, bstrCellStyle):
#         '-no docstring-'
#         #return Rotation
#
#     def SetRotation(self, bstrCellStyle, Rotation):
#         '-no docstring-'
#         #return 
#
#     def GetIsMergeAllEnabled(self, bstrCellStyle):
#         '-no docstring-'
#         #return bEnable
#
#     def EnableMergeAll(self, bstrCellStyle, bEnable):
#         '-no docstring-'
#         #return 
#
#     def GetGridLineWeight2(self, bstrCellStyle, gridLineType):
#         'Gets the gridLineWeight value for the specified gridLineType(s) and cellStyle.'
#         #return Lineweight
#
#     def SetGridLineWeight2(self, bstrCellStyle, gridLineTypes, Lineweight):
#         'Sets the gridLineWeight value for the specified gridLineType(s) and cellStyle.'
#         #return 
#
#     def GetGridColor2(self, bstrCellStyle, gridLineType):
#         'Returns the gridColor value for the specified gridLineType and cellStyle.'
#         #return pColor
#
#     def SetGridColor2(self, bstrCellStyle, gridLineTypes, pColor):
#         'Sets the gridColor value for the specified gridLineType and cellStyle.'
#         #return 
#
#     def GetGridVisibility2(self, bstrCellStyle, gridLineType):
#         'Returns the gridVisibility value for the specified gridLineType and cellStyle.'
#         #return bValue
#
#     def SetGridVisibility2(self, bstrCellStyle, gridLineTypes, bValue):
#         'Sets the gridVisibility value for the specified gridLineType and cellStyle.'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pVal
#     def _set(self, pVal):
#         '-no docstring-'
#     TemplateId = property(_get, _set, doc = _set.__doc__)
#
#     def SetTemplateId(self, val, option):
#         '-no docstring-'
#         #return 
#


class AcadDgnUnderlay(CoClass):
    _reg_clsid_ = GUID('{B032B582-F042-4DDC-B904-8F8B250F65B5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDgnUnderlay._com_interfaces_ = [IAcadUnderlay]
AcadDgnUnderlay._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadMenuGroup(CoClass):
    """An AutoCAD menu group"""
    _reg_clsid_ = GUID('{3A625576-85BA-425C-B121-3CA6D8048184}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadMenuGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """An AutoCAD menu group"""
    _case_insensitive_ = True
    _iid_ = GUID('{945BE914-0B8C-49CB-B61A-6C4B9ABC3281}')
    _idlflags_ = ['dual', 'oleautomation']


AcadMenuGroup._com_interfaces_ = [IAcadMenuGroup]


class AcadUtility(CoClass):
    """A series of methods provided for utility purposes"""
    _reg_clsid_ = GUID('{0605FD7F-5675-42F6-8C9A-0D8A2AAAE547}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadUtility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A series of methods provided for utility purposes"""
    _case_insensitive_ = True
    _iid_ = GUID('{F693DA67-0534-44D8-BDA3-E20C5FA32BA0}')
    _idlflags_ = ['dual', 'oleautomation']


AcadUtility._com_interfaces_ = [IAcadUtility]
# values for enumeration 'AcVerticalAlignment'
acVerticalAlignmentBaseline = 0
acVerticalAlignmentBottom = 1
acVerticalAlignmentMiddle = 2
acVerticalAlignmentTop = 3
AcVerticalAlignment = c_int  # enum


class _DAcadDocumentEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """Event interface for ThisDrawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{1C5F04BB-9E50-489E-A879-65225E27A6CD}')
    _idlflags_ = ['hidden']
    _methods_ = []


class IAcadPopupMenu(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """An AutoCAD cascading menu"""
    _case_insensitive_ = True
    _iid_ = GUID('{CA20E9D5-7353-4B5E-9098-A66F741C2A72}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadSelectionSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A group of one or more AutoCAD objects specified for processing as a single unit"""
    _case_insensitive_ = True
    _iid_ = GUID('{43820684-2C5B-4682-B644-AD703C70A611}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcWindowState'
acNorm = 1
acMin = 2
acMax = 3
AcWindowState = c_int  # enum

_DAcadDocumentEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1), helpstring('Triggered immediately after AutoCAD receives a request to save the drawing')],
        HRESULT,
        'BeginSave',
        (['in'], BSTR, 'FileName')
    ),
    DISPMETHOD(
        [dispid(2), helpstring('Triggered when AutoCAD has finished saving the drawing')],
        HRESULT,
        'EndSave',
        (['in'], BSTR, 'FileName')
    ),
    DISPMETHOD(
        [dispid(6), helpstring('Triggered immediately after a command is issued, but before it completes')],
        HRESULT,
        'BeginCommand',
        (['in'], BSTR, 'CommandName')
    ),
    DISPMETHOD(
        [dispid(7), helpstring('Triggered immediately after a command completes')],
        HRESULT,
        'EndCommand',
        (['in'], BSTR, 'CommandName')
    ),
    DISPMETHOD(
        [dispid(8), helpstring('Triggered immediately after AutoCAD receives a request to evaluate a LISP expression')],
        HRESULT,
        'BeginLisp',
        (['in'], BSTR, 'FirstLine')
    ),
    DISPMETHOD(
        [dispid(9), helpstring('Triggered upon completion of evaluating a LISP expression')],
        HRESULT,
        'EndLisp',
    ),
    DISPMETHOD(
        [dispid(10), helpstring('Triggered when the evaluation of a LISP expression is cancelled')],
        HRESULT,
        'LispCancelled',
    ),
    DISPMETHOD(
        [dispid(11), helpstring('Triggered when the current pickfirst selection set changes')],
        HRESULT,
        'SelectionChanged',
    ),
    DISPMETHOD(
        [dispid(12), helpstring('Triggered when a document window is activated')],
        HRESULT,
        'Activate',
    ),
    DISPMETHOD(
        [dispid(13), helpstring('Triggered when the drawing window is deactivated')],
        HRESULT,
        'Deactivate',
    ),
    DISPMETHOD(
        [dispid(14), helpstring('Triggered after the user right-clicks on the drawing window')],
        HRESULT,
        'BeginRightClick',
        (['in'], VARIANT, 'PickPoint')
    ),
    DISPMETHOD(
        [dispid(15), helpstring('Triggered after the user right-clicks on the drawing window, and before the shortcut menu appears in default mode')],
        HRESULT,
        'BeginShortcutMenuDefault',
        (['out'], POINTER(POINTER(IAcadPopupMenu)), 'ShortcutMenu')
    ),
    DISPMETHOD(
        [dispid(16), helpstring('Triggered after the user right-clicks on the drawing window, and before the shortcut menu appears in edit mode')],
        HRESULT,
        'BeginShortcutMenuEdit',
        (['out'], POINTER(POINTER(IAcadPopupMenu)), 'ShortcutMenu'),
        (['out'], POINTER(POINTER(IAcadSelectionSet)), 'SelectionSet')
    ),
    DISPMETHOD(
        [dispid(17), helpstring('Triggered after the user right-clicks on the drawing window, and before the shortcut menu appears in command mode')],
        HRESULT,
        'BeginShortcutMenuCommand',
        (['out'], POINTER(POINTER(IAcadPopupMenu)), 'ShortcutMenu'),
        (['in'], BSTR, 'Command')
    ),
    DISPMETHOD(
        [dispid(18), helpstring('Triggered after the user right-clicks on the drawing window, and before the shortcut menu appears in grip mode')],
        HRESULT,
        'BeginShortcutMenuGrip',
        (['out'], POINTER(POINTER(IAcadPopupMenu)), 'ShortcutMenu')
    ),
    DISPMETHOD(
        [dispid(19), helpstring('Triggered after the user right-clicks on the drawing window, and before the shortcut menu appears in osnap mode')],
        HRESULT,
        'BeginShortcutMenuOsnap',
        (['out'], POINTER(POINTER(IAcadPopupMenu)), 'ShortcutMenu')
    ),
    DISPMETHOD(
        [dispid(30), helpstring('Triggered after the shortcut menu appears')],
        HRESULT,
        'EndShortcutMenu',
        (['out'], POINTER(POINTER(IAcadPopupMenu)), 'ShortcutMenu')
    ),
    DISPMETHOD(
        [dispid(20), helpstring('Triggered after the user double-clicks on an object in the drawing')],
        HRESULT,
        'BeginDoubleClick',
        (['in'], VARIANT, 'PickPoint')
    ),
    DISPMETHOD(
        [dispid(21), helpstring('Triggered when an object has been added to the drawing')],
        HRESULT,
        'ObjectAdded',
        (['in'], POINTER(IDispatch), 'Object')
    ),
    DISPMETHOD(
        [dispid(22), helpstring('Triggered when an object has been erased from the drawing')],
        HRESULT,
        'ObjectErased',
        (['in'], LONG_PTR, 'ObjectID')
    ),
    DISPMETHOD(
        [dispid(23), helpstring('Triggered when an object in the drawing has been modified')],
        HRESULT,
        'ObjectModified',
        (['in'], POINTER(IDispatch), 'Object')
    ),
    DISPMETHOD(
        [dispid(24), helpstring('Triggered immediately after AutoCAD receives a request to print a drawing')],
        HRESULT,
        'BeginPlot',
        (['in'], BSTR, 'DrawingName')
    ),
    DISPMETHOD(
        [dispid(25), helpstring('Triggered after a document has been sent to the printer')],
        HRESULT,
        'EndPlot',
        (['in'], BSTR, 'DrawingName')
    ),
    DISPMETHOD(
        [dispid(29), helpstring('Happens when the drawing window is moved or resized.')],
        HRESULT,
        'WindowMovedOrResized',
        (['in'], LONG_PTR, 'HWNDFrame'),
        (['in'], VARIANT_BOOL, 'bMoved')
    ),
    DISPMETHOD(
        [dispid(31), helpstring('Triggered after the user switches to a different layout')],
        HRESULT,
        'LayoutSwitched',
        (['in'], BSTR, 'LayoutName')
    ),
    DISPMETHOD(
        [dispid(32), helpstring('Triggered when there is a change to the application or document windows')],
        HRESULT,
        'WindowChanged',
        (['in'], AcWindowState, 'WindowState')
    ),
    DISPMETHOD(
        [dispid(33), helpstring('Triggered immediately after AutoCAD receives a request to close a drawing')],
        HRESULT,
        'BeginClose',
    ),
    DISPMETHOD(
        [dispid(34), helpstring('Triggered before the BeginClose event. This is an opportunity to cancel the closing process')],
        HRESULT,
        'BeginDocClose',
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
]


class AcadPdfUnderlay(CoClass):
    _reg_clsid_ = GUID('{959E3F93-4319-4A5C-BCFE-E13F236ABE0F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPdfUnderlay._com_interfaces_ = [IAcadUnderlay]
AcadPdfUnderlay._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadSubEntity(CoClass):
    """AcadSubEntity Class"""
    _reg_clsid_ = GUID('{EE76E4F5-116C-4A4E-A629-B4FFE25E69BD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubEntity._com_interfaces_ = [IAcadSubEntity]
# values for enumeration 'AcDimToleranceJustify'
acTolBottom = 0
acTolMiddle = 1
acTolTop = 2
AcDimToleranceJustify = c_int  # enum


class IAcadSubEntSolidEdge(IAcadSubEntity):
    """AutoCAD Interface for a edge on an AcDb3dSolid"""
    _case_insensitive_ = True
    _iid_ = GUID('{E8C6F338-1641-4C3E-92AC-3A0C8AD47222}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSubEntSolidEdge._methods_ = [
]

################################################################
# code template for IAcadSubEntSolidEdge implementation
# class IAcadSubEntSolidEdge_Impl(object):
# values for enumeration 'AcTextGenerationFlag'
acTextFlagBackward = 2
acTextFlagUpsideDown = 4
AcTextGenerationFlag = c_int  # enum


class AcadSubEntSolidFace(CoClass):
    """AcadSubEntSolidFace Class"""
    _reg_clsid_ = GUID('{E1AB8D4E-4EC9-4D1E-B4F9-13EEC5098487}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubEntSolidFace._com_interfaces_ = [IAcadSubEntSolidFace]


class IAcadShape(IAcadEntity):
    """AutoCAD Shape Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{A6CD59A2-EEE0-47D2-A501-A783AD2352A8}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadShape._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify X, Y, Z coordinate for the insertion point of the shape or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify X, Y, Z coordinate for the insertion point of the shape or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the shape'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the shape'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the height of the shape'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the height of the shape'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the rotation angle of the shape'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the rotation angle of the shape'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width scale factor of the shape'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width scale factor of the shape'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'scalFactor')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the oblique angle of the shape'), 'propget'],
        HRESULT,
        'ObliqueAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the oblique angle of the shape'), 'propput'],
        HRESULT,
        'ObliqueAngle',
        (['in'], ACAD_ANGLE, 'obliAngle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the thickness of the shape'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the thickness of the shape'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
]

################################################################
# code template for IAcadShape implementation
# class IAcadShape_Impl(object):
#     def _get(self):
#         'Specify X, Y, Z coordinate for the insertion point of the shape or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specify X, Y, Z coordinate for the insertion point of the shape or use the Pick Point button to set X, Y, Z values simultaneously'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the shape'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the shape'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the shape'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the shape'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the shape'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the shape'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width scale factor of the shape'
#         #return scalFactor
#     def _set(self, scalFactor):
#         'Specifies the width scale factor of the shape'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the oblique angle of the shape'
#         #return obliAngle
#     def _set(self, obliAngle):
#         'Specifies the oblique angle of the shape'
#     ObliqueAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the shape'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the shape'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#


class IAcadDimRotated(IAcadDimension):
    """AutoCAD Rotated Dimension Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{6F973F93-AE96-4B39-8138-A34F7D818D38}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcDimVerticalJustification'
acVertCentered = 0
acAbove = 1
acOutside = 2
acJIS = 3
acUnder = 4
AcDimVerticalJustification = c_int  # enum
# values for enumeration 'AcDimPrecision'
acDimPrecisionZero = 0
acDimPrecisionOne = 1
acDimPrecisionTwo = 2
acDimPrecisionThree = 3
acDimPrecisionFour = 4
acDimPrecisionFive = 5
acDimPrecisionSix = 6
acDimPrecisionSeven = 7
acDimPrecisionEight = 8
AcDimPrecision = c_int  # enum

IAcadDimension._methods_ = [
    COMMETHOD(
        [dispid(1537), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(1537), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(1538), helpstring('Specifies the rotation angle for the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(1538), helpstring('Specifies the rotation angle for the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(1539), helpstring('Specifies the dimension text position or pick point'), 'propget'],
        HRESULT,
        'TextPosition',
        (['out', 'retval'], POINTER(VARIANT), 'textPos')
    ),
    COMMETHOD(
        [dispid(1539), helpstring('Specifies the dimension text position or pick point'), 'propput'],
        HRESULT,
        'TextPosition',
        (['in'], VARIANT, 'textPos')
    ),
    COMMETHOD(
        [dispid(1540), helpstring('Specifies the rotation angle of the dimension text'), 'propget'],
        HRESULT,
        'TextRotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(1540), helpstring('Specifies the rotation angle of the dimension text'), 'propput'],
        HRESULT,
        'TextRotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(1541), helpstring('Specifies the text string of the dimension (overrides Measurement string)'), 'propget'],
        HRESULT,
        'TextOverride',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(1541), helpstring('Specifies the text string of the dimension (overrides Measurement string)'), 'propput'],
        HRESULT,
        'TextOverride',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(1542), helpstring('Specifies the current dimension style by name (for DIMSTYLE system variable use SETVAR)'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1542), helpstring('Specifies the current dimension style by name (for DIMSTYLE system variable use SETVAR)'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1546), helpstring('Specifies the color of the dimension text (DIMCLRT system variable)'), 'propget'],
        HRESULT,
        'TextColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'color')
    ),
    COMMETHOD(
        [dispid(1546), helpstring('Specifies the color of the dimension text (DIMCLRT system variable)'), 'propput'],
        HRESULT,
        'TextColor',
        (['in'], ACAD_COLOR, 'color')
    ),
    COMMETHOD(
        [dispid(1548), helpstring('Specifies the decimal separator for metric dimensions (DIMDSEP system variable)'), 'propget'],
        HRESULT,
        'DecimalSeparator',
        (['out', 'retval'], POINTER(BSTR), 'character')
    ),
    COMMETHOD(
        [dispid(1548), helpstring('Specifies the decimal separator for metric dimensions (DIMDSEP system variable)'), 'propput'],
        HRESULT,
        'DecimalSeparator',
        (['in'], BSTR, 'character')
    ),
    COMMETHOD(
        [dispid(1549), helpstring('Specifies distance around dimension text when dimension line breaks for dimension text (DIMGAP system variable)'), 'propget'],
        HRESULT,
        'TextGap',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(1549), helpstring('Specifies distance around dimension text when dimension line breaks for dimension text (DIMGAP system variable)'), 'propput'],
        HRESULT,
        'TextGap',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(1551), helpstring('Specifies the text prefix for the dimension (DIMPOST system variable)'), 'propget'],
        HRESULT,
        'TextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(1551), helpstring('Specifies the text prefix for the dimension (DIMPOST system variable)'), 'propput'],
        HRESULT,
        'TextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(1552), helpstring('Specifies the text suffix for the dimension (DIMPOST system variable)'), 'propget'],
        HRESULT,
        'TextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1552), helpstring('Specifies the text suffix for the dimension (DIMPOST system variable)'), 'propput'],
        HRESULT,
        'TextSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1553), helpstring('Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets (DIMSCALE system variable)'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor')
    ),
    COMMETHOD(
        [dispid(1553), helpstring('Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets (DIMSCALE system variable)'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'factor')
    ),
    COMMETHOD(
        [dispid(1554), helpstring('Specifies the vertical dimension text position relative to dimension line (DIMTAD system variable)'), 'propget'],
        HRESULT,
        'VerticalTextPosition',
        (['out', 'retval'], POINTER(AcDimVerticalJustification), 'Type')
    ),
    COMMETHOD(
        [dispid(1554), helpstring('Specifies the vertical dimension text position relative to dimension line (DIMTAD system variable)'), 'propput'],
        HRESULT,
        'VerticalTextPosition',
        (['in'], AcDimVerticalJustification, 'Type')
    ),
    COMMETHOD(
        [dispid(1555), helpstring('Specifies number of decimal places for tolerance values of a dimension (DIMTDEC system variable)'), 'propget'],
        HRESULT,
        'TolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(1555), helpstring('Specifies number of decimal places for tolerance values of a dimension (DIMTDEC system variable)'), 'propput'],
        HRESULT,
        'TolerancePrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(1556), helpstring('Specifies scale factor for text height of tolerance values relative to dimension text height as set by DIMTXT (DIMTFAC system variable)'), 'propget'],
        HRESULT,
        'ToleranceHeightScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(1556), helpstring('Specifies scale factor for text height of tolerance values relative to dimension text height as set by DIMTXT (DIMTFAC system variable)'), 'propput'],
        HRESULT,
        'ToleranceHeightScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(1557), helpstring('Specifies minimum (or lower) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTM system variable)'), 'propget'],
        HRESULT,
        'ToleranceLowerLimit',
        (['out', 'retval'], POINTER(c_double), 'lower')
    ),
    COMMETHOD(
        [dispid(1557), helpstring('Specifies minimum (or lower) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTM system variable)'), 'propput'],
        HRESULT,
        'ToleranceLowerLimit',
        (['in'], c_double, 'lower')
    ),
    COMMETHOD(
        [dispid(1558), helpstring("Specifies position of text when it's moved, either manually or automatically (DIMTMOVE system variable)"), 'propget'],
        HRESULT,
        'TextMovement',
        (['out', 'retval'], POINTER(AcDimTextMovement), 'Move')
    ),
    COMMETHOD(
        [dispid(1558), helpstring("Specifies position of text when it's moved, either manually or automatically (DIMTMOVE system variable)"), 'propput'],
        HRESULT,
        'TextMovement',
        (['in'], AcDimTextMovement, 'Move')
    ),
    COMMETHOD(
        [dispid(1559), helpstring('Specifies display mode of dimension tolerances to dimension text (DIMTOL system variable)'), 'propget'],
        HRESULT,
        'ToleranceDisplay',
        (['out', 'retval'], POINTER(AcDimToleranceMethod), 'method')
    ),
    COMMETHOD(
        [dispid(1559), helpstring('Specifies display mode of dimension tolerances to dimension text (DIMTOL system variable)'), 'propput'],
        HRESULT,
        'ToleranceDisplay',
        (['in'], AcDimToleranceMethod, 'method')
    ),
    COMMETHOD(
        [dispid(1560), helpstring('Specifies vertical justification for tolerance values relative to nominal dimension text (DIMTOLJ system variable)'), 'propget'],
        HRESULT,
        'ToleranceJustification',
        (['out', 'retval'], POINTER(AcDimToleranceJustify), 'method')
    ),
    COMMETHOD(
        [dispid(1560), helpstring('Specifies vertical justification for tolerance values relative to nominal dimension text (DIMTOLJ system variable)'), 'propput'],
        HRESULT,
        'ToleranceJustification',
        (['in'], AcDimToleranceJustify, 'method')
    ),
    COMMETHOD(
        [dispid(1561), helpstring('Specifies the maximum (or upper) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTP sysem variable)'), 'propget'],
        HRESULT,
        'ToleranceUpperLimit',
        (['out', 'retval'], POINTER(c_double), 'upper')
    ),
    COMMETHOD(
        [dispid(1561), helpstring('Specifies the maximum (or upper) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTP sysem variable)'), 'propput'],
        HRESULT,
        'ToleranceUpperLimit',
        (['in'], c_double, 'upper')
    ),
    COMMETHOD(
        [dispid(1562), helpstring('Specifies text style of the dimension (DIMTXSTY system variable)'), 'propget'],
        HRESULT,
        'TextStyle',
        (['out', 'retval'], POINTER(BSTR), 'style')
    ),
    COMMETHOD(
        [dispid(1562), helpstring('Specifies text style of the dimension (DIMTXSTY system variable)'), 'propput'],
        HRESULT,
        'TextStyle',
        (['in'], BSTR, 'style')
    ),
    COMMETHOD(
        [dispid(1563), helpstring('Specifies text height of the dimension (DIMTXT system variable)'), 'propget'],
        HRESULT,
        'TextHeight',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(1563), helpstring('Specifies text height of the dimension (DIMTXT system variable)'), 'propput'],
        HRESULT,
        'TextHeight',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(1565), helpstring('Sets suppression of leading zeros for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(1565), helpstring('Sets suppression of leading zeros for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(1566), helpstring('Sets suppression of trailing zeros for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(1566), helpstring('Sets suppression of trailing zeros for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(1569), helpstring('Sets suppression of leading zeros for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(1569), helpstring('Sets suppression of leading zeros for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(1570), helpstring('Sets suppression of trailing zeros for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(1570), helpstring('Sets suppression of trailing zeros for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(1571), helpstring('Sets fill color On or Off (DIMTFILL system variable)'), 'propget'],
        HRESULT,
        'TextFill',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(1571), helpstring('Sets fill color On or Off (DIMTFILL system variable)'), 'propput'],
        HRESULT,
        'TextFill',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(1572), helpstring('Sets text fill color (DIMTFILLCLR system variable)'), 'propget'],
        HRESULT,
        'TextFillColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'color')
    ),
    COMMETHOD(
        [dispid(1572), helpstring('Sets text fill color (DIMTFILLCLR system variable)'), 'propput'],
        HRESULT,
        'TextFillColor',
        (['in'], ACAD_COLOR, 'color')
    ),
    COMMETHOD(
        [dispid(1573), helpstring('Specifies the dimension text viewing direction.'), 'propget'],
        HRESULT,
        'DimTxtDirection',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(1573), helpstring('Specifies the dimension text viewing direction.'), 'propput'],
        HRESULT,
        'DimTxtDirection',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
]

################################################################
# code template for IAcadDimension implementation
# class IAcadDimension_Impl(object):
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle for the object'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle for the object'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the dimension text position or pick point'
#         #return textPos
#     def _set(self, textPos):
#         'Specifies the dimension text position or pick point'
#     TextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the dimension text'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the dimension text'
#     TextRotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text string of the dimension (overrides Measurement string)'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the dimension (overrides Measurement string)'
#     TextOverride = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current dimension style by name (for DIMSTYLE system variable use SETVAR)'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the current dimension style by name (for DIMSTYLE system variable use SETVAR)'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the dimension text (DIMCLRT system variable)'
#         #return color
#     def _set(self, color):
#         'Specifies the color of the dimension text (DIMCLRT system variable)'
#     TextColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the decimal separator for metric dimensions (DIMDSEP system variable)'
#         #return character
#     def _set(self, character):
#         'Specifies the decimal separator for metric dimensions (DIMDSEP system variable)'
#     DecimalSeparator = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance around dimension text when dimension line breaks for dimension text (DIMGAP system variable)'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies distance around dimension text when dimension line breaks for dimension text (DIMGAP system variable)'
#     TextGap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text prefix for the dimension (DIMPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies the text prefix for the dimension (DIMPOST system variable)'
#     TextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for the dimension (DIMPOST system variable)'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for the dimension (DIMPOST system variable)'
#     TextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets (DIMSCALE system variable)'
#         #return factor
#     def _set(self, factor):
#         'Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets (DIMSCALE system variable)'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the vertical dimension text position relative to dimension line (DIMTAD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies the vertical dimension text position relative to dimension line (DIMTAD system variable)'
#     VerticalTextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of a dimension (DIMTDEC system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies number of decimal places for tolerance values of a dimension (DIMTDEC system variable)'
#     TolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for text height of tolerance values relative to dimension text height as set by DIMTXT (DIMTFAC system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for text height of tolerance values relative to dimension text height as set by DIMTXT (DIMTFAC system variable)'
#     ToleranceHeightScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies minimum (or lower) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTM system variable)'
#         #return lower
#     def _set(self, lower):
#         'Specifies minimum (or lower) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTM system variable)'
#     ToleranceLowerLimit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies position of text when it's moved, either manually or automatically (DIMTMOVE system variable)"
#         #return Move
#     def _set(self, Move):
#         "Specifies position of text when it's moved, either manually or automatically (DIMTMOVE system variable)"
#     TextMovement = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies display mode of dimension tolerances to dimension text (DIMTOL system variable)'
#         #return method
#     def _set(self, method):
#         'Specifies display mode of dimension tolerances to dimension text (DIMTOL system variable)'
#     ToleranceDisplay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies vertical justification for tolerance values relative to nominal dimension text (DIMTOLJ system variable)'
#         #return method
#     def _set(self, method):
#         'Specifies vertical justification for tolerance values relative to nominal dimension text (DIMTOLJ system variable)'
#     ToleranceJustification = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the maximum (or upper) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTP sysem variable)'
#         #return upper
#     def _set(self, upper):
#         'Specifies the maximum (or upper) tolerance limit for dimension text when DIMTOL or DIMLIM is on (DIMTP sysem variable)'
#     ToleranceUpperLimit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text style of the dimension (DIMTXSTY system variable)'
#         #return style
#     def _set(self, style):
#         'Specifies text style of the dimension (DIMTXSTY system variable)'
#     TextStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text height of the dimension (DIMTXT system variable)'
#         #return Height
#     def _set(self, Height):
#         'Specifies text height of the dimension (DIMTXT system variable)'
#     TextHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for dimensions On or Off (DIMZIN system variable)'
#     SuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for dimensions On or Off (DIMZIN system variable)'
#     SuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fill color On or Off (DIMTFILL system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets fill color On or Off (DIMTFILL system variable)'
#     TextFill = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets text fill color (DIMTFILLCLR system variable)'
#         #return color
#     def _set(self, color):
#         'Sets text fill color (DIMTFILLCLR system variable)'
#     TextFillColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the dimension text viewing direction.'
#         #return bVal
#     def _set(self, bVal):
#         'Specifies the dimension text viewing direction.'
#     DimTxtDirection = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcDimUnits'
acDimScientific = 1
acDimDecimal = 2
acDimEngineering = 3
acDimArchitecturalStacked = 4
acDimFractionalStacked = 5
acDimArchitectural = 6
acDimFractional = 7
acDimWindowsDesktop = 8
AcDimUnits = c_int  # enum
# values for enumeration 'AcDimFit'
acTextAndArrows = 0
acArrowsOnly = 1
acTextOnly = 2
acBestFit = 3
AcDimFit = c_int  # enum
# values for enumeration 'AcDimFractionType'
acHorizontal = 0
acDiagonal = 1
acNotStacked = 2
AcDimFractionType = c_int  # enum
# values for enumeration 'AcDimHorizontalJustification'
acHorzCentered = 0
acFirstExtensionLine = 1
acSecondExtensionLine = 2
acOverFirstExtension = 3
acOverSecondExtension = 4
AcDimHorizontalJustification = c_int  # enum
# values for enumeration 'AcDimLUnits'
acDimLScientific = 1
acDimLDecimal = 2
acDimLEngineering = 3
acDimLArchitectural = 4
acDimLFractional = 5
acDimLWindowsDesktop = 6
AcDimLUnits = c_int  # enum
# values for enumeration 'AcDimArrowheadType'
acArrowDefault = 0
acArrowClosedBlank = 1
acArrowClosed = 2
acArrowDot = 3
acArrowArchTick = 4
acArrowOblique = 5
acArrowOpen = 6
acArrowOrigin = 7
acArrowOrigin2 = 8
acArrowOpen90 = 9
acArrowOpen30 = 10
acArrowDotSmall = 11
acArrowDotBlank = 12
acArrowSmall = 13
acArrowBoxBlank = 14
acArrowBoxFilled = 15
acArrowDatumBlank = 16
acArrowDatumFilled = 17
acArrowIntegral = 18
acArrowNone = 19
acArrowUserDefined = 20
AcDimArrowheadType = c_int  # enum

IAcadDimRotated._methods_ = [
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propget'],
        HRESULT,
        'AltUnits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propput'],
        HRESULT,
        'AltUnits',
        (['in'], VARIANT_BOOL, 'bAlternate')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propget'],
        HRESULT,
        'AltUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propput'],
        HRESULT,
        'AltUnitsPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propget'],
        HRESULT,
        'AltUnitsScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propput'],
        HRESULT,
        'AltUnitsScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propget'],
        HRESULT,
        'AltRoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propput'],
        HRESULT,
        'AltRoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propget'],
        HRESULT,
        'AltTolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propput'],
        HRESULT,
        'AltTolerancePrecision',
        (['in'], AcDimPrecision, 'Distance')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propget'],
        HRESULT,
        'AltUnitsFormat',
        (['out', 'retval'], POINTER(AcDimUnits), 'Units')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propput'],
        HRESULT,
        'AltUnitsFormat',
        (['in'], AcDimUnits, 'Units')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextSuffix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propget'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Prec')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propput'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['in'], AcDimPrecision, 'Prec')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'), 'propget'],
        HRESULT,
        'DimensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'), 'propput'],
        HRESULT,
        'DimensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propget'],
        HRESULT,
        'FractionFormat',
        (['out', 'retval'], POINTER(AcDimFractionType), 'Type')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propput'],
        HRESULT,
        'FractionFormat',
        (['in'], AcDimFractionType, 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propget'],
        HRESULT,
        'HorizontalTextPosition',
        (['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propput'],
        HRESULT,
        'HorizontalTextPosition',
        (['in'], AcDimHorizontalJustification, 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propget'],
        HRESULT,
        'LinearScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propput'],
        HRESULT,
        'LinearScaleFactor',
        (['in'], ACAD_NOUNITS, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propget'],
        HRESULT,
        'UnitsFormat',
        (['out', 'retval'], POINTER(AcDimLUnits), 'format')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propput'],
        HRESULT,
        'UnitsFormat',
        (['in'], AcDimLUnits, 'format')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'lweight')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propget'],
        HRESULT,
        'RoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propput'],
        HRESULT,
        'RoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propget'],
        HRESULT,
        'DimLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propput'],
        HRESULT,
        'DimLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propget'],
        HRESULT,
        'DimLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propput'],
        HRESULT,
        'DimLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propget'],
        HRESULT,
        'DimLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propput'],
        HRESULT,
        'DimLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineOffset',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineOffset',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead1Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead1Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead2Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead2Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(c_double), 'bVal')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead1Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead1Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead2Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead2Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['in'], VARIANT_BOOL, 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLen',
        (['out', 'retval'], POINTER(c_double), 'FixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLen',
        (['in'], c_double, 'FixedLen')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propget'],
        HRESULT,
        'DimConstrForm',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propput'],
        HRESULT,
        'DimConstrForm',
        (['in'], VARIANT_BOOL, 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propget'],
        HRESULT,
        'DimConstrReference',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propput'],
        HRESULT,
        'DimConstrReference',
        (['in'], VARIANT_BOOL, 'bIsReference')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propget'],
        HRESULT,
        'DimConstrName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propput'],
        HRESULT,
        'DimConstrName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrExpression',
        (['out', 'retval'], POINTER(BSTR), 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrExpression',
        (['in'], BSTR, 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrValue',
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrValue',
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propget'],
        HRESULT,
        'DimConstrDesc',
        (['out', 'retval'], POINTER(BSTR), 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propput'],
        HRESULT,
        'DimConstrDesc',
        (['in'], BSTR, 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propget'],
        HRESULT,
        'SubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propput'],
        HRESULT,
        'SubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'SubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'SubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propget'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propput'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'AltSubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'AltSubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
]

################################################################
# code template for IAcadDimRotated implementation
# class IAcadDimRotated_Impl(object):
#     def _get(self):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#         #return bAlternate
#     def _set(self, bAlternate):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#     AltUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#     AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#     AltUnitsScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#     AltRoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#     AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#         #return Units
#     def _set(self, Units):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#     AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#     ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#         #return Prec
#     def _set(self, Prec):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#     PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'
#     DimensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#     ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fraction type (DIMFRAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Sets fraction type (DIMFRAC system variable)'
#     FractionFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#     HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#     LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#     UnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#         #return lweight
#     def _set(self, lweight):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#     ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value (DIMRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value (DIMRND system variable)'
#     RoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#     DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#     DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#     ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#     ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#     DimLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#     ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#     Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#     Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#     Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#     Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#     ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#     ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#         #return bFixedLen
#     def _set(self, bFixedLen):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#     ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Set extension line fixed length (DIMFXL system variable)'
#         #return FixedLen
#     def _set(self, FixedLen):
#         'Set extension line fixed length (DIMFXL system variable)'
#     ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the constraint type - Dynamic or Annotational'
#         #return bIsDynamic
#     def _set(self, bIsDynamic):
#         'Specifies the constraint type - Dynamic or Annotational'
#     DimConstrForm = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#         #return bIsReference
#     def _set(self, bIsReference):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#     DimConstrReference = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#     DimConstrName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the expression or the value of the constraint'
#         #return bstrExpression
#     def _set(self, bstrExpression):
#         'Specifies the expression or the value of the constraint'
#     DimConstrExpression = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the value of the constraint'
#         #return Value
#     def _set(self, Value):
#         'Specifies the value of the constraint'
#     DimConstrValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies description for constraint'
#         #return bstrDescription
#     def _set(self, bstrDescription):
#         'Specifies description for constraint'
#     DimConstrDesc = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#     SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#     SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#     AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#     AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcViewportScale'
acVpScaleToFit = 0
acVpCustomScale = 1
acVp1_1 = 2
acVp1_2 = 3
acVp1_4 = 4
acVp1_5 = 5
acVp1_8 = 6
acVp1_10 = 7
acVp1_16 = 8
acVp1_20 = 9
acVp1_30 = 10
acVp1_40 = 11
acVp1_50 = 12
acVp1_100 = 13
acVp2_1 = 14
acVp4_1 = 15
acVp8_1 = 16
acVp10_1 = 17
acVp100_1 = 18
acVp1_128in_1ft = 19
acVp1_64in_1ft = 20
acVp1_32in_1ft = 21
acVp1_16in_1ft = 22
acVp3_32in_1ft = 23
acVp1_8in_1ft = 24
acVp3_16in_1ft = 25
acVp1_4in_1ft = 26
acVp3_8in_1ft = 27
acVp1_2in_1ft = 28
acVp3_4in_1ft = 29
acVp1in_1ft = 30
acVp1and1_2in_1ft = 31
acVp3in_1ft = 32
acVp6in_1ft = 33
acVp1ft_1ft = 34
AcViewportScale = c_int  # enum
# values for enumeration 'AcSelect'
acSelectionSetWindow = 0
acSelectionSetCrossing = 1
acSelectionSetFence = 2
acSelectionSetPrevious = 3
acSelectionSetLast = 4
acSelectionSetAll = 5
acSelectionSetWindowPolygon = 6
acSelectionSetCrossingPolygon = 7
AcSelect = c_int  # enum


class IAcadBlockReference(IAcadEntity):
    """AutoCAD Block Reference Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{456EC1A0-3735-49AE-A57B-D474A826DCDC}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadExternalReference(IAcadBlockReference):
    """IAcadExternalReference Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{0708CBBE-DD72-4415-9D0F-4841BA610D23}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadBlockReference._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for insertion point of the block or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for insertion point of the block or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the block'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the block'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the rotation angle of the block'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the rotation angle of the block'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the XScale factor of the block'), 'propget'],
        HRESULT,
        'XScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the XScale factor of the block'), 'propput'],
        HRESULT,
        'XScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the Yscale factor of the block'), 'propget'],
        HRESULT,
        'YScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the Yscale factor of the block'), 'propput'],
        HRESULT,
        'YScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the ZScale factor of the block'), 'propget'],
        HRESULT,
        'ZScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the ZScale factor of the block'), 'propput'],
        HRESULT,
        'ZScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Explodes the block and returns the sub-entities as an array of Object')],
        HRESULT,
        'Explode',
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Gets Attributes in the block')],
        HRESULT,
        'GetAttributes',
        (['out', 'retval'], POINTER(VARIANT), 'pAttrObjs')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Gets constant attributes in the block')],
        HRESULT,
        'GetConstantAttributes',
        (['out', 'retval'], POINTER(VARIANT), 'pAttrObjs')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies if the block has any attributes in it'), 'nonbrowsable', 'propget'],
        HRESULT,
        'HasAttributes',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bHas')
    ),
    COMMETHOD(
        [dispid(512), helpstring('Specifies the original block name'), 'propget'],
        HRESULT,
        'EffectiveName',
        (['out', 'retval'], POINTER(BSTR), 'EffectiveName')
    ),
    COMMETHOD(
        [dispid(513), helpstring('Specifies if this is a dynamic block'), 'nonbrowsable', 'propget'],
        HRESULT,
        'IsDynamicBlock',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pDynamicBlock')
    ),
    COMMETHOD(
        [dispid(514), helpstring('Gets the dynamic block properties')],
        HRESULT,
        'GetDynamicBlockProperties',
        (['out', 'retval'], POINTER(VARIANT), 'dynamicPropertyArray')
    ),
    COMMETHOD(
        [dispid(515), helpstring('Resets the dynamic block to the default state')],
        HRESULT,
        'ResetBlock',
    ),
    COMMETHOD(
        [dispid(516), helpstring('Converts a dynamic block to a regular anonymous block')],
        HRESULT,
        'ConvertToAnonymousBlock',
    ),
    COMMETHOD(
        [dispid(517), helpstring('Converts a dynamic block to a regular named block')],
        HRESULT,
        'ConvertToStaticBlock',
        (['in'], BSTR, 'newBlockName')
    ),
    COMMETHOD(
        [dispid(518), helpstring('Specifies the effective XScale factor of the block'), 'propget'],
        HRESULT,
        'XEffectiveScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(518), helpstring('Specifies the effective XScale factor of the block'), 'propput'],
        HRESULT,
        'XEffectiveScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(519), helpstring('Specifies the effective Yscale factor of the block'), 'propget'],
        HRESULT,
        'YEffectiveScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(519), helpstring('Specifies the effective Yscale factor of the block'), 'propput'],
        HRESULT,
        'YEffectiveScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(520), helpstring('Specifies the effective ZScale factor of the block'), 'propget'],
        HRESULT,
        'ZEffectiveScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(520), helpstring('Specifies the effective ZScale factor of the block'), 'propput'],
        HRESULT,
        'ZEffectiveScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(521), helpstring('Specifies insunits saved with the block'), 'propget'],
        HRESULT,
        'InsUnits',
        (['out', 'retval'], POINTER(BSTR), 'Units')
    ),
    COMMETHOD(
        [dispid(528), helpstring('Specifies the conversion factor between block units and drawing units'), 'propget'],
        HRESULT,
        'InsUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
]

################################################################
# code template for IAcadBlockReference implementation
# class IAcadBlockReference_Impl(object):
#     def _get(self):
#         'Specify the X, Y, Z coordinate for insertion point of the block or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specify the X, Y, Z coordinate for insertion point of the block or use the Pick Point button to set X, Y, Z values simultaneously'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the block'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the block'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the block'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the block'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the XScale factor of the block'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the XScale factor of the block'
#     XScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the Yscale factor of the block'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the Yscale factor of the block'
#     YScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the ZScale factor of the block'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the ZScale factor of the block'
#     ZScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def Explode(self):
#         'Explodes the block and returns the sub-entities as an array of Object'
#         #return pArrayObjs
#
#     def GetAttributes(self):
#         'Gets Attributes in the block'
#         #return pAttrObjs
#
#     def GetConstantAttributes(self):
#         'Gets constant attributes in the block'
#         #return pAttrObjs
#
#     @property
#     def HasAttributes(self):
#         'Specifies if the block has any attributes in it'
#         #return bHas
#
#     @property
#     def EffectiveName(self):
#         'Specifies the original block name'
#         #return EffectiveName
#
#     @property
#     def IsDynamicBlock(self):
#         'Specifies if this is a dynamic block'
#         #return pDynamicBlock
#
#     def GetDynamicBlockProperties(self):
#         'Gets the dynamic block properties'
#         #return dynamicPropertyArray
#
#     def ResetBlock(self):
#         'Resets the dynamic block to the default state'
#         #return 
#
#     def ConvertToAnonymousBlock(self):
#         'Converts a dynamic block to a regular anonymous block'
#         #return 
#
#     def ConvertToStaticBlock(self, newBlockName):
#         'Converts a dynamic block to a regular named block'
#         #return 
#
#     def _get(self):
#         'Specifies the effective XScale factor of the block'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the effective XScale factor of the block'
#     XEffectiveScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the effective Yscale factor of the block'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the effective Yscale factor of the block'
#     YEffectiveScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the effective ZScale factor of the block'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the effective ZScale factor of the block'
#     ZEffectiveScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def InsUnits(self):
#         'Specifies insunits saved with the block'
#         #return Units
#
#     @property
#     def InsUnitsFactor(self):
#         'Specifies the conversion factor between block units and drawing units'
#         #return factor
#

IAcadExternalReference._methods_ = [
    COMMETHOD(
        [dispid(256), helpstring('Specifies the path of the external reference'), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(256), helpstring('Specifies the path of the external reference'), 'propput'],
        HRESULT,
        'Path',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(368), helpstring('Specifies whether the object has layer property overrides.'), 'propget'],
        HRESULT,
        'LayerPropertyOverrides',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bOverrides')
    ),
]

################################################################
# code template for IAcadExternalReference implementation
# class IAcadExternalReference_Impl(object):
#     def _get(self):
#         'Specifies the path of the external reference'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the path of the external reference'
#     Path = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LayerPropertyOverrides(self):
#         'Specifies whether the object has layer property overrides.'
#         #return bOverrides
#


class IAcadSubEntSolidVertex(IAcadSubEntity):
    """AutoCAD Interface for a vertex on an AcDb3dSolid"""
    _case_insensitive_ = True
    _iid_ = GUID('{F5E8E5E6-FC93-422C-90B8-FADDFFAA05F6}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSubEntSolidVertex._methods_ = [
]

################################################################
# code template for IAcadSubEntSolidVertex implementation
# class IAcadSubEntSolidVertex_Impl(object):


class AcadSubEntSolidEdge(CoClass):
    """AcadSubEntSolidEdge Class"""
    _reg_clsid_ = GUID('{F89008FD-424A-41C5-AB1B-36B09DEF1143}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubEntSolidEdge._com_interfaces_ = [IAcadSubEntSolidEdge]


class IAcadSubEntSolidNode(IAcadSubEntity):
    """AutoCAD Interface for an historical node on an AcDb3dSolid"""
    _case_insensitive_ = True
    _iid_ = GUID('{09BE77A2-8D4A-4572-ADAB-668A7FE7C78B}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSubEntSolidNode._methods_ = [
]

################################################################
# code template for IAcadSubEntSolidNode implementation
# class IAcadSubEntSolidNode_Impl(object):


class IAcadDocuments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """The collection of all AutoCAD drawings open in the current session"""
    _case_insensitive_ = True
    _iid_ = GUID('{E725B837-BAD5-451E-97D4-6417B5B70EC7}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDocument(IAcadDatabase):
    """An AutoCAD drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{C5F0E321-B751-49D5-BAAC-DDC2FA67C6D8}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadApplication(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """An instance of the AutoCAD application"""
    _case_insensitive_ = True
    _iid_ = GUID('{52EE1CD2-A793-4DEC-9DF9-71CE75881F05}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadDocuments._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadDocument)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pEnumVariant')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in', 'optional'], VARIANT, 'TemplateName'),
        (['out', 'retval'], POINTER(POINTER(IAcadDocument)), 'pDispDoc')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Opens an existing drawing file (DWG) and makes it the active document')],
        HRESULT,
        'Open',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'ReadOnly'),
        (['in', 'optional'], VARIANT, 'Password'),
        (['out', 'retval'], POINTER(POINTER(IAcadDocument)), 'pDispDoc')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Closes the specified drawing, or all open drawings')],
        HRESULT,
        'Close',
    ),
]

################################################################
# code template for IAcadDocuments implementation
# class IAcadDocuments_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pEnumVariant
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return Count
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def Add(self, TemplateName):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pDispDoc
#
#     def Open(self, Name, ReadOnly, Password):
#         'Opens an existing drawing file (DWG) and makes it the active document'
#         #return pDispDoc
#
#     def Close(self):
#         'Closes the specified drawing, or all open drawings'
#         #return 
#


class AcadSubEntSolidVertex(CoClass):
    """AcadSubEntSolidVertex Class"""
    _reg_clsid_ = GUID('{DD5E8531-612A-4FAC-9708-16A2B46A3C13}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubEntSolidVertex._com_interfaces_ = [IAcadSubEntSolidVertex]


class IAcadRasterImage(IAcadEntity):
    """AutoCAD Raster Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{02F7BB04-BE9B-49BC-BD9E-ABBD208F40ED}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadWipeout(IAcadRasterImage):
    """AutoCAD Interface for an Wipeout Raster Image"""
    _case_insensitive_ = True
    _iid_ = GUID('{ACCE7075-6B20-4289-A2BB-E6061FB57AC2}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadRasterImage._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current brightness value of the raster image'), 'propget'],
        HRESULT,
        'Brightness',
        (['out', 'retval'], POINTER(c_int), 'Brightness')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current brightness value of the raster image'), 'propput'],
        HRESULT,
        'Brightness',
        (['in'], c_int, 'Brightness')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the current contrast value of the raster image'), 'propget'],
        HRESULT,
        'Contrast',
        (['out', 'retval'], POINTER(c_int), 'Contrast')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the current contrast value of the raster image'), 'propput'],
        HRESULT,
        'Contrast',
        (['in'], c_int, 'Contrast')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the current fade value of the raster image'), 'propget'],
        HRESULT,
        'Fade',
        (['out', 'retval'], POINTER(c_int), 'Fade')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the current fade value of the raster image'), 'propput'],
        HRESULT,
        'Fade',
        (['in'], c_int, 'Fade')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the origin coordinates (lower left corner) of the raster image'), 'propget'],
        HRESULT,
        'Origin',
        (['out', 'retval'], POINTER(VARIANT), 'Origin')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the origin coordinates (lower left corner) of the raster image'), 'propput'],
        HRESULT,
        'Origin',
        (['in'], VARIANT, 'Origin')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the rotation angle of the raster image'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the rotation angle of the raster image'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the width of the raster image'), 'propget'],
        HRESULT,
        'ImageWidth',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the width of the raster image'), 'propput'],
        HRESULT,
        'ImageWidth',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the height of the raster image'), 'propget'],
        HRESULT,
        'ImageHeight',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the height of the raster image'), 'propput'],
        HRESULT,
        'ImageHeight',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the name of the image file'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the name of the image file'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the path to the image file'), 'propput'],
        HRESULT,
        'ImageFile',
        (['in'], BSTR, 'imageFileName')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the path to the image file'), 'propget'],
        HRESULT,
        'ImageFile',
        (['out', 'retval'], POINTER(BSTR), 'imageFileName')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Determines whether image is visible or not'), 'propget'],
        HRESULT,
        'ImageVisibility',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fVisible')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Determines whether image is visible or not'), 'propput'],
        HRESULT,
        'ImageVisibility',
        (['in'], VARIANT_BOOL, 'fVisible')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Enables or disables the clipping boundary of the image'), 'propget'],
        HRESULT,
        'ClippingEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'kClip')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Enables or disables the clipping boundary of the image'), 'propput'],
        HRESULT,
        'ClippingEnabled',
        (['in'], VARIANT_BOOL, 'kClip')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Determines whether transparency for a bitonal image is On or Off'), 'propget'],
        HRESULT,
        'transparency',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bTransp')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Determines whether transparency for a bitonal image is On or Off'), 'propput'],
        HRESULT,
        'transparency',
        (['in'], VARIANT_BOOL, 'bTransp')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Set clipping boundary')],
        HRESULT,
        'ClipBoundary',
        (['in'], VARIANT, 'boundry')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pixelHeight')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pixelWidth')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Determines if a raster image is displayed at its rotation value'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ShowRotation',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bShow')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Determines if a raster image is displayed at its rotation value'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ShowRotation',
        (['in'], VARIANT_BOOL, 'bShow')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the scale factor of the raster image'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the scale factor of the raster image'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
]

################################################################
# code template for IAcadRasterImage implementation
# class IAcadRasterImage_Impl(object):
#     def _get(self):
#         'Specifies the current brightness value of the raster image'
#         #return Brightness
#     def _set(self, Brightness):
#         'Specifies the current brightness value of the raster image'
#     Brightness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current contrast value of the raster image'
#         #return Contrast
#     def _set(self, Contrast):
#         'Specifies the current contrast value of the raster image'
#     Contrast = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current fade value of the raster image'
#         #return Fade
#     def _set(self, Fade):
#         'Specifies the current fade value of the raster image'
#     Fade = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin coordinates (lower left corner) of the raster image'
#         #return Origin
#     def _set(self, Origin):
#         'Specifies the origin coordinates (lower left corner) of the raster image'
#     Origin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the raster image'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the raster image'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the raster image'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the raster image'
#     ImageWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the raster image'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the raster image'
#     ImageHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the image file'
#         #return Name
#     def _set(self, Name):
#         'Specifies the name of the image file'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the path to the image file'
#         #return imageFileName
#     def _set(self, imageFileName):
#         'Specifies the path to the image file'
#     ImageFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether image is visible or not'
#         #return fVisible
#     def _set(self, fVisible):
#         'Determines whether image is visible or not'
#     ImageVisibility = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Enables or disables the clipping boundary of the image'
#         #return kClip
#     def _set(self, kClip):
#         'Enables or disables the clipping boundary of the image'
#     ClippingEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether transparency for a bitonal image is On or Off'
#         #return bTransp
#     def _set(self, bTransp):
#         'Determines whether transparency for a bitonal image is On or Off'
#     transparency = property(_get, _set, doc = _set.__doc__)
#
#     def ClipBoundary(self, boundry):
#         'Set clipping boundary'
#         #return 
#
#     @property
#     def Height(self):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#         #return pixelHeight
#
#     @property
#     def Width(self):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#         #return pixelWidth
#
#     def _get(self):
#         'Determines if a raster image is displayed at its rotation value'
#         #return bShow
#     def _set(self, bShow):
#         'Determines if a raster image is displayed at its rotation value'
#     ShowRotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the scale factor of the raster image'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the scale factor of the raster image'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#

IAcadWipeout._methods_ = [
]

################################################################
# code template for IAcadWipeout implementation
# class IAcadWipeout_Impl(object):


class AcadIdPair(CoClass):
    """A special object for use with the CopyObjects method that contains the object IDs of both the source and destination objects"""
    _reg_clsid_ = GUID('{21A80FBF-5CE3-49F5-9AAB-54F879989DC8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadIdPair(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A special object for use with the CopyObjects method that contains the object IDs of both the source and destination objects"""
    _case_insensitive_ = True
    _iid_ = GUID('{0AAE4A11-8E81-4A97-A589-1017E1217D34}')
    _idlflags_ = ['dual', 'oleautomation']


AcadIdPair._com_interfaces_ = [IAcadIdPair]


class IAcadMLeaderStyle(IAcadObject):
    """AutoCAD MLeaderStyle Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{96F5A34E-07CA-4EF1-92F6-D19150A272AC}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcMLeaderContentType'
acNoneContent = 0
acBlockContent = 1
acMTextContent = 2
AcMLeaderContentType = c_int  # enum
# values for enumeration 'AcDrawMLeaderOrderType'
acDrawContentFirst = 0
acDrawLeaderFirst = 1
AcDrawMLeaderOrderType = c_int  # enum
# values for enumeration 'AcDrawLeaderOrderType'
acDrawLeaderHeadFirst = 0
acDrawLeaderTailFirst = 1
AcDrawLeaderOrderType = c_int  # enum
# values for enumeration 'AcSegmentAngleType'
acDegreesAny = 0
acDegrees15 = 1
acDegrees30 = 2
acDegrees45 = 3
acDegrees60 = 4
acDegrees90 = 6
acDegreesHorz = 12
AcSegmentAngleType = c_int  # enum
# values for enumeration 'AcMLeaderType'
acStraightLeader = 1
acSplineLeader = 2
acInVisibleLeader = 0
AcMLeaderType = c_int  # enum
# values for enumeration 'AcTextAttachmentDirection'
acAttachmentHorizontal = 0
acAttachmentVertical = 1
AcTextAttachmentDirection = c_int  # enum
# values for enumeration 'AcTextAttachmentType'
acAttachmentTopOfTop = 0
acAttachmentMiddleOfTop = 1
acAttachmentBottomOfTop = 2
acAttachmentBottomOfTopLine = 3
acAttachmentMiddle = 4
acAttachmentMiddleOfBottom = 5
acAttachmentBottomOfBottom = 6
acAttachmentBottomLine = 7
acAttachmentAllLine = 8
AcTextAttachmentType = c_int  # enum
# values for enumeration 'AcVerticalTextAttachmentType'
acAttachmentCenter = 0
acAttachmentLinedCenter = 1
AcVerticalTextAttachmentType = c_int  # enum
# values for enumeration 'AcBlockConnectionType'
acConnectExtents = 0
acConnectBase = 1
AcBlockConnectionType = c_int  # enum
# values for enumeration 'AcTextAngleType'
acInsertAngle = 0
acHorizontalAngle = 1
acAlwaysRightReadingAngle = 2
AcTextAngleType = c_int  # enum
# values for enumeration 'AcTextAlignmentType'
acLeftAlignment = 0
acCenterAlignment = 1
acRightAlignment = 2
AcTextAlignmentType = c_int  # enum

IAcadMLeaderStyle._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Returns the name for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Returns the name for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Returns the description for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Returns the description for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'Description')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Returns the operation bit set for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'BitFlags',
        (['out', 'retval'], POINTER(c_int), 'bitFlag')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Returns the operation bit set for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'BitFlags',
        (['in'], c_int, 'bitFlag')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns the content type for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'ContentType',
        (['out', 'retval'], POINTER(AcMLeaderContentType), 'Type')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns the content type for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'ContentType',
        (['in'], AcMLeaderContentType, 'Type')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Returns the order of multileader creation for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'DrawMLeaderOrderType',
        (['out', 'retval'], POINTER(AcDrawMLeaderOrderType), 'Type')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Returns the order of multileader creation for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'DrawMLeaderOrderType',
        (['in'], AcDrawMLeaderOrderType, 'Type')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the order of leader line creation when creating a multileader for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'DrawLeaderOrderType',
        (['out', 'retval'], POINTER(AcDrawLeaderOrderType), 'Type')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the order of leader line creation when creating a multileader for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'DrawLeaderOrderType',
        (['in'], AcDrawLeaderOrderType, 'Type')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Returns the max number of segment points in leader lines for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'MaxLeaderSegmentsPoints',
        (['out', 'retval'], POINTER(c_int), 'number')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Returns the max number of segment points in leader lines for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'MaxLeaderSegmentsPoints',
        (['in'], c_int, 'number')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns the first segment angle constraint when creating a multileader for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'FirstSegmentAngleConstraint',
        (['out', 'retval'], POINTER(AcSegmentAngleType), 'constraint')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns the first segment angle constraint when creating a multileader for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'FirstSegmentAngleConstraint',
        (['in'], AcSegmentAngleType, 'constraint')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Returns the second segment angle constraint when creating a multileader for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'SecondSegmentAngleConstraint',
        (['out', 'retval'], POINTER(AcSegmentAngleType), 'constraint')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Returns the second segment angle constraint when creating a multileader for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'SecondSegmentAngleConstraint',
        (['in'], AcSegmentAngleType, 'constraint')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Returns the leader line type for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'LeaderLinetype',
        (['out', 'retval'], POINTER(AcMLeaderType), 'Type')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Returns the leader line type for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'LeaderLinetype',
        (['in'], AcMLeaderType, 'Type')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Returns the color of leader lines for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'LeaderLineColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Returns the color of leader lines for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'LeaderLineColor',
        (['in'], POINTER(IAcadAcCmColor), 'color')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Returns the linetype of leader lines for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'LeaderLineTypeId',
        (['out', 'retval'], POINTER(ACAD_LTYPE), 'Type')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Returns the linetype of leader lines for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'LeaderLineTypeId',
        (['in'], ACAD_LTYPE, 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Returns the line weight of leader lines for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'LeaderLineWeight',
        (['out', 'retval'], POINTER(AcLineWeight), 'weight')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Returns the line weight of leader lines for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'LeaderLineWeight',
        (['in'], AcLineWeight, 'weight')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Indicate whether landing of leader line is enabled for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'EnableLanding',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Indicate whether landing of leader line is enabled for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'EnableLanding',
        (['in'], VARIANT_BOOL, 'enabled')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Returns the gap between MText and the tail of leader lines for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'LandingGap',
        (['out', 'retval'], POINTER(c_double), 'LandingGap')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Returns the gap between MText and the tail of leader lines for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'LandingGap',
        (['in'], c_double, 'LandingGap')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Indicate whether dog-leg leader lines are enabled for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'EnableDogleg',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Indicate whether dog-leg leader lines are enabled for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'EnableDogleg',
        (['in'], VARIANT_BOOL, 'enabled')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Returns the length of dog-leg leader line for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'DoglegLength',
        (['out', 'retval'], POINTER(c_double), 'DoglegLength')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Returns the length of dog-leg leader line for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'DoglegLength',
        (['in'], c_double, 'DoglegLength')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Returns the arrow symbol for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'ArrowSymbol',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Returns the arrow symbol for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'ArrowSymbol',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Returns the arrow size for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'ArrowSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Returns the arrow size for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'ArrowSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Returns the text style for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextStyle',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Returns the text style for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextStyle',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextAttachmentDirection',
        (['out', 'retval'], POINTER(AcTextAttachmentDirection), 'dir')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextAttachmentDirection',
        (['in'], AcTextAttachmentDirection, 'dir')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextLeftAttachmentType',
        (['out', 'retval'], POINTER(AcTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextLeftAttachmentType',
        (['in'], AcTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextRightAttachmentType',
        (['out', 'retval'], POINTER(AcTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextRightAttachmentType',
        (['in'], AcTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(42), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextTopAttachmentType',
        (['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(42), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextTopAttachmentType',
        (['in'], AcVerticalTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextBottomAttachmentType',
        (['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Returns the type of text attachment for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextBottomAttachmentType',
        (['in'], AcVerticalTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Returns the text color of MText for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Returns the text color of MText for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextColor',
        (['in'], POINTER(IAcadAcCmColor), 'color')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Returns the text height of MText for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextHeight',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Returns the text height of MText for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextHeight',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Indicate whether or not the text frame is displayed around the MText for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'EnableFrameText',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Indicate whether or not the text frame is displayed around the MText for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'EnableFrameText',
        (['in'], VARIANT_BOOL, 'enabled')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Returns the alignment space value for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'AlignSpace',
        (['out', 'retval'], POINTER(c_double), 'AlignSpace')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Returns the alignment space value for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'AlignSpace',
        (['in'], c_double, 'AlignSpace')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Returns the block content for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'Block',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Returns the block content for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'Block',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Returns the block color in block content for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'BlockColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Returns the block color in block content for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'BlockColor',
        (['in'], POINTER(IAcadAcCmColor), 'color')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Indicate whether the block scale value works for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'EnableBlockScale',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Indicate whether the block scale value works for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'EnableBlockScale',
        (['in'], VARIANT_BOOL, 'enabled')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Returns the scale of the block referenced by multileader for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'BlockScale',
        (['out', 'retval'], POINTER(c_double), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Returns the scale of the block referenced by multileader for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'BlockScale',
        (['in'], c_double, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Indicate whether the block rotation value works for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'EnableBlockRotation',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Indicate whether the block rotation value works for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'EnableBlockRotation',
        (['in'], VARIANT_BOOL, 'enabled')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Returns the rotation of the block referenced by multileader for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'BlockRotation',
        (['out', 'retval'], POINTER(c_double), 'Rotation')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Returns the rotation of the block referenced by multileader for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'BlockRotation',
        (['in'], c_double, 'Rotation')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Returns the block connection type for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'BlockConnectionType',
        (['out', 'retval'], POINTER(AcBlockConnectionType), 'Type')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Returns the block connection type for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'BlockConnectionType',
        (['in'], AcBlockConnectionType, 'Type')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Returns the scale of multileader created for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(c_double), 'scale')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Returns the scale of multileader created for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], c_double, 'scale')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Indicate whether properties were changed for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'OverwritePropChanged',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'changed')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Returns the annotative status for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'Annotative',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Annotative')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Returns the annotative status for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'Annotative',
        (['in'], VARIANT_BOOL, 'Annotative')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Returns the break size used for breaking leader lines for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'BreakSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Returns the break size used for breaking leader lines for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'BreakSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Returns the text string of the Mtext for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'Text')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Returns the text string of the Mtext for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Returns the angle type of text with respect to the last leader line segment for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextAngleType',
        (['out', 'retval'], POINTER(AcTextAngleType), 'Type')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Returns the angle type of text with respect to the last leader line segment for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextAngleType',
        (['in'], AcTextAngleType, 'Type')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Returns the text alignment type for the specified mleaderstyle.'), 'propget'],
        HRESULT,
        'TextAlignmentType',
        (['out', 'retval'], POINTER(AcTextAlignmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Returns the text alignment type for the specified mleaderstyle.'), 'propput'],
        HRESULT,
        'TextAlignmentType',
        (['in'], AcTextAlignmentType, 'Type')
    ),
]

################################################################
# code template for IAcadMLeaderStyle implementation
# class IAcadMLeaderStyle_Impl(object):
#     def _get(self):
#         'Returns the name for the specified mleaderstyle.'
#         #return Name
#     def _set(self, Name):
#         'Returns the name for the specified mleaderstyle.'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the description for the specified mleaderstyle.'
#         #return Description
#     def _set(self, Description):
#         'Returns the description for the specified mleaderstyle.'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the operation bit set for the specified mleaderstyle.'
#         #return bitFlag
#     def _set(self, bitFlag):
#         'Returns the operation bit set for the specified mleaderstyle.'
#     BitFlags = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the content type for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the content type for the specified mleaderstyle.'
#     ContentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the order of multileader creation for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the order of multileader creation for the specified mleaderstyle.'
#     DrawMLeaderOrderType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the order of leader line creation when creating a multileader for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the order of leader line creation when creating a multileader for the specified mleaderstyle.'
#     DrawLeaderOrderType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the max number of segment points in leader lines for the specified mleaderstyle.'
#         #return number
#     def _set(self, number):
#         'Returns the max number of segment points in leader lines for the specified mleaderstyle.'
#     MaxLeaderSegmentsPoints = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the first segment angle constraint when creating a multileader for the specified mleaderstyle.'
#         #return constraint
#     def _set(self, constraint):
#         'Returns the first segment angle constraint when creating a multileader for the specified mleaderstyle.'
#     FirstSegmentAngleConstraint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the second segment angle constraint when creating a multileader for the specified mleaderstyle.'
#         #return constraint
#     def _set(self, constraint):
#         'Returns the second segment angle constraint when creating a multileader for the specified mleaderstyle.'
#     SecondSegmentAngleConstraint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the leader line type for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the leader line type for the specified mleaderstyle.'
#     LeaderLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the color of leader lines for the specified mleaderstyle.'
#         #return color
#     def _set(self, color):
#         'Returns the color of leader lines for the specified mleaderstyle.'
#     LeaderLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the linetype of leader lines for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the linetype of leader lines for the specified mleaderstyle.'
#     LeaderLineTypeId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the line weight of leader lines for the specified mleaderstyle.'
#         #return weight
#     def _set(self, weight):
#         'Returns the line weight of leader lines for the specified mleaderstyle.'
#     LeaderLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Indicate whether landing of leader line is enabled for the specified mleaderstyle.'
#         #return enabled
#     def _set(self, enabled):
#         'Indicate whether landing of leader line is enabled for the specified mleaderstyle.'
#     EnableLanding = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the gap between MText and the tail of leader lines for the specified mleaderstyle.'
#         #return LandingGap
#     def _set(self, LandingGap):
#         'Returns the gap between MText and the tail of leader lines for the specified mleaderstyle.'
#     LandingGap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Indicate whether dog-leg leader lines are enabled for the specified mleaderstyle.'
#         #return enabled
#     def _set(self, enabled):
#         'Indicate whether dog-leg leader lines are enabled for the specified mleaderstyle.'
#     EnableDogleg = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the length of dog-leg leader line for the specified mleaderstyle.'
#         #return DoglegLength
#     def _set(self, DoglegLength):
#         'Returns the length of dog-leg leader line for the specified mleaderstyle.'
#     DoglegLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the arrow symbol for the specified mleaderstyle.'
#         #return Name
#     def _set(self, Name):
#         'Returns the arrow symbol for the specified mleaderstyle.'
#     ArrowSymbol = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the arrow size for the specified mleaderstyle.'
#         #return size
#     def _set(self, size):
#         'Returns the arrow size for the specified mleaderstyle.'
#     ArrowSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the text style for the specified mleaderstyle.'
#         #return Name
#     def _set(self, Name):
#         'Returns the text style for the specified mleaderstyle.'
#     TextStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#         #return dir
#     def _set(self, dir):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#     TextAttachmentDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#     TextLeftAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#     TextRightAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#     TextTopAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the type of text attachment for the specified mleaderstyle.'
#     TextBottomAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the text color of MText for the specified mleaderstyle.'
#         #return color
#     def _set(self, color):
#         'Returns the text color of MText for the specified mleaderstyle.'
#     TextColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the text height of MText for the specified mleaderstyle.'
#         #return Height
#     def _set(self, Height):
#         'Returns the text height of MText for the specified mleaderstyle.'
#     TextHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Indicate whether or not the text frame is displayed around the MText for the specified mleaderstyle.'
#         #return enabled
#     def _set(self, enabled):
#         'Indicate whether or not the text frame is displayed around the MText for the specified mleaderstyle.'
#     EnableFrameText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the alignment space value for the specified mleaderstyle.'
#         #return AlignSpace
#     def _set(self, AlignSpace):
#         'Returns the alignment space value for the specified mleaderstyle.'
#     AlignSpace = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the block content for the specified mleaderstyle.'
#         #return Name
#     def _set(self, Name):
#         'Returns the block content for the specified mleaderstyle.'
#     Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the block color in block content for the specified mleaderstyle.'
#         #return color
#     def _set(self, color):
#         'Returns the block color in block content for the specified mleaderstyle.'
#     BlockColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Indicate whether the block scale value works for the specified mleaderstyle.'
#         #return enabled
#     def _set(self, enabled):
#         'Indicate whether the block scale value works for the specified mleaderstyle.'
#     EnableBlockScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the scale of the block referenced by multileader for the specified mleaderstyle.'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Returns the scale of the block referenced by multileader for the specified mleaderstyle.'
#     BlockScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Indicate whether the block rotation value works for the specified mleaderstyle.'
#         #return enabled
#     def _set(self, enabled):
#         'Indicate whether the block rotation value works for the specified mleaderstyle.'
#     EnableBlockRotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the rotation of the block referenced by multileader for the specified mleaderstyle.'
#         #return Rotation
#     def _set(self, Rotation):
#         'Returns the rotation of the block referenced by multileader for the specified mleaderstyle.'
#     BlockRotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the block connection type for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the block connection type for the specified mleaderstyle.'
#     BlockConnectionType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the scale of multileader created for the specified mleaderstyle.'
#         #return scale
#     def _set(self, scale):
#         'Returns the scale of multileader created for the specified mleaderstyle.'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def OverwritePropChanged(self):
#         'Indicate whether properties were changed for the specified mleaderstyle.'
#         #return changed
#
#     def _get(self):
#         'Returns the annotative status for the specified mleaderstyle.'
#         #return Annotative
#     def _set(self, Annotative):
#         'Returns the annotative status for the specified mleaderstyle.'
#     Annotative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the break size used for breaking leader lines for the specified mleaderstyle.'
#         #return size
#     def _set(self, size):
#         'Returns the break size used for breaking leader lines for the specified mleaderstyle.'
#     BreakSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the text string of the Mtext for the specified mleaderstyle.'
#         #return Text
#     def _set(self, Text):
#         'Returns the text string of the Mtext for the specified mleaderstyle.'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the angle type of text with respect to the last leader line segment for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the angle type of text with respect to the last leader line segment for the specified mleaderstyle.'
#     TextAngleType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the text alignment type for the specified mleaderstyle.'
#         #return Type
#     def _set(self, Type):
#         'Returns the text alignment type for the specified mleaderstyle.'
#     TextAlignmentType = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcPatternType'
acHatchPatternTypeUserDefined = 0
acHatchPatternTypePreDefined = 1
acHatchPatternTypeCustomDefined = 2
AcPatternType = c_int  # enum


class AcadSubEntSolidNode(CoClass):
    """AcadSubEntSolidNode Class"""
    _reg_clsid_ = GUID('{8283F310-73EC-41EF-9C09-9E448ECF471D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubEntSolidNode._com_interfaces_ = [IAcadSubEntSolidNode]


class IAcadSubDMesh(IAcadEntity):
    """AutoCAD SubDMesh Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{BEBAFDBD-8551-4EC5-99C3-03F9670FF756}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSubDMesh._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the smoothing level for the mesh'), 'propget'],
        HRESULT,
        'Smoothness',
        (['out', 'retval'], POINTER(c_int), 'level')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the smoothing level for the mesh'), 'propput'],
        HRESULT,
        'Smoothness',
        (['in'], c_int, 'level')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the current vertex on the mesh'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'corners')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the current vertex on the mesh'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'corners')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns the coordinate of the vertex at a given index'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns the coordinate of the vertex at a given index'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the number of vertices for the unsmooth mesh'), 'propget'],
        HRESULT,
        'VertexCount',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the number of faces for the unsmooth mesh'), 'propget'],
        HRESULT,
        'FaceCount',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
]

################################################################
# code template for IAcadSubDMesh implementation
# class IAcadSubDMesh_Impl(object):
#     def _get(self):
#         'Specifies the smoothing level for the mesh'
#         #return level
#     def _set(self, level):
#         'Specifies the smoothing level for the mesh'
#     Smoothness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current vertex on the mesh'
#         #return corners
#     def _set(self, corners):
#         'Specifies the current vertex on the mesh'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, Index):
#         'Returns the coordinate of the vertex at a given index'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Returns the coordinate of the vertex at a given index'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def VertexCount(self):
#         'Specifies the number of vertices for the unsmooth mesh'
#         #return Count
#
#     @property
#     def FaceCount(self):
#         'Specifies the number of faces for the unsmooth mesh'
#         #return Count
#
# values for enumeration 'AcLoopType'
acHatchLoopTypeDefault = 0
acHatchLoopTypeExternal = 1
acHatchLoopTypePolyline = 2
acHatchLoopTypeDerived = 4
acHatchLoopTypeTextbox = 8
AcLoopType = c_int  # enum


class AcadWipeout(CoClass):
    """AcadWipeout Class"""
    _reg_clsid_ = GUID('{E8B0B8B1-FC46-4358-8DDE-217554361CB0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadWipeout._com_interfaces_ = [IAcadWipeout]


class IAcadSubDMeshFace(IAcadSubEntity):
    """AutoCAD SubDMesh Face Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{FCA86C51-0DFC-43D9-9C67-B814833C65F6}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcMeshCreaseType'
acNoneCrease = 0
acAlwaysCrease = 1
acCreaseByLevel = 2
AcMeshCreaseType = c_int  # enum

IAcadSubDMeshFace._methods_ = [
    COMMETHOD(
        [dispid(1399), helpstring('Specifies the material style of the selected object'), 'propget'],
        HRESULT,
        'Material',
        (['out', 'retval'], POINTER(BSTR), 'Material')
    ),
    COMMETHOD(
        [dispid(1399), helpstring('Specifies the material style of the selected object'), 'propput'],
        HRESULT,
        'Material',
        (['in'], BSTR, 'Material')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies if a crease is applied'), 'propget'],
        HRESULT,
        'CreaseType',
        (['out', 'retval'], POINTER(AcMeshCreaseType), 'Type')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies if a crease is applied'), 'propput'],
        HRESULT,
        'CreaseType',
        (['in'], AcMeshCreaseType, 'Type')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies crease level at which the crease starts losing its effect'), 'propget'],
        HRESULT,
        'CreaseLevel',
        (['out', 'retval'], POINTER(c_double), 'level')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies crease level at which the crease starts losing its effect'), 'propput'],
        HRESULT,
        'CreaseLevel',
        (['in'], c_double, 'level')
    ),
]

################################################################
# code template for IAcadSubDMeshFace implementation
# class IAcadSubDMeshFace_Impl(object):
#     def _get(self):
#         'Specifies the material style of the selected object'
#         #return Material
#     def _set(self, Material):
#         'Specifies the material style of the selected object'
#     Material = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if a crease is applied'
#         #return Type
#     def _set(self, Type):
#         'Specifies if a crease is applied'
#     CreaseType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies crease level at which the crease starts losing its effect'
#         #return level
#     def _set(self, level):
#         'Specifies crease level at which the crease starts losing its effect'
#     CreaseLevel = property(_get, _set, doc = _set.__doc__)
#


class IAcadTable(IAcadEntity):
    """IAcadTable Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{C3F0E344-DAB6-47A3-B764-D6EFF61D8B5C}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcCellType'
acUnknownCell = 0
acTextCell = 1
acBlockCell = 2
AcCellType = c_int  # enum
# values for enumeration 'AcRotationAngle'
acDegreesUnknown = -1
acDegrees000 = 0
acDegrees090 = 1
acDegrees180 = 2
acDegrees270 = 3
AcRotationAngle = c_int  # enum
# values for enumeration 'AcCellEdgeMask'
acTopMask = 1
acRightMask = 2
acBottomMask = 4
acLeftMask = 8
AcCellEdgeMask = c_int  # enum
# values for enumeration 'AcSelectType'
acTableSelectWindow = 1
acTableSelectCrossing = 2
AcSelectType = c_int  # enum
# values for enumeration 'AcFormatOption'
kFormatOptionNone = 0
acForEditing = 1
acForExpression = 2
acUseMaximumPrecision = 4
acIgnoreMtextFormat = 8
AcFormatOption = c_int  # enum
# values for enumeration 'AcParseOption'
acParseOptionNone = 0
acSetDefaultFormat = 1
acPreserveMtextFormat = 2
AcParseOption = c_int  # enum
# values for enumeration 'AcCellOption'
kCellOptionNone = 0
kInheritCellFormat = 1
AcCellOption = c_int  # enum
# values for enumeration 'AcCellContentType'
acCellContentTypeUnknown = 0
acCellContentTypeValue = 1
acCellContentTypeField = 2
acCellContentTypeBlock = 4
AcCellContentType = c_int  # enum
# values for enumeration 'AcCellMargin'
acCellMarginTop = 1
acCellMarginLeft = 2
acCellMarginBottom = 4
acCellMarginRight = 8
acCellMarginHorzSpacing = 16
acCellMarginVertSpacing = 32
AcCellMargin = c_int  # enum
# values for enumeration 'AcCellContentLayout'
acCellContentLayoutFlow = 1
acCellContentLayoutStackedHorizontal = 2
acCellContentLayoutStackedVertical = 4
AcCellContentLayout = c_int  # enum
# values for enumeration 'AcCellProperty'
acInvalidCellProperty = 0
acLock = 1
acDataType = 2
acDataFormat = 4
acRotation = 8
acScale = 16
acAlignmentProperty = 32
acContentColor = 64
acBackgroundColor = 128
acTextStyle = 256
acTextHeight = 512
acMarginLeft = 1024
acMarginTop = 2048
acMarginRight = 4096
acMarginBottom = 8192
acEnableBackgroundColor = 16384
acAutoScale = 32768
acMergeAll = 65536
acFlowDirBtoT = 131072
acContentLayout = 262144
acDataTypeAndFormat = 6
acContentProperties = 33662
acBitProperties = 245760
acAllCellProperties = 524287
AcCellProperty = c_int  # enum
# values for enumeration 'AcGridLineStyle'
acGridLineStyleSingle = 1
acGridLineStyleDouble = 2
AcGridLineStyle = c_int  # enum
# values for enumeration 'AcCellState'
acCellStateNone = 0
acCellStateContentLocked = 1
acCellStateContentReadOnly = 2
acCellStateFormatLocked = 4
acCellStateFormatReadOnly = 8
acCellStateLinked = 16
acCellStateContentModified = 32
acCellStateFormatModified = 64
AcCellState = c_int  # enum
# values for enumeration 'AcTableFlowDirection'
acTableFlowRight = 1
acTableFlowDownOrUp = 2
acTableFlowLeft = 4
AcTableFlowDirection = c_int  # enum

IAcadTable._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the style name of the Table'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the style name of the Table'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the rows in the Table'), 'propget'],
        HRESULT,
        'Rows',
        (['out', 'retval'], POINTER(c_int), 'pRows')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the rows in the Table'), 'propput'],
        HRESULT,
        'Rows',
        (['in'], c_int, 'pRows')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the columns in the Table'), 'propget'],
        HRESULT,
        'Columns',
        (['out', 'retval'], POINTER(c_int), 'pColumns')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the columns in the Table'), 'propput'],
        HRESULT,
        'Columns',
        (['in'], c_int, 'pColumns')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the Table flow direction'), 'propget'],
        HRESULT,
        'FlowDirection',
        (['out', 'retval'], POINTER(AcTableDirection), 'pFlow')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the Table flow direction'), 'propput'],
        HRESULT,
        'FlowDirection',
        (['in'], AcTableDirection, 'pFlow')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the Table width'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pWidth')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the Table width'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'pWidth')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the Table height'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the Table height'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'pHeight')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the vertical distance between text and edge of cell'), 'propget'],
        HRESULT,
        'VertCellMargin',
        (['out', 'retval'], POINTER(c_double), 'pGap')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the vertical distance between text and edge of cell'), 'propput'],
        HRESULT,
        'VertCellMargin',
        (['in'], c_double, 'pGap')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the horizontal distance between text and edge of cell'), 'propget'],
        HRESULT,
        'HorzCellMargin',
        (['out', 'retval'], POINTER(c_double), 'pGap')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the horizontal distance between text and edge of cell'), 'propput'],
        HRESULT,
        'HorzCellMargin',
        (['in'], c_double, 'pGap')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the insertion point of the table'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the insertion point of the table'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Returns the column width for the specified column.')],
        HRESULT,
        'GetColumnWidth',
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(c_double), 'pWidth')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Sets the column width for the specified column.')],
        HRESULT,
        'SetColumnWidth',
        (['in'], c_int, 'col'),
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Sets the uniform column width for all the columns in the table.'), 'propput'],
        HRESULT,
        'ColumnWidth',
        (['in'], c_double, 'rhs')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Returns the row height for the specified row.')],
        HRESULT,
        'GetRowHeight',
        (['in'], c_int, 'row'),
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Sets the row height for the specified row.')],
        HRESULT,
        'SetRowHeight',
        (['in'], c_int, 'row'),
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Sets the uniform row height for all the rows in the table.'), 'propput'],
        HRESULT,
        'RowHeight',
        (['in'], c_double, 'rhs')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Gets the minimum column width for the specified column.')],
        HRESULT,
        'GetMinimumColumnWidth',
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(c_double), 'pWidth')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the minimum row height for the specified row.')],
        HRESULT,
        'GetMinimumRowHeight',
        (['in'], c_int, 'row'),
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Gets the minimum width for the table.'), 'propget'],
        HRESULT,
        'MinimumTableWidth',
        (['out', 'retval'], POINTER(c_double), 'pWidth')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Gets the minimum height for the table.'), 'propget'],
        HRESULT,
        'MinimumTableHeight',
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Specifies the direction vector of the table'), 'propget'],
        HRESULT,
        'Direction',
        (['out', 'retval'], POINTER(VARIANT), 'DirectionVector')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Specifies the direction vector of the table'), 'propput'],
        HRESULT,
        'Direction',
        (['in'], VARIANT, 'DirectionVector')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Returns and sets the title suppressed flag value.'), 'propget'],
        HRESULT,
        'TitleSuppressed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Returns and sets the title suppressed flag value.'), 'propput'],
        HRESULT,
        'TitleSuppressed',
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Returns and sets the header suppressed flag value.'), 'propget'],
        HRESULT,
        'HeaderSuppressed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Returns and sets the header suppressed flag value.'), 'propput'],
        HRESULT,
        'HeaderSuppressed',
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Returns the cell alignment for the specified row type.')],
        HRESULT,
        'GetAlignment',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Sets the cell alignment for the specified row types.')],
        HRESULT,
        'SetAlignment',
        (['in'], c_int, 'rowTypes'),
        (['in'], AcCellAlignment, 'cellAlignment')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Returns the backgroundColorNone flag value for the specified row type.')],
        HRESULT,
        'GetBackgroundColorNone',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Sets the backgroundColorNone flag value for the specified row types.')],
        HRESULT,
        'SetBackgroundColorNone',
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Returns the background true color value for the specified row type.')],
        HRESULT,
        'GetBackgroundColor',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Sets the background true color value for the specified row types.')],
        HRESULT,
        'SetBackgroundColor',
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Returns the true color value for the specified row type.')],
        HRESULT,
        'GetContentColor',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Sets the true color value for the specified row types.')],
        HRESULT,
        'SetContentColor',
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Returns the text style name for the specified row type.')],
        HRESULT,
        'GetTextStyle',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(42), helpstring('Sets the text style name for the specified row types.')],
        HRESULT,
        'SetTextStyle',
        (['in'], c_int, 'rowTypes'),
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Returns the text height for the specified row type.')],
        HRESULT,
        'GetTextHeight',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(c_double), 'pTextHeight')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Sets the text height for the specified row types.')],
        HRESULT,
        'SetTextHeight',
        (['in'], c_int, 'rowTypes'),
        (['in'], c_double, 'TextHeight')
    ),
    COMMETHOD(
        [dispid(45), helpstring('Returns the gridLineWeight value for the specified gridLineType and row type.')],
        HRESULT,
        'GetGridLineWeight',
        (['in'], AcGridLineType, 'gridLineType'),
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(46), helpstring('Sets the gridLineWeight value for the specified gridLineType(s) and row type(s).')],
        HRESULT,
        'SetGridLineWeight',
        (['in'], c_int, 'gridLineTypes'),
        (['in'], c_int, 'rowTypes'),
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(47), helpstring('Returns the gridColor value for the specified gridLineType and row type.')],
        HRESULT,
        'GetGridColor',
        (['in'], AcGridLineType, 'gridLineType'),
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets the gridColor value for the specified gridLineType(s) and row type(s).')],
        HRESULT,
        'SetGridColor',
        (['in'], c_int, 'gridLineTypes'),
        (['in'], c_int, 'rowTypes'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Returns the gridVisibility value for the specified gridLineType and row type.')],
        HRESULT,
        'GetGridVisibility',
        (['in'], AcGridLineType, 'gridLineType'),
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets the gridVisibility value for the specified gridLineType(s) and row type(s).')],
        HRESULT,
        'SetGridVisibility',
        (['in'], c_int, 'gridLineTypes'),
        (['in'], c_int, 'rowTypes'),
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Returns the tableStyleOverrides.'), 'propget'],
        HRESULT,
        'TableStyleOverrides',
        (['out', 'retval'], POINTER(VARIANT), 'pIntArray')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Clears the tableStyleOverrides.')],
        HRESULT,
        'ClearTableStyleOverrides',
        (['in'], c_int, 'flag')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Gets the cell type for the specified row and column.')],
        HRESULT,
        'GetCellType',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(AcCellType), 'pCellType')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets the cell type for the specified row and column.')],
        HRESULT,
        'SetCellType',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], AcCellType, 'CellType')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Gets the cell extents for the specified row and column.')],
        HRESULT,
        'GetCellExtents',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], VARIANT_BOOL, 'bOuterCell'),
        (['out', 'retval'], POINTER(VARIANT), 'pPts')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Gets the attachment point for the specified row and column.')],
        HRESULT,
        'GetAttachmentPoint',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(VARIANT), 'pAttachmentPoint')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Returns the alignment for the specified row and column.')],
        HRESULT,
        'GetCellAlignment',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets the cell alignment for the specified row and column.')],
        HRESULT,
        'SetCellAlignment',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], AcCellAlignment, 'cellAlignment')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Returns the backgroundColorNone flag value for the specified row and column.')],
        HRESULT,
        'GetCellBackgroundColorNone',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Sets the backgroundColorNone flag value for the specified row and column.')],
        HRESULT,
        'SetCellBackgroundColorNone',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Returns the background true color value for the specified row and column.')],
        HRESULT,
        'GetCellBackgroundColor',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Sets the background true color value for the specified row and column.')],
        HRESULT,
        'SetCellBackgroundColor',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Returns the true color value for the specified row and column.')],
        HRESULT,
        'GetCellContentColor',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Sets the true color value for the specified row and column.')],
        HRESULT,
        'SetCellContentColor',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Returns the cellStyleOverrides.')],
        HRESULT,
        'GetCellStyleOverrides',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(VARIANT), 'pIntArray')
    ),
    COMMETHOD(
        [dispid(67), helpstring('Deletes the cell content for the specified row and coluumn.')],
        HRESULT,
        'DeleteCellContent',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Gets the row type for the specified row.')],
        HRESULT,
        'GetRowType',
        (['in'], c_int, 'row'),
        (['out', 'retval'], POINTER(AcRowType), 'pRowType')
    ),
    COMMETHOD(
        [dispid(69), helpstring('Returns the text value value for the specified row and column.')],
        HRESULT,
        'GetText',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(BSTR), 'pStr')
    ),
    COMMETHOD(
        [dispid(70), helpstring('Sets the text value value for the specified row and column.')],
        HRESULT,
        'SetText',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], BSTR, 'pStr')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Returns the text style name for the specified row and column.')],
        HRESULT,
        'GetCellTextStyle',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Sets the text style name for the specified row and column.')],
        HRESULT,
        'SetCellTextStyle',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(73), helpstring('Returns the text height for the specified row and column.')],
        HRESULT,
        'GetCellTextHeight',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(c_double), 'pTextHeight')
    ),
    COMMETHOD(
        [dispid(74), helpstring('Sets the text height for the specified row and column.')],
        HRESULT,
        'SetCellTextHeight',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], c_double, 'TextHeight')
    ),
    COMMETHOD(
        [dispid(75), helpstring('Returns the text rotation for the specified row and column.')],
        HRESULT,
        'GetTextRotation',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(AcRotationAngle), 'TextRotation')
    ),
    COMMETHOD(
        [dispid(76), helpstring('Sets the text rotation for the specified row and column.')],
        HRESULT,
        'SetTextRotation',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], AcRotationAngle, 'TextRotation')
    ),
    COMMETHOD(
        [dispid(77), helpstring('Returns the auto scale flag value for the specified row and column.')],
        HRESULT,
        'GetAutoScale',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(78), helpstring('Sets the auto scale flag value for the specified row and column.')],
        HRESULT,
        'SetAutoScale',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(79), helpstring('Returns the block table record id associated to the block-type cell.')],
        HRESULT,
        'GetBlockTableRecordId',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(LONG_PTR), 'blkId')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Sets the block table record id associated to the block-type cell.')],
        HRESULT,
        'SetBlockTableRecordId',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], LONG_PTR, 'blkId'),
        (['in'], VARIANT_BOOL, 'bAutoFit')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Returns the block scale value for the specified row and column.')],
        HRESULT,
        'GetBlockScale',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(c_double), 'blkScale')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Sets the block scale value for the specified row and column.')],
        HRESULT,
        'SetBlockScale',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], c_double, 'blkScale')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Returns the block rotation for the specified row and column.')],
        HRESULT,
        'GetBlockRotation',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(c_double), 'blkRotation')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Sets the block rotation for the specified row and column.')],
        HRESULT,
        'SetBlockRotation',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], c_double, 'blkRotation')
    ),
    COMMETHOD(
        [dispid(112), helpstring('Returns the attribute value from the Specified block cell for the attribute definition object contained in the block.')],
        HRESULT,
        'GetBlockAttributeValue',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], LONG_PTR, 'attdefId'),
        (['out', 'retval'], POINTER(BSTR), 'bstrValue')
    ),
    COMMETHOD(
        [dispid(113), helpstring('Sets the attribute value to the Specified block cell for the attribute definition object contained in the block.')],
        HRESULT,
        'SetBlockAttributeValue',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], LONG_PTR, 'attdefId'),
        (['in'], BSTR, 'bstrValue')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Returns the gridLineWeight value for the given edge of specified row and column.')],
        HRESULT,
        'GetCellGridLineWeight',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], AcCellEdgeMask, 'edge'),
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'plineweight')
    ),
    COMMETHOD(
        [dispid(86), helpstring('Sets the gridLineWeight value for the given edges of specified row and column.')],
        HRESULT,
        'SetCellGridLineWeight',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], c_int, 'edges'),
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Returns the gridColor value for the given edge of specified row and column.')],
        HRESULT,
        'GetCellGridColor',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], AcCellEdgeMask, 'edge'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Sets the gridColor value for the given edges of specified row and column.')],
        HRESULT,
        'SetCellGridColor',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], c_int, 'edges'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Returns the gridVisibility value for the given edge of specified row and column.')],
        HRESULT,
        'GetCellGridVisibility',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], AcCellEdgeMask, 'edge'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Sets the gridVisibility value for the given edges of specified row and column.')],
        HRESULT,
        'SetCellGridVisibility',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], c_int, 'edges'),
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(95), helpstring('Inserts the column(s) of specified width.')],
        HRESULT,
        'InsertColumns',
        (['in'], c_int, 'col'),
        (['in'], c_double, 'Width'),
        (['in'], c_int, 'cols')
    ),
    COMMETHOD(
        [dispid(96), helpstring('deletes the column(s) from the specified column index.')],
        HRESULT,
        'DeleteColumns',
        (['in'], c_int, 'col'),
        (['in'], c_int, 'cols')
    ),
    COMMETHOD(
        [dispid(97), helpstring('Inserts the row(s) of specified height.')],
        HRESULT,
        'InsertRows',
        (['in'], c_int, 'row'),
        (['in'], c_double, 'Height'),
        (['in'], c_int, 'Rows')
    ),
    COMMETHOD(
        [dispid(98), helpstring('deletes the row(s) from the specified row index.')],
        HRESULT,
        'DeleteRows',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'Rows')
    ),
    COMMETHOD(
        [dispid(99), helpstring('merge cells.')],
        HRESULT,
        'MergeCells',
        (['in'], c_int, 'minRow'),
        (['in'], c_int, 'maxRow'),
        (['in'], c_int, 'minCol'),
        (['in'], c_int, 'maxCol')
    ),
    COMMETHOD(
        [dispid(100), helpstring('Unmerge cells.')],
        HRESULT,
        'UnmergeCells',
        (['in'], c_int, 'minRow'),
        (['in'], c_int, 'maxRow'),
        (['in'], c_int, 'minCol'),
        (['in'], c_int, 'maxCol')
    ),
    COMMETHOD(
        [dispid(101), helpstring('is Merged Cell.')],
        HRESULT,
        'IsMergedCell',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out'], POINTER(c_int), 'minRow'),
        (['out'], POINTER(c_int), 'maxRow'),
        (['out'], POINTER(c_int), 'minCol'),
        (['out'], POINTER(c_int), 'maxCol'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pbValue')
    ),
    COMMETHOD(
        [dispid(114), helpstring('Returns the field object id associated to the specifed cell.')],
        HRESULT,
        'GetFieldId',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(LONG_PTR), 'fieldId')
    ),
    COMMETHOD(
        [dispid(115), helpstring('Sets the field object id in the specifed cell.')],
        HRESULT,
        'SetFieldId',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], LONG_PTR, 'fieldId')
    ),
    COMMETHOD(
        [dispid(102), helpstring('Generate layout.')],
        HRESULT,
        'GenerateLayout',
    ),
    COMMETHOD(
        [dispid(103), helpstring('Recompute TableBlock.')],
        HRESULT,
        'RecomputeTableBlock',
        (['in'], VARIANT_BOOL, 'bForceUpdate')
    ),
    COMMETHOD(
        [dispid(104), helpstring('Hit test.')],
        HRESULT,
        'HitTest',
        (['in'], VARIANT, 'wpt'),
        (['in'], VARIANT, 'wviewVec'),
        (['out'], POINTER(c_int), 'resultRowIndex'),
        (['out'], POINTER(c_int), 'resultColumnIndex'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bReturn')
    ),
    COMMETHOD(
        [dispid(105), helpstring('Select.')],
        HRESULT,
        'Select',
        (['in'], VARIANT, 'wpt'),
        (['in'], VARIANT, 'wvwVec'),
        (['in'], VARIANT, 'wvwxVec'),
        (['in'], c_double, 'wxaper'),
        (['in'], c_double, 'wyaper'),
        (['in'], VARIANT_BOOL, 'allowOutside'),
        (['out'], POINTER(c_int), 'resultRowIndex'),
        (['out'], POINTER(c_int), 'resultColumnIndex')
    ),
    COMMETHOD(
        [dispid(106), helpstring('Select SubRegion.')],
        HRESULT,
        'SelectSubRegion',
        (['in'], VARIANT, 'wpt1'),
        (['in'], VARIANT, 'wpt2'),
        (['in'], VARIANT, 'wvwVec'),
        (['in'], VARIANT, 'wvwxVec'),
        (['in'], AcSelectType, 'seltype'),
        (['in'], VARIANT_BOOL, 'bIncludeCurrentSelection'),
        (['out'], POINTER(c_int), 'rowMin'),
        (['out'], POINTER(c_int), 'rowMax'),
        (['out'], POINTER(c_int), 'colMin'),
        (['out'], POINTER(c_int), 'colMax')
    ),
    COMMETHOD(
        [dispid(107), helpstring('Re select SubRegion.')],
        HRESULT,
        'ReselectSubRegion',
    ),
    COMMETHOD(
        [dispid(108), helpstring('GetSubSelection.')],
        HRESULT,
        'GetSubSelection',
        (['out'], POINTER(c_int), 'rowMin'),
        (['out'], POINTER(c_int), 'rowMax'),
        (['out'], POINTER(c_int), 'colMin'),
        (['out'], POINTER(c_int), 'colMax')
    ),
    COMMETHOD(
        [dispid(109), helpstring('SetSubSelection.')],
        HRESULT,
        'SetSubSelection',
        (['in'], c_int, 'rowMin'),
        (['in'], c_int, 'rowMax'),
        (['in'], c_int, 'colMin'),
        (['in'], c_int, 'colMax')
    ),
    COMMETHOD(
        [dispid(110), helpstring('ClearSubSelection.')],
        HRESULT,
        'ClearSubSelection',
    ),
    COMMETHOD(
        [dispid(111), helpstring('HasSubSelection.'), 'propget'],
        HRESULT,
        'HasSubSelection',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pbValue')
    ),
    COMMETHOD(
        [dispid(116), helpstring('Enables or disables the regeneration of table block'), 'propget'],
        HRESULT,
        'RegenerateTableSuppressed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(116), helpstring('Enables or disables the regeneration of table block'), 'propput'],
        HRESULT,
        'RegenerateTableSuppressed',
        (['in'], VARIANT_BOOL, 'bValue')
    ),
    COMMETHOD(
        [dispid(117), helpstring('Gets the row data type and unit type for the specified row type.')],
        HRESULT,
        'GetDataType',
        (['in'], AcRowType, 'rowType'),
        (['out'], POINTER(AcValueDataType), 'pDataType'),
        (['out'], POINTER(AcValueUnitType), 'pUnitType')
    ),
    COMMETHOD(
        [dispid(118), helpstring('Sets the row data type and unit type for the specified row type.')],
        HRESULT,
        'SetDataType',
        (['in'], c_int, 'rowTypes'),
        (['in'], AcValueDataType, 'dataType'),
        (['in'], AcValueUnitType, 'unitType')
    ),
    COMMETHOD(
        [dispid(119), helpstring('Gets the format for the specified row type.')],
        HRESULT,
        'GetFormat',
        (['in'], AcRowType, 'rowType'),
        (['out', 'retval'], POINTER(BSTR), 'pFormat')
    ),
    COMMETHOD(
        [dispid(120), helpstring('Sets the format for the specified row type.')],
        HRESULT,
        'SetFormat',
        (['in'], c_int, 'rowTypes'),
        ([], BSTR, 'pFormat')
    ),
    COMMETHOD(
        [dispid(121), helpstring('Gets the formatted text string for the specified row and column.')],
        HRESULT,
        'FormatValue',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        ([], AcFormatOption, 'nOption'),
        ([], POINTER(BSTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(1946), helpstring('Gets the cell data type and unit type for the specified row and column.')],
        HRESULT,
        'GetCellDataType',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out'], POINTER(AcValueDataType), 'pDataType'),
        (['out'], POINTER(AcValueUnitType), 'pUnitType')
    ),
    COMMETHOD(
        [dispid(1947), helpstring('Sets the cell data type and unit type for the specified row and column.')],
        HRESULT,
        'SetCellDataType',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        ([], AcValueDataType, 'dataType'),
        ([], AcValueUnitType, 'unitType')
    ),
    COMMETHOD(
        [dispid(1948), helpstring('Gets the cell format for the specified row and column.')],
        HRESULT,
        'GetCellFormat',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(BSTR), 'pFormat')
    ),
    COMMETHOD(
        [dispid(1949), helpstring('Sets the cell format for the specified row and column.')],
        HRESULT,
        'SetCellFormat',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        ([], BSTR, 'pFormat')
    ),
    COMMETHOD(
        [dispid(1950), helpstring('Gets the cell value for the specified row and column.')],
        HRESULT,
        'GetCellValue',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(1951), helpstring('Sets the cell value for the specified row and column.')],
        HRESULT,
        'SetCellValue',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        ([], VARIANT, 'val')
    ),
    COMMETHOD(
        [dispid(2208), helpstring('Sets the cell value by parsing the text for the specified row and column.')],
        HRESULT,
        'SetCellValueFromText',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], BSTR, 'val'),
        (['in'], AcParseOption, 'nOption')
    ),
    COMMETHOD(
        [dispid(2209), helpstring('Resets the cell value for the specified row and column.')],
        HRESULT,
        'ResetCellValue',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col')
    ),
    COMMETHOD(
        [dispid(2210), helpstring('Checks if the content of the specified cell is empty.')],
        HRESULT,
        'IsEmpty',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(2213), helpstring('Creates new content in a cell')],
        HRESULT,
        'CreateContent',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nIndex'),
        (['out', 'retval'], POINTER(c_int), 'pInt')
    ),
    COMMETHOD(
        [dispid(2214), helpstring('Moves a content in a cell from one position to another position within the cell')],
        HRESULT,
        'MoveContent',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nFromIndex'),
        (['in'], c_int, 'nToIndex')
    ),
    COMMETHOD(
        [dispid(2215), helpstring('Deletes a content from a cell')],
        HRESULT,
        'DeleteContent',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol')
    ),
    COMMETHOD(
        [dispid(2217), helpstring('Gets the cell value for the specified row and column and nContent.')],
        HRESULT,
        'GetValue',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(VARIANT), 'pAcValue')
    ),
    COMMETHOD(
        [dispid(2224), helpstring('Sets the cell value by parsing the text for the specified row and column and nContent.')],
        HRESULT,
        'SetValue',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], VARIANT, 'acValue')
    ),
    COMMETHOD(
        [dispid(2225), helpstring('Sets the value of the content at the specified content index.')],
        HRESULT,
        'SetValueFromText',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], BSTR, 'szText'),
        (['in'], AcParseOption, 'nOption')
    ),
    COMMETHOD(
        [dispid(2227), helpstring('Gets the cell format for the specified row and column and nContent.')],
        HRESULT,
        'GetDataFormat',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(BSTR), 'pValue')
    ),
    COMMETHOD(
        [dispid(2228), helpstring('Sets the cell format for the specified row and column and nContent.')],
        HRESULT,
        'SetDataFormat',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], BSTR, 'szFormat')
    ),
    COMMETHOD(
        [dispid(2229), helpstring('Gets the text value value for the specified row and column  and nContent.')],
        HRESULT,
        'GetTextString',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(BSTR), 'pTextString')
    ),
    COMMETHOD(
        [dispid(2231), helpstring('Sets the text value value for the specified row and column.')],
        HRESULT,
        'SetTextString',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(2232), helpstring('Returns the field object id associated to the specifed cell  and nContent.')],
        HRESULT,
        'GetFieldId2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(LONG_PTR), 'pAcDbObjectId')
    ),
    COMMETHOD(
        [dispid(2233), helpstring('Sets  the field object id associated to the specifed cell  and nContent.')],
        HRESULT,
        'SetFieldId2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], LONG_PTR, 'acDbObjectId'),
        (['in'], AcCellOption, 'nflag')
    ),
    COMMETHOD(
        [dispid(2241), helpstring('Gets the block table record id associated to the block-type cell  and nContent.')],
        HRESULT,
        'GetBlockTableRecordId2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(LONG_PTR), 'pAcDbObjectId')
    ),
    COMMETHOD(
        [dispid(2242), helpstring('Sets the block table record id associated to the block-type cell  and nContent.')],
        HRESULT,
        'SetBlockTableRecordId2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], LONG_PTR, 'blkId'),
        (['in'], VARIANT_BOOL, 'autoFit')
    ),
    COMMETHOD(
        [dispid(2243), helpstring('Returns the attribute value from the Specified block cell for the attribute definition object contained in the block  and nContent.')],
        HRESULT,
        'GetBlockAttributeValue2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], LONG_PTR, 'blkId'),
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(2244), helpstring('Sets the attribute value from the Specified block cell for the attribute definition object contained in the block  and nContent.')],
        HRESULT,
        'SetBlockAttributeValue2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], LONG_PTR, 'blkId'),
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(2247), helpstring('Gets the custom data value set in cell, row, or column.')],
        HRESULT,
        'GetCustomData',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], BSTR, 'szKey'),
        (['out'], POINTER(VARIANT), 'pData')
    ),
    COMMETHOD(
        [dispid(2248), helpstring('Sets the custom data value set in cell, row, or column.')],
        HRESULT,
        'SetCustomData',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], BSTR, 'szKey'),
        (['in'], VARIANT, 'data')
    ),
    COMMETHOD(
        [dispid(2249), helpstring('Gets the cell style of cell, row, or column.')],
        HRESULT,
        'GetCellStyle',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['out', 'retval'], POINTER(BSTR), 'pCellStyle')
    ),
    COMMETHOD(
        [dispid(2256), helpstring('Sets the the cell style of cell, row, or column.')],
        HRESULT,
        'SetCellStyle',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], BSTR, 'szCellStyle')
    ),
    COMMETHOD(
        [dispid(2260), helpstring('Returns the true color value for the specified row type  and nContent.')],
        HRESULT,
        'GetContentColor2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(2261), helpstring('Sets the true color value for the specified row type  and nContent.')],
        HRESULT,
        'SetContentColor2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(2262), helpstring('Gets the row data type and unit type for the specified row type  and nContent.')],
        HRESULT,
        'GetDataType2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out'], POINTER(AcValueDataType), 'pDataType'),
        (['out'], POINTER(AcValueUnitType), 'pUnitType')
    ),
    COMMETHOD(
        [dispid(2263), helpstring('Sets the row data type and unit type for the specified row type  and nContent.')],
        HRESULT,
        'SetDataType2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], AcValueDataType, 'dataType'),
        (['in'], AcValueUnitType, 'unitType')
    ),
    COMMETHOD(
        [dispid(2264), helpstring('Gets the text style name for the specified row and column  and nContent.')],
        HRESULT,
        'GetTextStyle2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrStyleName')
    ),
    COMMETHOD(
        [dispid(2265), helpstring('Sets the text style name for the specified row and column  and nContent.')],
        HRESULT,
        'SetTextStyle2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], BSTR, 'bstrStyleName')
    ),
    COMMETHOD(
        [dispid(2272), helpstring('Returns the text height for the specified row and column  and nContent.')],
        HRESULT,
        'GetTextHeight2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(2273), helpstring('Gets the text height for the specified row and column  and nContent.')],
        HRESULT,
        'SetTextHeight2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(36322), helpstring('Gets the rotation angle of the content at the specified content index.')],
        HRESULT,
        'GetRotation',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(c_double), 'pValue')
    ),
    COMMETHOD(
        [dispid(2275), helpstring('Sets the rotation angle of the content at the specified content index.')],
        HRESULT,
        'SetRotation',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], c_double, 'Value')
    ),
    COMMETHOD(
        [dispid(2276), helpstring('Returns the auto scale flag value for the specified row and column  and nContent.')],
        HRESULT,
        'GetAutoScale2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAutoScale')
    ),
    COMMETHOD(
        [dispid(36325), helpstring('Sets the auto scale flag value for the specified row and column  and nContent.')],
        HRESULT,
        'SetAutoScale2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], VARIANT_BOOL, 'bAutoFit')
    ),
    COMMETHOD(
        [dispid(2278), helpstring('Gets the scale of the content at the specified content index.')],
        HRESULT,
        'GetScale',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(c_double), 'pScale')
    ),
    COMMETHOD(
        [dispid(2279), helpstring('Sets the scale of the content at the specified content index.')],
        HRESULT,
        'SetScale',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], c_double, 'scale')
    ),
    COMMETHOD(
        [dispid(2280), helpstring('Removes all the overrides in cell, row, or column.')],
        HRESULT,
        'RemoveAllOverrides',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol')
    ),
    COMMETHOD(
        [dispid(2281), helpstring('Gets the gridLineWeight value for the specified gridLineType(s) and row type(s)   and nContent.')],
        HRESULT,
        'GetGridLineWeight2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'plineweight')
    ),
    COMMETHOD(
        [dispid(2288), helpstring('Sets the gridLineWeight value for the specified gridLineType(s) and row type(s)   and nContent.')],
        HRESULT,
        'SetGridLineWeight2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(2289), helpstring('Gets the grid line type of cell, row, or column.')],
        HRESULT,
        'GetGridLinetype',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['out', 'retval'], POINTER(LONG_PTR), 'pacDbObjId')
    ),
    COMMETHOD(
        [dispid(2290), helpstring('Sets the grid line type of cell, row, or column.')],
        HRESULT,
        'SetGridLinetype',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['in'], LONG_PTR, 'idLinetype')
    ),
    COMMETHOD(
        [dispid(2291), helpstring('Returns the gridColor value for the specified gridLineType and row type  and nContent.')],
        HRESULT,
        'GetGridColor2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(2292), helpstring('Sets the gridColor value for the specified gridLineType and row type  and nContent.')],
        HRESULT,
        'SetGridColor2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(2293), helpstring('Returns the gridVisibility value for the specified gridLineType and row type.')],
        HRESULT,
        'GetGridVisibility2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVisible')
    ),
    COMMETHOD(
        [dispid(2294), helpstring('Sets the gridVisibility value for the specified gridLineType and row type.')],
        HRESULT,
        'SetGridVisibility2',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['in'], VARIANT_BOOL, 'bVisible')
    ),
    COMMETHOD(
        [dispid(2295), helpstring('Gets the grid double line spacing from cell, row, or column')],
        HRESULT,
        'GetGridDoubleLineSpacing',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['out', 'retval'], POINTER(c_double), 'pValue')
    ),
    COMMETHOD(
        [dispid(2296), helpstring('Sets the grid double line spacing in cell, row, or column.')],
        HRESULT,
        'SetGridDoubleLineSpacing',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['in'], c_double, 'fSpacing')
    ),
    COMMETHOD(
        [dispid(2308), helpstring('Enables or disables table breaking'), 'propput'],
        HRESULT,
        'EnableBreak',
        (['in'], VARIANT_BOOL, 'rhs')
    ),
    COMMETHOD(
        [dispid(2309), helpstring('Returns the break height of the specified table when table breaking is enabled.')],
        HRESULT,
        'GetBreakHeight',
        (['in'], c_int, 'nIndex'),
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(2310), helpstring('Sets the break height of the specified table when table breaking is enabled.')],
        HRESULT,
        'SetBreakHeight',
        (['in'], c_int, 'nIndex'),
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(2311), helpstring('Gets the content type of the content at the specified content index.')],
        HRESULT,
        'GetContentType',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['out', 'retval'], POINTER(AcCellContentType), 'pType')
    ),
    COMMETHOD(
        [dispid(2324), helpstring('Gets the margin of cell, row, or column.')],
        HRESULT,
        'GetMargin',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcCellMargin, 'nMargin'),
        (['out', 'retval'], POINTER(c_double), 'pValue')
    ),
    COMMETHOD(
        [dispid(2326), helpstring('Sets the margin of cell, row, or column.')],
        HRESULT,
        'SetMargin',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcCellMargin, 'nMargins'),
        (['in'], c_double, 'fMargin')
    ),
    COMMETHOD(
        [dispid(2327), helpstring('Gets the content layout of the cell.')],
        HRESULT,
        'GetContentLayout',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['out', 'retval'], POINTER(AcCellContentLayout), 'pLayout')
    ),
    COMMETHOD(
        [dispid(2328), helpstring('Sets the content layout of the cell.')],
        HRESULT,
        'SetContentLayout',
        (['in'], c_int, 'row'),
        (['in'], c_int, 'col'),
        (['in'], AcCellContentLayout, 'nLayout')
    ),
    COMMETHOD(
        [dispid(2338), helpstring('Gets the override in cell, row, column, or content.')],
        HRESULT,
        'GetOverride',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(AcCellProperty), 'pValue')
    ),
    COMMETHOD(
        [dispid(2339), helpstring('Sets the override in cell, row, column, or content.')],
        HRESULT,
        'SetOverride',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], AcCellProperty, 'nProp')
    ),
    COMMETHOD(
        [dispid(2340), helpstring('Gets the grid line style of cell, row, or column.')],
        HRESULT,
        'GetGridLineStyle',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineType'),
        (['out', 'retval'], POINTER(AcGridLineStyle), 'pStyle')
    ),
    COMMETHOD(
        [dispid(2341), helpstring('Sets the grid line style of cell, row, or column.')],
        HRESULT,
        'SetGridLineStyle',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcGridLineType, 'nGridLineTypes'),
        (['in'], AcGridLineStyle, 'nLineStyle')
    ),
    COMMETHOD(
        [dispid(2345), helpstring('Inserts one or more rows at the specified index and inherits the row properties from specified row.')],
        HRESULT,
        'InsertRowsAndInherit',
        (['in'], c_int, 'nIndex'),
        (['in'], c_int, 'nInheritFrom'),
        (['in'], c_int, 'nNumRows')
    ),
    COMMETHOD(
        [dispid(2353), helpstring('Inserts one or more columns at the specified index and inherits the column properties from specified column.')],
        HRESULT,
        'InsertColumnsAndInherit',
        (['in'], c_int, 'col'),
        (['in'], c_int, 'nInheritFrom'),
        (['in'], c_int, 'nNumCols')
    ),
    COMMETHOD(
        [dispid(2354), helpstring('Returns true if the content at the specified index is a formula.')],
        HRESULT,
        'GetHasFormula',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(2355), helpstring('Gets the formula if the content at the specified content index has a formula.')],
        HRESULT,
        'GetFormula',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['out', 'retval'], POINTER(BSTR), 'pszFormula')
    ),
    COMMETHOD(
        [dispid(2356), helpstring('Sets the formula at the specified content index.')],
        HRESULT,
        'SetFormula',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], c_int, 'nContent'),
        (['in'], BSTR, 'pszFormula')
    ),
    COMMETHOD(
        [dispid(2358), helpstring('Checks if the content of the specified cell can be modified.')],
        HRESULT,
        'IsContentEditable',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(2359), helpstring('Checks if the format of the specified cell can be modified.')],
        HRESULT,
        'IsFormatEditable',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(2360), helpstring('Gets the cell state.')],
        HRESULT,
        'GetCellState',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['out', 'retval'], POINTER(AcCellState), 'pCellState')
    ),
    COMMETHOD(
        [dispid(2361), helpstring('Sets the cell state.')],
        HRESULT,
        'SetCellState',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], AcCellState, 'nLock')
    ),
    COMMETHOD(
        [dispid(2368), helpstring('Enables or disables the merge all flag in row or column.')],
        HRESULT,
        'EnableMergeAll',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], VARIANT_BOOL, 'bEnable')
    ),
    COMMETHOD(
        [dispid(2369), helpstring('Returns whether merge all flag is enabled or not in row or column.')],
        HRESULT,
        'IsMergeAllEnabled',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue')
    ),
    COMMETHOD(
        [dispid(65520), helpstring('Determines whether table breaking is in use. When enabled, the table will break automatically at the current specified height.'), 'propget'],
        HRESULT,
        'BreaksEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65520), helpstring('Determines whether table breaking is in use. When enabled, the table will break automatically at the current specified height.'), 'propput'],
        HRESULT,
        'BreaksEnabled',
        (['in'], VARIANT_BOOL, 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65521), helpstring('Determines whether the first set of label rows will be repeated at the top of each broken table part.'), 'propget'],
        HRESULT,
        'RepeatTopLabels',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65521), helpstring('Determines whether the first set of label rows will be repeated at the top of each broken table part.'), 'propput'],
        HRESULT,
        'RepeatTopLabels',
        (['in'], VARIANT_BOOL, 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65522), helpstring('Determines whether the bottom set of label rows is repeated at the bottom of each broken table part.'), 'propget'],
        HRESULT,
        'RepeatBottomLabels',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65522), helpstring('Determines whether the bottom set of label rows is repeated at the bottom of each broken table part.'), 'propput'],
        HRESULT,
        'RepeatBottomLabels',
        (['in'], VARIANT_BOOL, 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65523), helpstring('Determines the direction that parts of the table flow.'), 'propget'],
        HRESULT,
        'TableBreakFlowDirection',
        (['out', 'retval'], POINTER(AcTableFlowDirection), 'pDir')
    ),
    COMMETHOD(
        [dispid(65523), helpstring('Determines the direction that parts of the table flow.'), 'propput'],
        HRESULT,
        'TableBreakFlowDirection',
        (['in'], AcTableFlowDirection, 'pDir')
    ),
    COMMETHOD(
        [dispid(65524), helpstring('When enabled, each table part can be moved outside of the boundary. When not enabled, the table parts are contained within a rectangular boundary.'), 'propget'],
        HRESULT,
        'AllowManualPositions',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65524), helpstring('When enabled, each table part can be moved outside of the boundary. When not enabled, the table parts are contained within a rectangular boundary.'), 'propput'],
        HRESULT,
        'AllowManualPositions',
        (['in'], VARIANT_BOOL, 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65525), helpstring('Allows the heights of broken table parts to have their own breaking height. When set to No, all table parts will break at the height of the initial table part.'), 'propget'],
        HRESULT,
        'AllowManualHeights',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65525), helpstring('Allows the heights of broken table parts to have their own breaking height. When set to No, all table parts will break at the height of the initial table part.'), 'propput'],
        HRESULT,
        'AllowManualHeights',
        (['in'], VARIANT_BOOL, 'bEnabled')
    ),
    COMMETHOD(
        [dispid(65526), helpstring('Sets the breaking height for the initial table part and any other table parts that do not have manual heights set.'), 'propget'],
        HRESULT,
        'TableBreakHeight',
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        [dispid(65526), helpstring('Sets the breaking height for the initial table part and any other table parts that do not have manual heights set.'), 'propput'],
        HRESULT,
        'TableBreakHeight',
        (['in'], c_double, 'pHeight')
    ),
    COMMETHOD(
        [dispid(65527), helpstring('Controls the spacing between the broken table parts. Depending on the break direction this will be a horizontal or vertical spacing.'), 'propget'],
        HRESULT,
        'BreakSpacing',
        (['out', 'retval'], POINTER(c_double), 'pSpacing')
    ),
    COMMETHOD(
        [dispid(65527), helpstring('Controls the spacing between the broken table parts. Depending on the break direction this will be a horizontal or vertical spacing.'), 'propput'],
        HRESULT,
        'BreakSpacing',
        (['in'], c_double, 'pSpacing')
    ),
    COMMETHOD(
        [dispid(65528), helpstring('Gets the columns name.')],
        HRESULT,
        'GetColumnName',
        (['in'], c_int, 'nIndex'),
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(65529), helpstring('Sets the columns name.')],
        HRESULT,
        'SetColumnName',
        (['in'], c_int, 'nIndex'),
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(65530), helpstring('Sets the tooltip string for cell, row, or column.')],
        HRESULT,
        'SetToolTip',
        (['in'], c_int, 'nRow'),
        (['in'], c_int, 'nCol'),
        (['in'], BSTR, 'tip')
    ),
]

################################################################
# code template for IAcadTable implementation
# class IAcadTable_Impl(object):
#     def _get(self):
#         'Specifies the style name of the Table'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the style name of the Table'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rows in the Table'
#         #return pRows
#     def _set(self, pRows):
#         'Specifies the rows in the Table'
#     Rows = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the columns in the Table'
#         #return pColumns
#     def _set(self, pColumns):
#         'Specifies the columns in the Table'
#     Columns = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the Table flow direction'
#         #return pFlow
#     def _set(self, pFlow):
#         'Specifies the Table flow direction'
#     FlowDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the Table width'
#         #return pWidth
#     def _set(self, pWidth):
#         'Specifies the Table width'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the Table height'
#         #return pHeight
#     def _set(self, pHeight):
#         'Specifies the Table height'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the vertical distance between text and edge of cell'
#         #return pGap
#     def _set(self, pGap):
#         'Specifies the vertical distance between text and edge of cell'
#     VertCellMargin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the horizontal distance between text and edge of cell'
#         #return pGap
#     def _set(self, pGap):
#         'Specifies the horizontal distance between text and edge of cell'
#     HorzCellMargin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the insertion point of the table'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specifies the insertion point of the table'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def GetColumnWidth(self, col):
#         'Returns the column width for the specified column.'
#         #return pWidth
#
#     def SetColumnWidth(self, col, Width):
#         'Sets the column width for the specified column.'
#         #return 
#
#     def _set(self, rhs):
#         'Sets the uniform column width for all the columns in the table.'
#     ColumnWidth = property(fset = _set, doc = _set.__doc__)
#
#     def GetRowHeight(self, row):
#         'Returns the row height for the specified row.'
#         #return pHeight
#
#     def SetRowHeight(self, row, Height):
#         'Sets the row height for the specified row.'
#         #return 
#
#     def _set(self, rhs):
#         'Sets the uniform row height for all the rows in the table.'
#     RowHeight = property(fset = _set, doc = _set.__doc__)
#
#     def GetMinimumColumnWidth(self, col):
#         'Gets the minimum column width for the specified column.'
#         #return pWidth
#
#     def GetMinimumRowHeight(self, row):
#         'Gets the minimum row height for the specified row.'
#         #return pHeight
#
#     @property
#     def MinimumTableWidth(self):
#         'Gets the minimum width for the table.'
#         #return pWidth
#
#     @property
#     def MinimumTableHeight(self):
#         'Gets the minimum height for the table.'
#         #return pHeight
#
#     def _get(self):
#         'Specifies the direction vector of the table'
#         #return DirectionVector
#     def _set(self, DirectionVector):
#         'Specifies the direction vector of the table'
#     Direction = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the title suppressed flag value.'
#         #return bValue
#     def _set(self, bValue):
#         'Returns and sets the title suppressed flag value.'
#     TitleSuppressed = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the header suppressed flag value.'
#         #return bValue
#     def _set(self, bValue):
#         'Returns and sets the header suppressed flag value.'
#     HeaderSuppressed = property(_get, _set, doc = _set.__doc__)
#
#     def GetAlignment(self, rowType):
#         'Returns the cell alignment for the specified row type.'
#         #return pCellAlignment
#
#     def SetAlignment(self, rowTypes, cellAlignment):
#         'Sets the cell alignment for the specified row types.'
#         #return 
#
#     def GetBackgroundColorNone(self, rowType):
#         'Returns the backgroundColorNone flag value for the specified row type.'
#         #return bValue
#
#     def SetBackgroundColorNone(self, rowTypes, bValue):
#         'Sets the backgroundColorNone flag value for the specified row types.'
#         #return 
#
#     def GetBackgroundColor(self, rowType):
#         'Returns the background true color value for the specified row type.'
#         #return pColor
#
#     def SetBackgroundColor(self, rowTypes, pColor):
#         'Sets the background true color value for the specified row types.'
#         #return 
#
#     def GetContentColor(self, rowType):
#         'Returns the true color value for the specified row type.'
#         #return pColor
#
#     def SetContentColor(self, rowTypes, pColor):
#         'Sets the true color value for the specified row types.'
#         #return 
#
#     def GetTextStyle(self, rowType):
#         'Returns the text style name for the specified row type.'
#         #return bstrName
#
#     def SetTextStyle(self, rowTypes, bstrName):
#         'Sets the text style name for the specified row types.'
#         #return 
#
#     def GetTextHeight(self, rowType):
#         'Returns the text height for the specified row type.'
#         #return pTextHeight
#
#     def SetTextHeight(self, rowTypes, TextHeight):
#         'Sets the text height for the specified row types.'
#         #return 
#
#     def GetGridLineWeight(self, gridLineType, rowType):
#         'Returns the gridLineWeight value for the specified gridLineType and row type.'
#         #return Lineweight
#
#     def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
#         'Sets the gridLineWeight value for the specified gridLineType(s) and row type(s).'
#         #return 
#
#     def GetGridColor(self, gridLineType, rowType):
#         'Returns the gridColor value for the specified gridLineType and row type.'
#         #return pColor
#
#     def SetGridColor(self, gridLineTypes, rowTypes, pColor):
#         'Sets the gridColor value for the specified gridLineType(s) and row type(s).'
#         #return 
#
#     def GetGridVisibility(self, gridLineType, rowType):
#         'Returns the gridVisibility value for the specified gridLineType and row type.'
#         #return bValue
#
#     def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
#         'Sets the gridVisibility value for the specified gridLineType(s) and row type(s).'
#         #return 
#
#     @property
#     def TableStyleOverrides(self):
#         'Returns the tableStyleOverrides.'
#         #return pIntArray
#
#     def ClearTableStyleOverrides(self, flag):
#         'Clears the tableStyleOverrides.'
#         #return 
#
#     def GetCellType(self, row, col):
#         'Gets the cell type for the specified row and column.'
#         #return pCellType
#
#     def SetCellType(self, row, col, CellType):
#         'Sets the cell type for the specified row and column.'
#         #return 
#
#     def GetCellExtents(self, row, col, bOuterCell):
#         'Gets the cell extents for the specified row and column.'
#         #return pPts
#
#     def GetAttachmentPoint(self, row, col):
#         'Gets the attachment point for the specified row and column.'
#         #return pAttachmentPoint
#
#     def GetCellAlignment(self, row, col):
#         'Returns the alignment for the specified row and column.'
#         #return pCellAlignment
#
#     def SetCellAlignment(self, row, col, cellAlignment):
#         'Sets the cell alignment for the specified row and column.'
#         #return 
#
#     def GetCellBackgroundColorNone(self, row, col):
#         'Returns the backgroundColorNone flag value for the specified row and column.'
#         #return bValue
#
#     def SetCellBackgroundColorNone(self, row, col, bValue):
#         'Sets the backgroundColorNone flag value for the specified row and column.'
#         #return 
#
#     def GetCellBackgroundColor(self, row, col):
#         'Returns the background true color value for the specified row and column.'
#         #return pColor
#
#     def SetCellBackgroundColor(self, row, col, pColor):
#         'Sets the background true color value for the specified row and column.'
#         #return 
#
#     def GetCellContentColor(self, row, col):
#         'Returns the true color value for the specified row and column.'
#         #return pColor
#
#     def SetCellContentColor(self, row, col, pColor):
#         'Sets the true color value for the specified row and column.'
#         #return 
#
#     def GetCellStyleOverrides(self, row, col):
#         'Returns the cellStyleOverrides.'
#         #return pIntArray
#
#     def DeleteCellContent(self, row, col):
#         'Deletes the cell content for the specified row and coluumn.'
#         #return 
#
#     def GetRowType(self, row):
#         'Gets the row type for the specified row.'
#         #return pRowType
#
#     def GetText(self, row, col):
#         'Returns the text value value for the specified row and column.'
#         #return pStr
#
#     def SetText(self, row, col, pStr):
#         'Sets the text value value for the specified row and column.'
#         #return 
#
#     def GetCellTextStyle(self, row, col):
#         'Returns the text style name for the specified row and column.'
#         #return bstrName
#
#     def SetCellTextStyle(self, row, col, bstrName):
#         'Sets the text style name for the specified row and column.'
#         #return 
#
#     def GetCellTextHeight(self, row, col):
#         'Returns the text height for the specified row and column.'
#         #return pTextHeight
#
#     def SetCellTextHeight(self, row, col, TextHeight):
#         'Sets the text height for the specified row and column.'
#         #return 
#
#     def GetTextRotation(self, row, col):
#         'Returns the text rotation for the specified row and column.'
#         #return TextRotation
#
#     def SetTextRotation(self, row, col, TextRotation):
#         'Sets the text rotation for the specified row and column.'
#         #return 
#
#     def GetAutoScale(self, row, col):
#         'Returns the auto scale flag value for the specified row and column.'
#         #return bValue
#
#     def SetAutoScale(self, row, col, bValue):
#         'Sets the auto scale flag value for the specified row and column.'
#         #return 
#
#     def GetBlockTableRecordId(self, row, col):
#         'Returns the block table record id associated to the block-type cell.'
#         #return blkId
#
#     def SetBlockTableRecordId(self, row, col, blkId, bAutoFit):
#         'Sets the block table record id associated to the block-type cell.'
#         #return 
#
#     def GetBlockScale(self, row, col):
#         'Returns the block scale value for the specified row and column.'
#         #return blkScale
#
#     def SetBlockScale(self, row, col, blkScale):
#         'Sets the block scale value for the specified row and column.'
#         #return 
#
#     def GetBlockRotation(self, row, col):
#         'Returns the block rotation for the specified row and column.'
#         #return blkRotation
#
#     def SetBlockRotation(self, row, col, blkRotation):
#         'Sets the block rotation for the specified row and column.'
#         #return 
#
#     def GetBlockAttributeValue(self, row, col, attdefId):
#         'Returns the attribute value from the Specified block cell for the attribute definition object contained in the block.'
#         #return bstrValue
#
#     def SetBlockAttributeValue(self, row, col, attdefId, bstrValue):
#         'Sets the attribute value to the Specified block cell for the attribute definition object contained in the block.'
#         #return 
#
#     def GetCellGridLineWeight(self, row, col, edge):
#         'Returns the gridLineWeight value for the given edge of specified row and column.'
#         #return plineweight
#
#     def SetCellGridLineWeight(self, row, col, edges, Lineweight):
#         'Sets the gridLineWeight value for the given edges of specified row and column.'
#         #return 
#
#     def GetCellGridColor(self, row, col, edge):
#         'Returns the gridColor value for the given edge of specified row and column.'
#         #return pColor
#
#     def SetCellGridColor(self, row, col, edges, pColor):
#         'Sets the gridColor value for the given edges of specified row and column.'
#         #return 
#
#     def GetCellGridVisibility(self, row, col, edge):
#         'Returns the gridVisibility value for the given edge of specified row and column.'
#         #return bValue
#
#     def SetCellGridVisibility(self, row, col, edges, bValue):
#         'Sets the gridVisibility value for the given edges of specified row and column.'
#         #return 
#
#     def InsertColumns(self, col, Width, cols):
#         'Inserts the column(s) of specified width.'
#         #return 
#
#     def DeleteColumns(self, col, cols):
#         'deletes the column(s) from the specified column index.'
#         #return 
#
#     def InsertRows(self, row, Height, Rows):
#         'Inserts the row(s) of specified height.'
#         #return 
#
#     def DeleteRows(self, row, Rows):
#         'deletes the row(s) from the specified row index.'
#         #return 
#
#     def MergeCells(self, minRow, maxRow, minCol, maxCol):
#         'merge cells.'
#         #return 
#
#     def UnmergeCells(self, minRow, maxRow, minCol, maxCol):
#         'Unmerge cells.'
#         #return 
#
#     def IsMergedCell(self, row, col):
#         'is Merged Cell.'
#         #return minRow, maxRow, minCol, maxCol, pbValue
#
#     def GetFieldId(self, row, col):
#         'Returns the field object id associated to the specifed cell.'
#         #return fieldId
#
#     def SetFieldId(self, row, col, fieldId):
#         'Sets the field object id in the specifed cell.'
#         #return 
#
#     def GenerateLayout(self):
#         'Generate layout.'
#         #return 
#
#     def RecomputeTableBlock(self, bForceUpdate):
#         'Recompute TableBlock.'
#         #return 
#
#     def HitTest(self, wpt, wviewVec):
#         'Hit test.'
#         #return resultRowIndex, resultColumnIndex, bReturn
#
#     def Select(self, wpt, wvwVec, wvwxVec, wxaper, wyaper, allowOutside):
#         'Select.'
#         #return resultRowIndex, resultColumnIndex
#
#     def SelectSubRegion(self, wpt1, wpt2, wvwVec, wvwxVec, seltype, bIncludeCurrentSelection):
#         'Select SubRegion.'
#         #return rowMin, rowMax, colMin, colMax
#
#     def ReselectSubRegion(self):
#         'Re select SubRegion.'
#         #return 
#
#     def GetSubSelection(self):
#         'GetSubSelection.'
#         #return rowMin, rowMax, colMin, colMax
#
#     def SetSubSelection(self, rowMin, rowMax, colMin, colMax):
#         'SetSubSelection.'
#         #return 
#
#     def ClearSubSelection(self):
#         'ClearSubSelection.'
#         #return 
#
#     @property
#     def HasSubSelection(self):
#         'HasSubSelection.'
#         #return pbValue
#
#     def _get(self):
#         'Enables or disables the regeneration of table block'
#         #return bValue
#     def _set(self, bValue):
#         'Enables or disables the regeneration of table block'
#     RegenerateTableSuppressed = property(_get, _set, doc = _set.__doc__)
#
#     def GetDataType(self, rowType):
#         'Gets the row data type and unit type for the specified row type.'
#         #return pDataType, pUnitType
#
#     def SetDataType(self, rowTypes, dataType, unitType):
#         'Sets the row data type and unit type for the specified row type.'
#         #return 
#
#     def GetFormat(self, rowType):
#         'Gets the format for the specified row type.'
#         #return pFormat
#
#     def SetFormat(self, rowTypes, pFormat):
#         'Sets the format for the specified row type.'
#         #return 
#
#     def FormatValue(self, row, col, nOption, pVal):
#         'Gets the formatted text string for the specified row and column.'
#         #return 
#
#     def GetCellDataType(self, row, col):
#         'Gets the cell data type and unit type for the specified row and column.'
#         #return pDataType, pUnitType
#
#     def SetCellDataType(self, row, col, dataType, unitType):
#         'Sets the cell data type and unit type for the specified row and column.'
#         #return 
#
#     def GetCellFormat(self, row, col):
#         'Gets the cell format for the specified row and column.'
#         #return pFormat
#
#     def SetCellFormat(self, row, col, pFormat):
#         'Sets the cell format for the specified row and column.'
#         #return 
#
#     def GetCellValue(self, row, col):
#         'Gets the cell value for the specified row and column.'
#         #return pVal
#
#     def SetCellValue(self, row, col, val):
#         'Sets the cell value for the specified row and column.'
#         #return 
#
#     def SetCellValueFromText(self, row, col, val, nOption):
#         'Sets the cell value by parsing the text for the specified row and column.'
#         #return 
#
#     def ResetCellValue(self, row, col):
#         'Resets the cell value for the specified row and column.'
#         #return 
#
#     def IsEmpty(self, nRow, nCol):
#         'Checks if the content of the specified cell is empty.'
#         #return bValue
#
#     def CreateContent(self, nRow, nCol, nIndex):
#         'Creates new content in a cell'
#         #return pInt
#
#     def MoveContent(self, nRow, nCol, nFromIndex, nToIndex):
#         'Moves a content in a cell from one position to another position within the cell'
#         #return 
#
#     def DeleteContent(self, nRow, nCol):
#         'Deletes a content from a cell'
#         #return 
#
#     def GetValue(self, nRow, nCol, nContent):
#         'Gets the cell value for the specified row and column and nContent.'
#         #return pAcValue
#
#     def SetValue(self, nRow, nCol, nContent, acValue):
#         'Sets the cell value by parsing the text for the specified row and column and nContent.'
#         #return 
#
#     def SetValueFromText(self, nRow, nCol, nContent, szText, nOption):
#         'Sets the value of the content at the specified content index.'
#         #return 
#
#     def GetDataFormat(self, nRow, nCol, nContent):
#         'Gets the cell format for the specified row and column and nContent.'
#         #return pValue
#
#     def SetDataFormat(self, nRow, nCol, nContent, szFormat):
#         'Sets the cell format for the specified row and column and nContent.'
#         #return 
#
#     def GetTextString(self, nRow, nCol, nContent):
#         'Gets the text value value for the specified row and column  and nContent.'
#         #return pTextString
#
#     def SetTextString(self, nRow, nCol, nContent, Text):
#         'Sets the text value value for the specified row and column.'
#         #return 
#
#     def GetFieldId2(self, nRow, nCol, nContent):
#         'Returns the field object id associated to the specifed cell  and nContent.'
#         #return pAcDbObjectId
#
#     def SetFieldId2(self, nRow, nCol, nContent, acDbObjectId, nflag):
#         'Sets  the field object id associated to the specifed cell  and nContent.'
#         #return 
#
#     def GetBlockTableRecordId2(self, nRow, nCol, nContent):
#         'Gets the block table record id associated to the block-type cell  and nContent.'
#         #return pAcDbObjectId
#
#     def SetBlockTableRecordId2(self, nRow, nCol, nContent, blkId, autoFit):
#         'Sets the block table record id associated to the block-type cell  and nContent.'
#         #return 
#
#     def GetBlockAttributeValue2(self, nRow, nCol, nContent, blkId):
#         'Returns the attribute value from the Specified block cell for the attribute definition object contained in the block  and nContent.'
#         #return Value
#
#     def SetBlockAttributeValue2(self, nRow, nCol, nContent, blkId, Value):
#         'Sets the attribute value from the Specified block cell for the attribute definition object contained in the block  and nContent.'
#         #return 
#
#     def GetCustomData(self, nRow, nCol, szKey):
#         'Gets the custom data value set in cell, row, or column.'
#         #return pData
#
#     def SetCustomData(self, nRow, nCol, szKey, data):
#         'Sets the custom data value set in cell, row, or column.'
#         #return 
#
#     def GetCellStyle(self, nRow, nCol):
#         'Gets the cell style of cell, row, or column.'
#         #return pCellStyle
#
#     def SetCellStyle(self, nRow, nCol, szCellStyle):
#         'Sets the the cell style of cell, row, or column.'
#         #return 
#
#     def GetContentColor2(self, nRow, nCol, nContent):
#         'Returns the true color value for the specified row type  and nContent.'
#         #return pColor
#
#     def SetContentColor2(self, nRow, nCol, nContent, pColor):
#         'Sets the true color value for the specified row type  and nContent.'
#         #return 
#
#     def GetDataType2(self, nRow, nCol, nContent):
#         'Gets the row data type and unit type for the specified row type  and nContent.'
#         #return pDataType, pUnitType
#
#     def SetDataType2(self, nRow, nCol, nContent, dataType, unitType):
#         'Sets the row data type and unit type for the specified row type  and nContent.'
#         #return 
#
#     def GetTextStyle2(self, nRow, nCol, nContent):
#         'Gets the text style name for the specified row and column  and nContent.'
#         #return pbstrStyleName
#
#     def SetTextStyle2(self, nRow, nCol, nContent, bstrStyleName):
#         'Sets the text style name for the specified row and column  and nContent.'
#         #return 
#
#     def GetTextHeight2(self, nRow, nCol, nContent):
#         'Returns the text height for the specified row and column  and nContent.'
#         #return pHeight
#
#     def SetTextHeight2(self, nRow, nCol, nContent, Height):
#         'Gets the text height for the specified row and column  and nContent.'
#         #return 
#
#     def GetRotation(self, nRow, nCol, nContent):
#         'Gets the rotation angle of the content at the specified content index.'
#         #return pValue
#
#     def SetRotation(self, nRow, nCol, nContent, Value):
#         'Sets the rotation angle of the content at the specified content index.'
#         #return 
#
#     def GetAutoScale2(self, nRow, nCol, nContent):
#         'Returns the auto scale flag value for the specified row and column  and nContent.'
#         #return bAutoScale
#
#     def SetAutoScale2(self, nRow, nCol, nContent, bAutoFit):
#         'Sets the auto scale flag value for the specified row and column  and nContent.'
#         #return 
#
#     def GetScale(self, nRow, nCol, nContent):
#         'Gets the scale of the content at the specified content index.'
#         #return pScale
#
#     def SetScale(self, nRow, nCol, nContent, scale):
#         'Sets the scale of the content at the specified content index.'
#         #return 
#
#     def RemoveAllOverrides(self, nRow, nCol):
#         'Removes all the overrides in cell, row, or column.'
#         #return 
#
#     def GetGridLineWeight2(self, nRow, nCol, nGridLineType):
#         'Gets the gridLineWeight value for the specified gridLineType(s) and row type(s)   and nContent.'
#         #return plineweight
#
#     def SetGridLineWeight2(self, nRow, nCol, nGridLineType, Lineweight):
#         'Sets the gridLineWeight value for the specified gridLineType(s) and row type(s)   and nContent.'
#         #return 
#
#     def GetGridLinetype(self, nRow, nCol, nGridLineType):
#         'Gets the grid line type of cell, row, or column.'
#         #return pacDbObjId
#
#     def SetGridLinetype(self, nRow, nCol, nGridLineType, idLinetype):
#         'Sets the grid line type of cell, row, or column.'
#         #return 
#
#     def GetGridColor2(self, nRow, nCol, nGridLineType):
#         'Returns the gridColor value for the specified gridLineType and row type  and nContent.'
#         #return pColor
#
#     def SetGridColor2(self, nRow, nCol, nGridLineType, pColor):
#         'Sets the gridColor value for the specified gridLineType and row type  and nContent.'
#         #return 
#
#     def GetGridVisibility2(self, nRow, nCol, nGridLineType):
#         'Returns the gridVisibility value for the specified gridLineType and row type.'
#         #return bVisible
#
#     def SetGridVisibility2(self, nRow, nCol, nGridLineType, bVisible):
#         'Sets the gridVisibility value for the specified gridLineType and row type.'
#         #return 
#
#     def GetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType):
#         'Gets the grid double line spacing from cell, row, or column'
#         #return pValue
#
#     def SetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType, fSpacing):
#         'Sets the grid double line spacing in cell, row, or column.'
#         #return 
#
#     def _set(self, rhs):
#         'Enables or disables table breaking'
#     EnableBreak = property(fset = _set, doc = _set.__doc__)
#
#     def GetBreakHeight(self, nIndex):
#         'Returns the break height of the specified table when table breaking is enabled.'
#         #return pHeight
#
#     def SetBreakHeight(self, nIndex, Height):
#         'Sets the break height of the specified table when table breaking is enabled.'
#         #return 
#
#     def GetContentType(self, nRow, nCol):
#         'Gets the content type of the content at the specified content index.'
#         #return pType
#
#     def GetMargin(self, nRow, nCol, nMargin):
#         'Gets the margin of cell, row, or column.'
#         #return pValue
#
#     def SetMargin(self, nRow, nCol, nMargins, fMargin):
#         'Sets the margin of cell, row, or column.'
#         #return 
#
#     def GetContentLayout(self, row, col):
#         'Gets the content layout of the cell.'
#         #return pLayout
#
#     def SetContentLayout(self, row, col, nLayout):
#         'Sets the content layout of the cell.'
#         #return 
#
#     def GetOverride(self, nRow, nCol, nContent):
#         'Gets the override in cell, row, column, or content.'
#         #return pValue
#
#     def SetOverride(self, nRow, nCol, nContent, nProp):
#         'Sets the override in cell, row, column, or content.'
#         #return 
#
#     def GetGridLineStyle(self, nRow, nCol, nGridLineType):
#         'Gets the grid line style of cell, row, or column.'
#         #return pStyle
#
#     def SetGridLineStyle(self, nRow, nCol, nGridLineTypes, nLineStyle):
#         'Sets the grid line style of cell, row, or column.'
#         #return 
#
#     def InsertRowsAndInherit(self, nIndex, nInheritFrom, nNumRows):
#         'Inserts one or more rows at the specified index and inherits the row properties from specified row.'
#         #return 
#
#     def InsertColumnsAndInherit(self, col, nInheritFrom, nNumCols):
#         'Inserts one or more columns at the specified index and inherits the column properties from specified column.'
#         #return 
#
#     def GetHasFormula(self, nRow, nCol, nContent):
#         'Returns true if the content at the specified index is a formula.'
#         #return bValue
#
#     def GetFormula(self, nRow, nCol, nContent):
#         'Gets the formula if the content at the specified content index has a formula.'
#         #return pszFormula
#
#     def SetFormula(self, nRow, nCol, nContent, pszFormula):
#         'Sets the formula at the specified content index.'
#         #return 
#
#     def IsContentEditable(self, nRow, nCol):
#         'Checks if the content of the specified cell can be modified.'
#         #return bValue
#
#     def IsFormatEditable(self, nRow, nCol):
#         'Checks if the format of the specified cell can be modified.'
#         #return bValue
#
#     def GetCellState(self, nRow, nCol):
#         'Gets the cell state.'
#         #return pCellState
#
#     def SetCellState(self, nRow, nCol, nLock):
#         'Sets the cell state.'
#         #return 
#
#     def EnableMergeAll(self, nRow, nCol, bEnable):
#         'Enables or disables the merge all flag in row or column.'
#         #return 
#
#     def IsMergeAllEnabled(self, nRow, nCol):
#         'Returns whether merge all flag is enabled or not in row or column.'
#         #return bValue
#
#     def _get(self):
#         'Determines whether table breaking is in use. When enabled, the table will break automatically at the current specified height.'
#         #return bEnabled
#     def _set(self, bEnabled):
#         'Determines whether table breaking is in use. When enabled, the table will break automatically at the current specified height.'
#     BreaksEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the first set of label rows will be repeated at the top of each broken table part.'
#         #return bEnabled
#     def _set(self, bEnabled):
#         'Determines whether the first set of label rows will be repeated at the top of each broken table part.'
#     RepeatTopLabels = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the bottom set of label rows is repeated at the bottom of each broken table part.'
#         #return bEnabled
#     def _set(self, bEnabled):
#         'Determines whether the bottom set of label rows is repeated at the bottom of each broken table part.'
#     RepeatBottomLabels = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines the direction that parts of the table flow.'
#         #return pDir
#     def _set(self, pDir):
#         'Determines the direction that parts of the table flow.'
#     TableBreakFlowDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'When enabled, each table part can be moved outside of the boundary. When not enabled, the table parts are contained within a rectangular boundary.'
#         #return bEnabled
#     def _set(self, bEnabled):
#         'When enabled, each table part can be moved outside of the boundary. When not enabled, the table parts are contained within a rectangular boundary.'
#     AllowManualPositions = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Allows the heights of broken table parts to have their own breaking height. When set to No, all table parts will break at the height of the initial table part.'
#         #return bEnabled
#     def _set(self, bEnabled):
#         'Allows the heights of broken table parts to have their own breaking height. When set to No, all table parts will break at the height of the initial table part.'
#     AllowManualHeights = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the breaking height for the initial table part and any other table parts that do not have manual heights set.'
#         #return pHeight
#     def _set(self, pHeight):
#         'Sets the breaking height for the initial table part and any other table parts that do not have manual heights set.'
#     TableBreakHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the spacing between the broken table parts. Depending on the break direction this will be a horizontal or vertical spacing.'
#         #return pSpacing
#     def _set(self, pSpacing):
#         'Controls the spacing between the broken table parts. Depending on the break direction this will be a horizontal or vertical spacing.'
#     BreakSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def GetColumnName(self, nIndex):
#         'Gets the columns name.'
#         #return Name
#
#     def SetColumnName(self, nIndex, Name):
#         'Sets the columns name.'
#         #return 
#
#     def SetToolTip(self, nRow, nCol, tip):
#         'Sets the tooltip string for cell, row, or column.'
#         #return 
#
# values for enumeration 'AcHatchStyle'
acHatchStyleNormal = 0
acHatchStyleOuter = 1
acHatchStyleIgnore = 2
AcHatchStyle = c_int  # enum


class IAcadMInsertBlock(IAcadBlockReference):
    """IAcadMInsertBlock Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{A6AAC55E-ED54-4011-86E3-0BE7920972EC}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadMInsertBlock._methods_ = [
    COMMETHOD(
        [dispid(256), helpstring('Specifies the number of columns in the block array'), 'propput'],
        HRESULT,
        'Columns',
        (['in'], c_int, 'NumColumns')
    ),
    COMMETHOD(
        [dispid(256), helpstring('Specifies the number of columns in the block array'), 'propget'],
        HRESULT,
        'Columns',
        (['out', 'retval'], POINTER(c_int), 'NumColumns')
    ),
    COMMETHOD(
        [dispid(257), helpstring('Specifies the column spacing in the block array'), 'propput'],
        HRESULT,
        'ColumnSpacing',
        (['in'], c_double, 'Spacing')
    ),
    COMMETHOD(
        [dispid(257), helpstring('Specifies the column spacing in the block array'), 'propget'],
        HRESULT,
        'ColumnSpacing',
        (['out', 'retval'], POINTER(c_double), 'Spacing')
    ),
    COMMETHOD(
        [dispid(258), helpstring('Determines the number of columns in the block array'), 'propput'],
        HRESULT,
        'Rows',
        (['in'], c_int, 'NumRows')
    ),
    COMMETHOD(
        [dispid(258), helpstring('Determines the number of columns in the block array'), 'propget'],
        HRESULT,
        'Rows',
        (['out', 'retval'], POINTER(c_int), 'NumRows')
    ),
    COMMETHOD(
        [dispid(259), helpstring('Specifies the row spacing in the block array'), 'propput'],
        HRESULT,
        'RowSpacing',
        (['in'], c_double, 'Spacing')
    ),
    COMMETHOD(
        [dispid(259), helpstring('Specifies the row spacing in the block array'), 'propget'],
        HRESULT,
        'RowSpacing',
        (['out', 'retval'], POINTER(c_double), 'Spacing')
    ),
]

################################################################
# code template for IAcadMInsertBlock implementation
# class IAcadMInsertBlock_Impl(object):
#     def _get(self):
#         'Specifies the number of columns in the block array'
#         #return NumColumns
#     def _set(self, NumColumns):
#         'Specifies the number of columns in the block array'
#     Columns = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the column spacing in the block array'
#         #return Spacing
#     def _set(self, Spacing):
#         'Specifies the column spacing in the block array'
#     ColumnSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines the number of columns in the block array'
#         #return NumRows
#     def _set(self, NumRows):
#         'Determines the number of columns in the block array'
#     Rows = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the row spacing in the block array'
#         #return Spacing
#     def _set(self, Spacing):
#         'Specifies the row spacing in the block array'
#     RowSpacing = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcPolylineType'
acSimplePoly = 0
acFitCurvePoly = 1
acQuadSplinePoly = 2
acCubicSplinePoly = 3
AcPolylineType = c_int  # enum


class IAcadToolbar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """An AutoCAD toolbar"""
    _case_insensitive_ = True
    _iid_ = GUID('{8B75685E-0AA7-403B-B602-C3386B4DEF16}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadToolbarItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A single button item on an AutoCAD toolbar"""
    _case_insensitive_ = True
    _iid_ = GUID('{088613D2-4917-4B78-94F3-781D0F5F08E8}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcToolbarDockStatus'
acToolbarDockTop = 0
acToolbarDockBottom = 1
acToolbarDockLeft = 2
acToolbarDockRight = 3
acToolbarFloating = 4
AcToolbarDockStatus = c_int  # enum

IAcadToolbar._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadToolbarItem)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pEnumVariant')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Specifies the visibility of an object or the application'), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Specifies the visibility of an object or the application'), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies if the toolbar is docked or floating'), 'propget'],
        HRESULT,
        'DockStatus',
        (['out', 'retval'], POINTER(AcToolbarDockStatus), 'nStatus')
    ),
    COMMETHOD(
        [dispid(1610743818), helpstring('Specifies if the toolbar button is large or small'), 'propget'],
        HRESULT,
        'LargeButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the left edge of a toolbar'), 'propget'],
        HRESULT,
        'left',
        (['out', 'retval'], POINTER(c_int), 'nLeft')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the left edge of a toolbar'), 'propput'],
        HRESULT,
        'left',
        (['in'], c_int, 'nLeft')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the top edge of a toolbar'), 'propget'],
        HRESULT,
        'top',
        (['out', 'retval'], POINTER(c_int), 'nTop')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the top edge of a toolbar'), 'propput'],
        HRESULT,
        'top',
        (['in'], c_int, 'nTop')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'nWidth')
    ),
    COMMETHOD(
        [dispid(1610743824), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'nHeight')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the number of rows for a floating toolbar'), 'propget'],
        HRESULT,
        'FloatingRows',
        (['out', 'retval'], POINTER(c_int), 'nRows')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the number of rows for a floating toolbar'), 'propput'],
        HRESULT,
        'FloatingRows',
        (['in'], c_int, 'nRows')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the help string for the toolbar, toolbar item, or menu item'), 'propget'],
        HRESULT,
        'HelpString',
        (['out', 'retval'], POINTER(BSTR), 'bstrHelp')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the help string for the toolbar, toolbar item, or menu item'), 'propput'],
        HRESULT,
        'HelpString',
        (['in'], BSTR, 'bstrHelp')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Adds a toolbar item to a toolbar at a specified position')],
        HRESULT,
        'AddToolbarButton',
        (['in'], VARIANT, 'Index'),
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'HelpString'),
        (['in'], BSTR, 'Macro'),
        (['in', 'optional'], VARIANT, 'FlyoutButton'),
        (['out', 'retval'], POINTER(POINTER(IAcadToolbarItem)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1610743830), helpstring('Adds a separator to an existing menu or toolbar')],
        HRESULT,
        'AddSeparator',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadToolbarItem)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Docks the toolbar to the owning frame window')],
        HRESULT,
        'Dock',
        (['in'], AcToolbarDockStatus, 'Side')
    ),
    COMMETHOD(
        [dispid(1610743832), helpstring('Floats the toolbar')],
        HRESULT,
        'Float',
        (['in'], c_int, 'top'),
        (['in'], c_int, 'left'),
        (['in'], c_int, 'NumberFloatRows')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Deletes a specified object')],
        HRESULT,
        'Delete',
    ),
    COMMETHOD(
        [dispid(1610743834), helpstring('Specifies the tag string of the object'), 'propget'],
        HRESULT,
        'TagString',
        (['out', 'retval'], POINTER(BSTR), 'bstrTag')
    ),
]

################################################################
# code template for IAcadToolbar implementation
# class IAcadToolbar_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pEnumVariant
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return Count
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the visibility of an object or the application'
#         #return bFlag
#     def _set(self, bFlag):
#         'Specifies the visibility of an object or the application'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DockStatus(self):
#         'Specifies if the toolbar is docked or floating'
#         #return nStatus
#
#     @property
#     def LargeButtons(self):
#         'Specifies if the toolbar button is large or small'
#         #return bFlag
#
#     def _get(self):
#         'Specifies the left edge of a toolbar'
#         #return nLeft
#     def _set(self, nLeft):
#         'Specifies the left edge of a toolbar'
#     left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the top edge of a toolbar'
#         #return nTop
#     def _set(self, nTop):
#         'Specifies the top edge of a toolbar'
#     top = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Width(self):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#         #return nWidth
#
#     @property
#     def Height(self):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#         #return nHeight
#
#     def _get(self):
#         'Specifies the number of rows for a floating toolbar'
#         #return nRows
#     def _set(self, nRows):
#         'Specifies the number of rows for a floating toolbar'
#     FloatingRows = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the help string for the toolbar, toolbar item, or menu item'
#         #return bstrHelp
#     def _set(self, bstrHelp):
#         'Specifies the help string for the toolbar, toolbar item, or menu item'
#     HelpString = property(_get, _set, doc = _set.__doc__)
#
#     def AddToolbarButton(self, Index, Name, HelpString, Macro, FlyoutButton):
#         'Adds a toolbar item to a toolbar at a specified position'
#         #return pItem
#
#     def AddSeparator(self, Index):
#         'Adds a separator to an existing menu or toolbar'
#         #return pItem
#
#     def Dock(self, Side):
#         'Docks the toolbar to the owning frame window'
#         #return 
#
#     def Float(self, top, left, NumberFloatRows):
#         'Floats the toolbar'
#         #return 
#
#     def Delete(self):
#         'Deletes a specified object'
#         #return 
#
#     @property
#     def TagString(self):
#         'Specifies the tag string of the object'
#         #return bstrTag
#


class AcadAttributeReference(CoClass):
    """AutoCAD Attribute Reference Object"""
    _reg_clsid_ = GUID('{D19B44C9-E8A6-4629-8F44-6E012D2AF868}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadAttributeReference(IAcadEntity):
    """AutoCAD Attribute Reference Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{CD91B81A-62B5-43A1-9E2D-82AC34CF505F}')
    _idlflags_ = ['dual', 'oleautomation']


AcadAttributeReference._com_interfaces_ = [IAcadAttributeReference]
AcadAttributeReference._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadBlockReference(CoClass):
    """AutoCAD Block Reference Object"""
    _reg_clsid_ = GUID('{73D92E94-7FDA-4285-A81D-87C894678560}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadBlockReference._com_interfaces_ = [IAcadBlockReference]
AcadBlockReference._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'Ac3DPolylineType'
acSimple3DPoly = 0
acQuadSpline3DPoly = 1
acCubicSpline3DPoly = 2
Ac3DPolylineType = c_int  # enum


class AcadCircle(CoClass):
    """AutoCAD Circle Object"""
    _reg_clsid_ = GUID('{37EFB168-E408-4A83-AF0C-5ABC92D358D4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadCircle(IAcadEntity):
    """AutoCAD Circle Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{36BB03E5-4534-4F21-9C9C-0C09C0DC1CF7}')
    _idlflags_ = ['dual', 'oleautomation']


AcadCircle._com_interfaces_ = [IAcadCircle]
AcadCircle._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadEllipse(CoClass):
    """AutoCAD Ellipse Object"""
    _reg_clsid_ = GUID('{28B2B8E9-2574-4E04-A7DE-21088D31102F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadEllipse(IAcadEntity):
    """AutoCAD Ellipse Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{DF837BB0-C4E6-405B-BF51-0536436C25AD}')
    _idlflags_ = ['dual', 'oleautomation']


AcadEllipse._com_interfaces_ = [IAcadEllipse]
AcadEllipse._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadPreferencesSystem._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Determines if AutoCAD runs in single- or multiple-document mode'), 'propput'],
        HRESULT,
        'SingleDocumentMode',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Determines if AutoCAD runs in single- or multiple-document mode'), 'propget'],
        HRESULT,
        'SingleDocumentMode',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Determines if the OLE scaling dialog is displayed when OLE objects are inserted into a drawing'), 'propput'],
        HRESULT,
        'DisplayOLEScale',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Determines if the OLE scaling dialog is displayed when OLE objects are inserted into a drawing'), 'propget'],
        HRESULT,
        'DisplayOLEScale',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Determines if the SQL index is stored in the drawing'), 'propput'],
        HRESULT,
        'StoreSQLIndex',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Determines if the SQL index is stored in the drawing'), 'propget'],
        HRESULT,
        'StoreSQLIndex',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Determines whether to open database tables in read-only mode'), 'propput'],
        HRESULT,
        'TablesReadOnly',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Determines whether to open database tables in read-only mode'), 'propget'],
        HRESULT,
        'TablesReadOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies if the Start-up dialog box is displayed when AutoCAD is launched'), 'propput'],
        HRESULT,
        'EnableStartupDialog',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies if the Start-up dialog box is displayed when AutoCAD is launched'), 'propget'],
        HRESULT,
        'EnableStartupDialog',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies if AutoCAD should sound an alarm beep when it detects an invalid entry'), 'propput'],
        HRESULT,
        'BeepOnError',
        (['in'], VARIANT_BOOL, 'BeepOnError')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies if AutoCAD should sound an alarm beep when it detects an invalid entry'), 'propget'],
        HRESULT,
        'BeepOnError',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'BeepOnError')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Resets all dialog boxes that have the "Don\'t Display This Warning Again" check box so they display again'), 'propput'],
        HRESULT,
        'ShowWarningMessages',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Resets all dialog boxes that have the "Don\'t Display This Warning Again" check box so they display again'), 'propget'],
        HRESULT,
        'ShowWarningMessages',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('LoadAcadLspInAllDocuments.'), 'propput'],
        HRESULT,
        'LoadAcadLspInAllDocuments',
        (['in'], VARIANT_BOOL, 'pALID')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('LoadAcadLspInAllDocuments.'), 'propget'],
        HRESULT,
        'LoadAcadLspInAllDocuments',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pALID')
    ),
]

################################################################
# code template for IAcadPreferencesSystem implementation
# class IAcadPreferencesSystem_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Determines if AutoCAD runs in single- or multiple-document mode'
#         #return Path
#     def _set(self, Path):
#         'Determines if AutoCAD runs in single- or multiple-document mode'
#     SingleDocumentMode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines if the OLE scaling dialog is displayed when OLE objects are inserted into a drawing'
#         #return Path
#     def _set(self, Path):
#         'Determines if the OLE scaling dialog is displayed when OLE objects are inserted into a drawing'
#     DisplayOLEScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines if the SQL index is stored in the drawing'
#         #return Path
#     def _set(self, Path):
#         'Determines if the SQL index is stored in the drawing'
#     StoreSQLIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether to open database tables in read-only mode'
#         #return Path
#     def _set(self, Path):
#         'Determines whether to open database tables in read-only mode'
#     TablesReadOnly = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the Start-up dialog box is displayed when AutoCAD is launched'
#         #return Path
#     def _set(self, Path):
#         'Specifies if the Start-up dialog box is displayed when AutoCAD is launched'
#     EnableStartupDialog = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if AutoCAD should sound an alarm beep when it detects an invalid entry'
#         #return BeepOnError
#     def _set(self, BeepOnError):
#         'Specifies if AutoCAD should sound an alarm beep when it detects an invalid entry'
#     BeepOnError = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Resets all dialog boxes that have the "Don\'t Display This Warning Again" check box so they display again'
#         #return Path
#     def _set(self, Path):
#         'Resets all dialog boxes that have the "Don\'t Display This Warning Again" check box so they display again'
#     ShowWarningMessages = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'LoadAcadLspInAllDocuments.'
#         #return pALID
#     def _set(self, pALID):
#         'LoadAcadLspInAllDocuments.'
#     LoadAcadLspInAllDocuments = property(_get, _set, doc = _set.__doc__)
#


class IAcadSolid(IAcadEntity):
    """AutoCAD Solid Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{14F915F5-451D-4F39-87C4-79073200180B}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSolid._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the solid'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'corners')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the solid'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'corners')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the solid'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the solid'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
]

################################################################
# code template for IAcadSolid implementation
# class IAcadSolid_Impl(object):
#     def _get(self):
#         'Specifies the current vertex of the solid'
#         #return corners
#     def _set(self, corners):
#         'Specifies the current vertex of the solid'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the solid'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the solid'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcViewportSplitType'
acViewport2Horizontal = 0
acViewport2Vertical = 1
acViewport3Left = 2
acViewport3Right = 3
acViewport3Horizontal = 4
acViewport3Vertical = 5
acViewport3Above = 6
acViewport3Below = 7
acViewport4 = 8
AcViewportSplitType = c_int  # enum


class AcadHatch(CoClass):
    """AutoCAD Hatch Object"""
    _reg_clsid_ = GUID('{3D09C590-EB10-499C-A3AD-BD0B9266FB74}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadHatch(IAcadEntity):
    """AutoCAD Hatch Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{BE6851C4-0977-4A73-8DEC-A9E3A24ABAD2}')
    _idlflags_ = ['dual', 'oleautomation']


AcadHatch._com_interfaces_ = [IAcadHatch]
AcadHatch._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcToolbarItemType'
acToolbarButton = 0
acToolbarSeparator = 1
acToolbarControl = 2
acToolbarFlyout = 3
AcToolbarItemType = c_int  # enum

IAcadToolbarItem._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IAcadToolbar)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Specifies the tag string of the object'), 'propget'],
        HRESULT,
        'TagString',
        (['out', 'retval'], POINTER(BSTR), 'bstrTag')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Specifies the tag string of the object'), 'propput'],
        HRESULT,
        'TagString',
        (['in'], BSTR, 'bstrTag')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Specifies type of a Leader, MenuGroup, PopupMenuItem, ToolbarItem, Polyline, or PolygonMesh object'), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(AcToolbarItemType), 'itemType')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Gets the toolbar associated with a flyout toolbar item'), 'propget'],
        HRESULT,
        'Flyout',
        (['out', 'retval'], POINTER(POINTER(IAcadToolbar)), 'pTlbar')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Specifies the macro for the menu or toolbar item'), 'propget'],
        HRESULT,
        'Macro',
        (['out', 'retval'], POINTER(BSTR), 'bstrMacro')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Specifies the macro for the menu or toolbar item'), 'propput'],
        HRESULT,
        'Macro',
        (['in'], BSTR, 'bstrMacro')
    ),
    COMMETHOD(
        [dispid(1610743818), helpstring('Specifies the index of the menu or toolbar item'), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'nIndex')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the help string for the toolbar, toolbar item, or menu item'), 'propget'],
        HRESULT,
        'HelpString',
        (['out', 'retval'], POINTER(BSTR), 'bstrHelp')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the help string for the toolbar, toolbar item, or menu item'), 'propput'],
        HRESULT,
        'HelpString',
        (['in'], BSTR, 'bstrHelp')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Gets the large and small bitmaps used as icons for the toolbar item')],
        HRESULT,
        'GetBitmaps',
        (['out'], POINTER(BSTR), 'SmallIconName'),
        (['out'], POINTER(BSTR), 'LargeIconName')
    ),
    COMMETHOD(
        [dispid(1610743822), helpstring('Sets the large and small bitmaps used as icons for the toolbar item')],
        HRESULT,
        'SetBitmaps',
        (['in'], BSTR, 'SmallIconName'),
        (['in'], BSTR, 'LargeIconName')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Attaches a toolbar to a toolbar button defined as a flyout')],
        HRESULT,
        'AttachToolbarToFlyout',
        (['in'], BSTR, 'MenuGroupName'),
        (['in'], BSTR, 'ToolbarName')
    ),
    COMMETHOD(
        [dispid(1610743824), helpstring('Deletes a specified object')],
        HRESULT,
        'Delete',
    ),
    COMMETHOD(
        [dispid(1610743825), 'propget'],
        HRESULT,
        'CommandDisplayName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(1610743825), 'propput'],
        HRESULT,
        'CommandDisplayName',
        (['in'], BSTR, 'Name')
    ),
]

################################################################
# code template for IAcadToolbarItem implementation
# class IAcadToolbarItem_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the tag string of the object'
#         #return bstrTag
#     def _set(self, bstrTag):
#         'Specifies the tag string of the object'
#     TagString = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         'Specifies type of a Leader, MenuGroup, PopupMenuItem, ToolbarItem, Polyline, or PolygonMesh object'
#         #return itemType
#
#     @property
#     def Flyout(self):
#         'Gets the toolbar associated with a flyout toolbar item'
#         #return pTlbar
#
#     def _get(self):
#         'Specifies the macro for the menu or toolbar item'
#         #return bstrMacro
#     def _set(self, bstrMacro):
#         'Specifies the macro for the menu or toolbar item'
#     Macro = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Index(self):
#         'Specifies the index of the menu or toolbar item'
#         #return nIndex
#
#     def _get(self):
#         'Specifies the help string for the toolbar, toolbar item, or menu item'
#         #return bstrHelp
#     def _set(self, bstrHelp):
#         'Specifies the help string for the toolbar, toolbar item, or menu item'
#     HelpString = property(_get, _set, doc = _set.__doc__)
#
#     def GetBitmaps(self):
#         'Gets the large and small bitmaps used as icons for the toolbar item'
#         #return SmallIconName, LargeIconName
#
#     def SetBitmaps(self, SmallIconName, LargeIconName):
#         'Sets the large and small bitmaps used as icons for the toolbar item'
#         #return 
#
#     def AttachToolbarToFlyout(self, MenuGroupName, ToolbarName):
#         'Attaches a toolbar to a toolbar button defined as a flyout'
#         #return 
#
#     def Delete(self):
#         'Deletes a specified object'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     CommandDisplayName = property(_get, _set, doc = _set.__doc__)
#


class IAcadMLeader(IAcadEntity):
    """AutoCAD Multi-Leader Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{DD704BAE-4BEB-482E-8CD6-6FA8FD3803AE}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcAttachmentPoint'
acAttachmentPointTopLeft = 1
acAttachmentPointTopCenter = 2
acAttachmentPointTopRight = 3
acAttachmentPointMiddleLeft = 4
acAttachmentPointMiddleCenter = 5
acAttachmentPointMiddleRight = 6
acAttachmentPointBottomLeft = 7
acAttachmentPointBottomCenter = 8
acAttachmentPointBottomRight = 9
AcAttachmentPoint = c_int  # enum
# values for enumeration 'AcDrawingDirection'
acLeftToRight = 1
acRightToLeft = 2
acTopToBottom = 3
acBottomToTop = 4
acByStyle = 5
AcDrawingDirection = c_int  # enum
# values for enumeration 'AcLineSpacingStyle'
acLineSpacingStyleAtLeast = 1
acLineSpacingStyleExactly = 2
AcLineSpacingStyle = c_int  # enum
# values for enumeration 'AcPredefBlockType'
acBlockImperial = 0
acBlockSlot = 1
acBlockCircle = 2
acBlockBox = 3
acBlockHexagon = 4
acBlockTriangle = 5
acBlockUserDefined = 6
AcPredefBlockType = c_int  # enum

IAcadMLeader._methods_ = [
    COMMETHOD(
        [dispid(38), helpstring('Specifies the overall scale factor of this multileader object'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(c_double), 'scale')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Specifies the overall scale factor of this multileader object'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], c_double, 'scale')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the leader type'), 'propget'],
        HRESULT,
        'LeaderType',
        (['out', 'retval'], POINTER(AcMLeaderType), 'Type')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the leader type'), 'propput'],
        HRESULT,
        'LeaderType',
        (['in'], AcMLeaderType, 'Type')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the color of the leader lines'), 'propget'],
        HRESULT,
        'LeaderLineColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'Type')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the color of the leader lines'), 'propput'],
        HRESULT,
        'LeaderLineColor',
        (['in'], POINTER(IAcadAcCmColor), 'Type')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the linetype of leader lines'), 'propget'],
        HRESULT,
        'LeaderLinetype',
        (['out', 'retval'], POINTER(ACAD_LTYPE), 'Linetype')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the linetype of leader lines'), 'propput'],
        HRESULT,
        'LeaderLinetype',
        (['in'], ACAD_LTYPE, 'Linetype')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the line weight of leader lines'), 'propget'],
        HRESULT,
        'LeaderLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the line weight of leader lines'), 'propput'],
        HRESULT,
        'LeaderLineWeight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the type of leader arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadType',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'BlockName')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the type of leader arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadType',
        (['in'], AcDimArrowheadType, 'BlockName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the size of leader arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the size of leader arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Enable/Disable horizontal landing of multileader'), 'propget'],
        HRESULT,
        'DogLegged',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'val')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Enable/Disable horizontal landing of multileader'), 'propput'],
        HRESULT,
        'DogLegged',
        (['in'], VARIANT_BOOL, 'val')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specify the landing distance'), 'propget'],
        HRESULT,
        'DoglegLength',
        (['out', 'retval'], POINTER(c_double), 'DoglegLength')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specify the landing distance'), 'propput'],
        HRESULT,
        'DoglegLength',
        (['in'], c_double, 'DoglegLength')
    ),
    COMMETHOD(
        [dispid(9), helpstring("Specify the name of multileader's content block"), 'nonbrowsable', 'propget'],
        HRESULT,
        'ContentBlockName',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(9), helpstring("Specify the name of multileader's content block"), 'nonbrowsable', 'propput'],
        HRESULT,
        'ContentBlockName',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specify how leaders connect with content block'), 'propget'],
        HRESULT,
        'BlockConnectionType',
        (['out', 'retval'], POINTER(AcBlockConnectionType), 'Type')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specify how leaders connect with content block'), 'propput'],
        HRESULT,
        'BlockConnectionType',
        (['in'], AcBlockConnectionType, 'Type')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Specify how leaders connect with content block'), 'propget'],
        HRESULT,
        'BlockScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Specify how leaders connect with content block'), 'propput'],
        HRESULT,
        'BlockScale',
        (['in'], ACAD_NOUNITS, 'factor')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the text string of the Mtext'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the text string of the Mtext'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the style name of the Mtext'), 'propget'],
        HRESULT,
        'TextStyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the style name of the Mtext'), 'propput'],
        HRESULT,
        'TextStyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the attachment point of the Mtext'), 'propget'],
        HRESULT,
        'TextJustify',
        (['out', 'retval'], POINTER(AcAttachmentPoint), 'attPoint')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the attachment point of the Mtext'), 'propput'],
        HRESULT,
        'TextJustify',
        (['in'], AcAttachmentPoint, 'attPoint')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the drawing direction of the Mtext'), 'propget'],
        HRESULT,
        'TextDirection',
        (['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the drawing direction of the Mtext'), 'propput'],
        HRESULT,
        'TextDirection',
        (['in'], AcDrawingDirection, 'drawDir')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the width of the Mtext'), 'propget'],
        HRESULT,
        'TextWidth',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the width of the Mtext'), 'propput'],
        HRESULT,
        'TextWidth',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the height of the Mtext'), 'propget'],
        HRESULT,
        'TextHeight',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the height of the Mtext'), 'propput'],
        HRESULT,
        'TextHeight',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the rotation angle of the Mtext'), 'propget'],
        HRESULT,
        'TextRotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the rotation angle of the Mtext'), 'propput'],
        HRESULT,
        'TextRotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the line spacing factor of the Mtext'), 'propget'],
        HRESULT,
        'TextLineSpacingFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the line spacing factor of the Mtext'), 'propput'],
        HRESULT,
        'TextLineSpacingFactor',
        (['in'], c_double, 'factor')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the line spacing distance of the Mtext'), 'propget'],
        HRESULT,
        'TextLineSpacingDistance',
        (['out', 'retval'], POINTER(c_double), 'Value')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the line spacing distance of the Mtext'), 'propput'],
        HRESULT,
        'TextLineSpacingDistance',
        (['in'], c_double, 'Value')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies the line spacing style of the Mtext'), 'propget'],
        HRESULT,
        'TextLineSpacingStyle',
        (['out', 'retval'], POINTER(AcLineSpacingStyle), 'style')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies the line spacing style of the Mtext'), 'propput'],
        HRESULT,
        'TextLineSpacingStyle',
        (['in'], AcLineSpacingStyle, 'style')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies use Background Mask'), 'propget'],
        HRESULT,
        'TextBackgroundFill',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bUseBackgroundFill')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies use Background Mask'), 'propput'],
        HRESULT,
        'TextBackgroundFill',
        (['in'], VARIANT_BOOL, 'bUseBackgroundFill')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Specifies if leaders connect with the text horizontally or vertically'), 'propget'],
        HRESULT,
        'TextAttachmentDirection',
        (['out', 'retval'], POINTER(AcTextAttachmentDirection), 'dir')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Specifies if leaders connect with the text horizontally or vertically'), 'propput'],
        HRESULT,
        'TextAttachmentDirection',
        (['in'], AcTextAttachmentDirection, 'dir')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specify how leaders on the left side connect with the text'), 'propget'],
        HRESULT,
        'TextLeftAttachmentType',
        (['out', 'retval'], POINTER(AcTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specify how leaders on the left side connect with the text'), 'propput'],
        HRESULT,
        'TextLeftAttachmentType',
        (['in'], AcTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Gets the dog leg direction of the specific leader'), 'propget'],
        HRESULT,
        'TextRightAttachmentType',
        (['out', 'retval'], POINTER(AcTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Gets the dog leg direction of the specific leader'), 'propput'],
        HRESULT,
        'TextRightAttachmentType',
        (['in'], AcTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Specifies how leaders on the top connect with the text'), 'propget'],
        HRESULT,
        'TextTopAttachmentType',
        (['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Specifies how leaders on the top connect with the text'), 'propput'],
        HRESULT,
        'TextTopAttachmentType',
        (['in'], AcVerticalTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Specifies how leaders on the bottom connect with the text'), 'propget'],
        HRESULT,
        'TextBottomAttachmentType',
        (['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Specifies how leaders on the bottom connect with the text'), 'propput'],
        HRESULT,
        'TextBottomAttachmentType',
        (['in'], AcVerticalTextAttachmentType, 'Type')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specify the text landing gap'), 'propget'],
        HRESULT,
        'LandingGap',
        (['out', 'retval'], POINTER(c_double), 'gap')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specify the text landing gap'), 'propput'],
        HRESULT,
        'LandingGap',
        (['in'], c_double, 'gap')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the block to use as the custom arrowhead for leader lines of multileader'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ArrowheadBlock',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the block to use as the custom arrowhead for leader lines of multileader'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ArrowheadBlock',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies the content block of multileader'), 'propget'],
        HRESULT,
        'ContentBlockType',
        (['out', 'retval'], POINTER(AcPredefBlockType), 'Type')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies the content block of multileader'), 'propput'],
        HRESULT,
        'ContentBlockType',
        (['in'], AcPredefBlockType, 'Type')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Gets the number of leader line clusters in this multileader object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'LeaderCount',
        (['out', 'retval'], POINTER(c_int), 'number')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Adds a new leader cluster to this multileader object')],
        HRESULT,
        'AddLeader',
        (['out', 'retval'], POINTER(c_int), 'leaderIndex')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Removes the leader cluster with specified index')],
        HRESULT,
        'RemoveLeader',
        (['in'], c_int, 'leaderIndex')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Adds a leader line to the leader cluster with specified index')],
        HRESULT,
        'AddLeaderLine',
        (['in'], c_int, 'leaderIndex'),
        (['in'], VARIANT, 'pointArray'),
        (['out', 'retval'], POINTER(c_int), 'leaderLineIndex')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Adds a new leader line to this multileader object determined by input point which will be the first point of new leader line')],
        HRESULT,
        'AddLeaderLineEx',
        (['in'], VARIANT, 'pointArray'),
        (['out', 'retval'], POINTER(c_int), 'leaderLineIndex')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Removes the leader line with specified index')],
        HRESULT,
        'RemoveLeaderLine',
        (['in'], c_int, 'leaderLineIndex')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Specifies the vertices of leader line with specified index')],
        HRESULT,
        'SetLeaderLineVertices',
        (['in'], c_int, 'leaderLineIndex'),
        (['in'], VARIANT, 'pointArray')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Specifies the vertices of leader line with specified index')],
        HRESULT,
        'GetLeaderLineVertices',
        (['in'], c_int, 'leaderLineIndex'),
        (['out', 'retval'], POINTER(VARIANT), 'pointArray')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Specifies the content type of this multileader object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ContentType',
        (['in'], AcMLeaderContentType, 'Type')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Specifies the content type of this multileader object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ContentType',
        (['out', 'retval'], POINTER(AcMLeaderContentType), 'Type')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Gets the index of leader cluster which the specified leader line is in')],
        HRESULT,
        'GetLeaderIndex',
        (['in'], c_int, 'leaderLineIndex'),
        (['out', 'retval'], POINTER(c_int), 'leaderIndex')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Gets the indexes of leader lines of the specific leader')],
        HRESULT,
        'GetLeaderLineIndexes',
        (['in'], c_int, 'leaderIndex'),
        (['out', 'retval'], POINTER(VARIANT), 'leaderLineIndexes')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Gets the number of vertices in the specified leader line')],
        HRESULT,
        'GetVertexCount',
        (['in'], c_int, 'leaderLineIndex'),
        (['out', 'retval'], POINTER(c_int), 'number')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Display/hide text frame of multileader content'), 'propget'],
        HRESULT,
        'TextFrameDisplay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Display/hide text frame of multileader content'), 'propput'],
        HRESULT,
        'TextFrameDisplay',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Specifies the style name of this multileader object'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Specifies the style name of this multileader object'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Gets the dog leg direction of the specific leader')],
        HRESULT,
        'GetDoglegDirection',
        (['in'], c_int, 'leaderIndex'),
        (['out', 'retval'], POINTER(VARIANT), 'dirVec')
    ),
    COMMETHOD(
        [dispid(42), helpstring('Sets the dog leg direction of the specific leader')],
        HRESULT,
        'SetDoglegDirection',
        (['in'], c_int, 'leaderIndex'),
        (['in'], VARIANT, 'dirVec')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Gets attribute value in block content determined by attribute definition id')],
        HRESULT,
        'GetBlockAttributeValue',
        (['in'], LONG_PTR, 'attdefId'),
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(45), helpstring('Sets attribute value in block content with attribute definition id')],
        HRESULT,
        'SetBlockAttributeValue',
        (['in'], LONG_PTR, 'attdefId'),
        (['in'], BSTR, 'Value')
    ),
]

################################################################
# code template for IAcadMLeader implementation
# class IAcadMLeader_Impl(object):
#     def _get(self):
#         'Specifies the overall scale factor of this multileader object'
#         #return scale
#     def _set(self, scale):
#         'Specifies the overall scale factor of this multileader object'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the leader type'
#         #return Type
#     def _set(self, Type):
#         'Specifies the leader type'
#     LeaderType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the leader lines'
#         #return Type
#     def _set(self, Type):
#         'Specifies the color of the leader lines'
#     LeaderLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of leader lines'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of leader lines'
#     LeaderLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line weight of leader lines'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the line weight of leader lines'
#     LeaderLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of leader arrowhead'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the type of leader arrowhead'
#     ArrowheadType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of leader arrowhead'
#         #return size
#     def _set(self, size):
#         'Specifies the size of leader arrowhead'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Enable/Disable horizontal landing of multileader'
#         #return val
#     def _set(self, val):
#         'Enable/Disable horizontal landing of multileader'
#     DogLegged = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the landing distance'
#         #return DoglegLength
#     def _set(self, DoglegLength):
#         'Specify the landing distance'
#     DoglegLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specify the name of multileader's content block"
#         #return BlockName
#     def _set(self, BlockName):
#         "Specify the name of multileader's content block"
#     ContentBlockName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify how leaders connect with content block'
#         #return Type
#     def _set(self, Type):
#         'Specify how leaders connect with content block'
#     BlockConnectionType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify how leaders connect with content block'
#         #return factor
#     def _set(self, factor):
#         'Specify how leaders connect with content block'
#     BlockScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text string of the Mtext'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the Mtext'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style name of the Mtext'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the style name of the Mtext'
#     TextStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the attachment point of the Mtext'
#         #return attPoint
#     def _set(self, attPoint):
#         'Specifies the attachment point of the Mtext'
#     TextJustify = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the drawing direction of the Mtext'
#         #return drawDir
#     def _set(self, drawDir):
#         'Specifies the drawing direction of the Mtext'
#     TextDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the Mtext'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the Mtext'
#     TextWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the Mtext'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the Mtext'
#     TextHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the Mtext'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the Mtext'
#     TextRotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing factor of the Mtext'
#         #return factor
#     def _set(self, factor):
#         'Specifies the line spacing factor of the Mtext'
#     TextLineSpacingFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing distance of the Mtext'
#         #return Value
#     def _set(self, Value):
#         'Specifies the line spacing distance of the Mtext'
#     TextLineSpacingDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing style of the Mtext'
#         #return style
#     def _set(self, style):
#         'Specifies the line spacing style of the Mtext'
#     TextLineSpacingStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies use Background Mask'
#         #return bUseBackgroundFill
#     def _set(self, bUseBackgroundFill):
#         'Specifies use Background Mask'
#     TextBackgroundFill = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if leaders connect with the text horizontally or vertically'
#         #return dir
#     def _set(self, dir):
#         'Specifies if leaders connect with the text horizontally or vertically'
#     TextAttachmentDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify how leaders on the left side connect with the text'
#         #return Type
#     def _set(self, Type):
#         'Specify how leaders on the left side connect with the text'
#     TextLeftAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Gets the dog leg direction of the specific leader'
#         #return Type
#     def _set(self, Type):
#         'Gets the dog leg direction of the specific leader'
#     TextRightAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies how leaders on the top connect with the text'
#         #return Type
#     def _set(self, Type):
#         'Specifies how leaders on the top connect with the text'
#     TextTopAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies how leaders on the bottom connect with the text'
#         #return Type
#     def _set(self, Type):
#         'Specifies how leaders on the bottom connect with the text'
#     TextBottomAttachmentType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the text landing gap'
#         #return gap
#     def _set(self, gap):
#         'Specify the text landing gap'
#     LandingGap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for leader lines of multileader'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for leader lines of multileader'
#     ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the content block of multileader'
#         #return Type
#     def _set(self, Type):
#         'Specifies the content block of multileader'
#     ContentBlockType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LeaderCount(self):
#         'Gets the number of leader line clusters in this multileader object'
#         #return number
#
#     def AddLeader(self):
#         'Adds a new leader cluster to this multileader object'
#         #return leaderIndex
#
#     def RemoveLeader(self, leaderIndex):
#         'Removes the leader cluster with specified index'
#         #return 
#
#     def AddLeaderLine(self, leaderIndex, pointArray):
#         'Adds a leader line to the leader cluster with specified index'
#         #return leaderLineIndex
#
#     def AddLeaderLineEx(self, pointArray):
#         'Adds a new leader line to this multileader object determined by input point which will be the first point of new leader line'
#         #return leaderLineIndex
#
#     def RemoveLeaderLine(self, leaderLineIndex):
#         'Removes the leader line with specified index'
#         #return 
#
#     def SetLeaderLineVertices(self, leaderLineIndex, pointArray):
#         'Specifies the vertices of leader line with specified index'
#         #return 
#
#     def GetLeaderLineVertices(self, leaderLineIndex):
#         'Specifies the vertices of leader line with specified index'
#         #return pointArray
#
#     def _get(self):
#         'Specifies the content type of this multileader object'
#         #return Type
#     def _set(self, Type):
#         'Specifies the content type of this multileader object'
#     ContentType = property(_get, _set, doc = _set.__doc__)
#
#     def GetLeaderIndex(self, leaderLineIndex):
#         'Gets the index of leader cluster which the specified leader line is in'
#         #return leaderIndex
#
#     def GetLeaderLineIndexes(self, leaderIndex):
#         'Gets the indexes of leader lines of the specific leader'
#         #return leaderLineIndexes
#
#     def GetVertexCount(self, leaderLineIndex):
#         'Gets the number of vertices in the specified leader line'
#         #return number
#
#     def _get(self):
#         'Display/hide text frame of multileader content'
#         #return pVal
#     def _set(self, pVal):
#         'Display/hide text frame of multileader content'
#     TextFrameDisplay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style name of this multileader object'
#         #return Name
#     def _set(self, Name):
#         'Specifies the style name of this multileader object'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def GetDoglegDirection(self, leaderIndex):
#         'Gets the dog leg direction of the specific leader'
#         #return dirVec
#
#     def SetDoglegDirection(self, leaderIndex, dirVec):
#         'Sets the dog leg direction of the specific leader'
#         #return 
#
#     def GetBlockAttributeValue(self, attdefId):
#         'Gets attribute value in block content determined by attribute definition id'
#         #return Value
#
#     def SetBlockAttributeValue(self, attdefId, Value):
#         'Sets attribute value in block content with attribute definition id'
#         #return 
#


class AcadSubDMesh(CoClass):
    """AutoCAD SubDMesh Object"""
    _reg_clsid_ = GUID('{7A5EAD52-B82A-4B68-94FB-09362FB29D23}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubDMesh._com_interfaces_ = [IAcadSubDMesh]
AcadSubDMesh._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadLeader(CoClass):
    """AutoCAD Leader Object"""
    _reg_clsid_ = GUID('{B3672CF4-0658-49B3-95D8-7D1824AA4971}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadLeader(IAcadEntity):
    """AutoCAD Leader Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{B317165E-E478-430D-8F78-4B43CF91E759}')
    _idlflags_ = ['dual', 'oleautomation']


AcadLeader._com_interfaces_ = [IAcadLeader]
AcadLeader._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadSubDMeshEdge(IAcadSubEntity):
    """AutoCAD SubDMesh Edge Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{5E51A0FB-A791-4AEE-BC8F-78093B618965}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSubDMeshEdge._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies if a crease is applied'), 'propget'],
        HRESULT,
        'CreaseType',
        (['out', 'retval'], POINTER(AcMeshCreaseType), 'Type')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies if a crease is applied'), 'propput'],
        HRESULT,
        'CreaseType',
        (['in'], AcMeshCreaseType, 'Type')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies crease level at which the crease starts losing its effect'), 'propget'],
        HRESULT,
        'CreaseLevel',
        (['out', 'retval'], POINTER(c_double), 'level')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies crease level at which the crease starts losing its effect'), 'propput'],
        HRESULT,
        'CreaseLevel',
        (['in'], c_double, 'level')
    ),
]

################################################################
# code template for IAcadSubDMeshEdge implementation
# class IAcadSubDMeshEdge_Impl(object):
#     def _get(self):
#         'Specifies if a crease is applied'
#         #return Type
#     def _set(self, Type):
#         'Specifies if a crease is applied'
#     CreaseType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies crease level at which the crease starts losing its effect'
#         #return level
#     def _set(self, level):
#         'Specifies crease level at which the crease starts losing its effect'
#     CreaseLevel = property(_get, _set, doc = _set.__doc__)
#


class IAcadMLeaderLeader(IAcadSubEntity):
    """AutoCAD Interface for Multi-Leader's Leader Line"""
    _case_insensitive_ = True
    _iid_ = GUID('{1C6FFBC1-5699-4798-AD9C-5F3359C1802D}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadMLeaderLeader._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the leader type'), 'propget'],
        HRESULT,
        'LeaderType',
        (['out', 'retval'], POINTER(AcMLeaderType), 'Type')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the leader type'), 'propput'],
        HRESULT,
        'LeaderType',
        (['in'], AcMLeaderType, 'Type')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the color of the leader lines'), 'propget'],
        HRESULT,
        'LeaderLineColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'Type')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the color of the leader lines'), 'propput'],
        HRESULT,
        'LeaderLineColor',
        (['in'], POINTER(IAcadAcCmColor), 'Type')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the linetype of leader lines'), 'propget'],
        HRESULT,
        'LeaderLinetype',
        (['out', 'retval'], POINTER(ACAD_LTYPE), 'Linetype')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the linetype of leader lines'), 'propput'],
        HRESULT,
        'LeaderLinetype',
        (['in'], ACAD_LTYPE, 'Linetype')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the line weight of leader lines'), 'propget'],
        HRESULT,
        'LeaderLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the line weight of leader lines'), 'propput'],
        HRESULT,
        'LeaderLineWeight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the type of leader arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadType',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'BlockName')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the type of leader arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadType',
        (['in'], AcDimArrowheadType, 'BlockName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the size of leader arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the size of leader arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the block to use as the custom arrowhead for leader lines of multileader'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ArrowheadBlock',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the block to use as the custom arrowhead for leader lines of multileader'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ArrowheadBlock',
        (['in'], BSTR, 'BlockName')
    ),
]

################################################################
# code template for IAcadMLeaderLeader implementation
# class IAcadMLeaderLeader_Impl(object):
#     def _get(self):
#         'Specifies the leader type'
#         #return Type
#     def _set(self, Type):
#         'Specifies the leader type'
#     LeaderType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the leader lines'
#         #return Type
#     def _set(self, Type):
#         'Specifies the color of the leader lines'
#     LeaderLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of leader lines'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of leader lines'
#     LeaderLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line weight of leader lines'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the line weight of leader lines'
#     LeaderLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of leader arrowhead'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the type of leader arrowhead'
#     ArrowheadType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of leader arrowhead'
#         #return size
#     def _set(self, size):
#         'Specifies the size of leader arrowhead'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for leader lines of multileader'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for leader lines of multileader'
#     ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
#


class AcadDocument(CoClass):
    """An AutoCAD drawing"""
    _reg_clsid_ = GUID('{345D3165-3889-4694-AB75-A91A27B217E8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDocument._com_interfaces_ = [IAcadDocument]
AcadDocument._outgoing_interfaces_ = [_DAcadDocumentEvents]


class AcadDocuments(CoClass):
    """The collection of all AutoCAD drawings open in the current session"""
    _reg_clsid_ = GUID('{F04A2229-71AE-4BC9-A300-99E058A40A8B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDocuments._com_interfaces_ = [IAcadDocuments]


class AcadToolbars(CoClass):
    """A collection of Toolbar objects representing all the toolbars loaded in the current AutoCAD session"""
    _reg_clsid_ = GUID('{6B2495AE-9752-4515-BD25-3718AC70350D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadToolbars(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A collection of Toolbar objects representing all the toolbars loaded in the current AutoCAD session"""
    _case_insensitive_ = True
    _iid_ = GUID('{DA8044CA-7817-4557-8055-A03564BCF6AF}')
    _idlflags_ = ['dual', 'oleautomation']


AcadToolbars._com_interfaces_ = [IAcadToolbars]


class AcadToolbar(CoClass):
    """An AutoCAD toolbar"""
    _reg_clsid_ = GUID('{A6E075A0-0A09-4928-BD6D-655C61716DC6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadToolbar._com_interfaces_ = [IAcadToolbar]


class IAcadState(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """AutoCAD State Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{935B3D12-E5A3-46F8-8CBC-24646D46FAD8}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadState._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies if AutoCAD is idle and accepting out of process Automation requests.'), 'propget'],
        HRESULT,
        'IsQuiescent',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
]

################################################################
# code template for IAcadState implementation
# class IAcadState_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def IsQuiescent(self):
#         'Specifies if AutoCAD is idle and accepting out of process Automation requests.'
#         #return pVal
#
# values for enumeration 'AcRegenType'
acActiveViewport = 0
acAllViewports = 1
AcRegenType = c_int  # enum


class IAcadSectionSettings(IAcadObject):
    """IAcadSectionSettings Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{BE0D8A6F-5C5D-4A81-8D29-FF6065AD9585}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcSectionType'
acSectionTypeLiveSection = 1
acSectionType2dSection = 2
acSectionType3dSection = 4
AcSectionType = c_int  # enum


class IAcadSectionTypeSettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """IAcadSectionTypeSettings Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{30B3E137-B298-4087-930B-C5C6EC24B47D}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSectionSettings._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current section type'), 'propget'],
        HRESULT,
        'CurrentSectionType',
        (['out', 'retval'], POINTER(AcSectionType), 'pVal')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current section type'), 'propput'],
        HRESULT,
        'CurrentSectionType',
        (['in'], AcSectionType, 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the section type settings object')],
        HRESULT,
        'GetSectionTypeSettings',
        (['in'], AcSectionType, 'secType'),
        (['out', 'retval'], POINTER(POINTER(IAcadSectionTypeSettings)), 'pUnk')
    ),
]

################################################################
# code template for IAcadSectionSettings implementation
# class IAcadSectionSettings_Impl(object):
#     def _get(self):
#         'Specifies the current section type'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the current section type'
#     CurrentSectionType = property(_get, _set, doc = _set.__doc__)
#
#     def GetSectionTypeSettings(self, secType):
#         'Gets the section type settings object'
#         #return pUnk
#


class AcadToolbarItem(CoClass):
    """A single button item on an AutoCAD toolbar"""
    _reg_clsid_ = GUID('{C71C7438-0568-4631-82AA-ABC2EBFC1D23}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadToolbarItem._com_interfaces_ = [IAcadToolbarItem]


class IAcadPolyfaceMesh(IAcadEntity):
    """IAcadPolyfaceMesh Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{3F119DE6-07FF-4202-BE58-9C89357846AC}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPolyfaceMesh._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the vertices of the mesh'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Vertices')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the vertices of the mesh'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Vertices')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the number of vertices in the mesh'), 'propget'],
        HRESULT,
        'NumberOfVertices',
        (['out', 'retval'], POINTER(c_int), 'NumVertices')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the number of faces in the mesh'), 'propget'],
        HRESULT,
        'NumberOfFaces',
        (['out', 'retval'], POINTER(c_int), 'NumFaces')
    ),
    COMMETHOD(
        [dispid(80), 'hidden', 'propput'],
        HRESULT,
        'Faces',
        (['in'], VARIANT, 'rhs')
    ),
]

################################################################
# code template for IAcadPolyfaceMesh implementation
# class IAcadPolyfaceMesh_Impl(object):
#     def _get(self):
#         'Specifies the vertices of the mesh'
#         #return Vertices
#     def _set(self, Vertices):
#         'Specifies the vertices of the mesh'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NumberOfVertices(self):
#         'Specifies the number of vertices in the mesh'
#         #return NumVertices
#
#     @property
#     def NumberOfFaces(self):
#         'Specifies the number of faces in the mesh'
#         #return NumFaces
#
#     def _set(self, rhs):
#         '-no docstring-'
#     Faces = property(fset = _set, doc = _set.__doc__)
#
# values for enumeration 'AcISOPenWidth'
acPenWidth013 = 13
acPenWidth018 = 18
acPenWidth025 = 25
acPenWidth035 = 35
acPenWidth050 = 50
acPenWidth070 = 70
acPenWidth100 = 100
acPenWidth140 = 140
acPenWidth200 = 200
acPenWidthUnk = -1
AcISOPenWidth = c_int  # enum


class AcadPointCloud(CoClass):
    """AutoCAD Point Cloud Object"""
    _reg_clsid_ = GUID('{5F75C60C-8B5A-4487-81E5-C7E46439B6A7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPointCloud(IAcadEntity):
    """AutoCAD Point Cloud Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{1BDD8CBB-3E79-4AE7-82E4-036E5BF4C92C}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPointCloud._com_interfaces_ = [IAcadPointCloud]
AcadPointCloud._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcBooleanType'
acUnion = 0
acIntersection = 1
acSubtraction = 2
AcBooleanType = c_int  # enum


class IAcadPointCloudEx2(IAcadPointCloudEx):
    """AutoCAD Point Cloud Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{5F6C65FE-8489-4AE0-B491-C5FCD096DCF4}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPointCloudEx2._methods_ = [
    COMMETHOD(
        [dispid(17), helpstring('Specifies if the point cloud has segmentation.'), 'propget'],
        HRESULT,
        'Segmentation',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
]

################################################################
# code template for IAcadPointCloudEx2 implementation
# class IAcadPointCloudEx2_Impl(object):
#     @property
#     def Segmentation(self):
#         'Specifies if the point cloud has segmentation.'
#         #return val
#


class AcadSubDMeshFace(CoClass):
    """AutoCAD SubDMesh Face Object"""
    _reg_clsid_ = GUID('{6473098E-B682-4316-A296-EC42AA9BCEDC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubDMeshFace._com_interfaces_ = [IAcadSubDMeshFace]
AcadSubDMeshFace._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadSubDMeshVertex(IAcadSubEntity):
    """AutoCAD SubDMesh Vertex Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{68DBCC59-ED28-45F6-9A34-27B3391ED962}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSubDMeshVertex._methods_ = [
    COMMETHOD(
        [dispid(3), helpstring('Specifies the coordinate'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'coord')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the coordinate'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'coord')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies if a crease is applied'), 'propget'],
        HRESULT,
        'CreaseType',
        (['out', 'retval'], POINTER(AcMeshCreaseType), 'Type')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies if a crease is applied'), 'propput'],
        HRESULT,
        'CreaseType',
        (['in'], AcMeshCreaseType, 'Type')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies crease level at which the crease starts losing its effect'), 'propget'],
        HRESULT,
        'CreaseLevel',
        (['out', 'retval'], POINTER(c_double), 'level')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies crease level at which the crease starts losing its effect'), 'propput'],
        HRESULT,
        'CreaseLevel',
        (['in'], c_double, 'level')
    ),
]

################################################################
# code template for IAcadSubDMeshVertex implementation
# class IAcadSubDMeshVertex_Impl(object):
#     def _get(self):
#         'Specifies the coordinate'
#         #return coord
#     def _set(self, coord):
#         'Specifies the coordinate'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if a crease is applied'
#         #return Type
#     def _set(self, Type):
#         'Specifies if a crease is applied'
#     CreaseType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies crease level at which the crease starts losing its effect'
#         #return level
#     def _set(self, level):
#         'Specifies crease level at which the crease starts losing its effect'
#     CreaseLevel = property(_get, _set, doc = _set.__doc__)
#


class IAcadLWPolyline(IAcadEntity):
    """AutoCAD Lightweight Polyline Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{8D9D7C6F-EB3F-41DA-BD16-369AFB031500}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadLWPolyline._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the lightweight polyline'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Coordinates')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the lightweight polyline'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Coordinates')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the lightweight polyline'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the lightweight polyline'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Adds a vertex to the lightweight polyline')],
        HRESULT,
        'AddVertex',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'vertex')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Explodes the lightweight polyline, and returns the sub-entities as an array of Object')],
        HRESULT,
        'Explode',
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the vertex bulge of the lightweight polyline')],
        HRESULT,
        'GetBulge',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(c_double), 'bulge')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Sets the vertex bulge of the lightweight polyline')],
        HRESULT,
        'SetBulge',
        (['in'], c_int, 'Index'),
        (['in'], c_double, 'bulge')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns segment width of the lightweight polyline')],
        HRESULT,
        'GetWidth',
        (['in'], c_int, 'Index'),
        (['out'], POINTER(c_double), 'StartWidth'),
        (['out'], POINTER(c_double), 'EndWidth')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Sets the segment width of the lightweight polyline')],
        HRESULT,
        'SetWidth',
        (['in'], c_int, 'Index'),
        (['in'], c_double, 'StartWidth'),
        (['in'], c_double, 'EndWidth')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the constant width for the polyline'), 'propget'],
        HRESULT,
        'ConstantWidth',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the constant width for the polyline'), 'propput'],
        HRESULT,
        'ConstantWidth',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Creates a new entity object by offsetting the lightweight polyline by a given distance')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
    COMMETHOD(
        [dispid(12), helpstring("Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system (Z coordinate of current vertex)"), 'propget'],
        HRESULT,
        'Elevation',
        (['out', 'retval'], POINTER(c_double), 'Elevation')
    ),
    COMMETHOD(
        [dispid(12), helpstring("Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system (Z coordinate of current vertex)"), 'propput'],
        HRESULT,
        'Elevation',
        (['in'], c_double, 'Elevation')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the area of the lightweight polyline'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'), 'propget'],
        HRESULT,
        'Closed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'), 'propput'],
        HRESULT,
        'Closed',
        (['in'], VARIANT_BOOL, 'fClose')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Determines whether linetype generation is Enabled or Disabled for the polyline'), 'propget'],
        HRESULT,
        'LinetypeGeneration',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bLinetypeGen')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Determines whether linetype generation is Enabled or Disabled for the polyline'), 'propput'],
        HRESULT,
        'LinetypeGeneration',
        (['in'], VARIANT_BOOL, 'bLinetypeGen')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the length of the lightweight polyline'), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_double), 'Length')
    ),
]

################################################################
# code template for IAcadLWPolyline implementation
# class IAcadLWPolyline_Impl(object):
#     def _get(self):
#         'Specifies the current vertex of the lightweight polyline'
#         #return Coordinates
#     def _set(self, Coordinates):
#         'Specifies the current vertex of the lightweight polyline'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the lightweight polyline'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the lightweight polyline'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def AddVertex(self, Index, vertex):
#         'Adds a vertex to the lightweight polyline'
#         #return 
#
#     def Explode(self):
#         'Explodes the lightweight polyline, and returns the sub-entities as an array of Object'
#         #return pArrayObjs
#
#     def GetBulge(self, Index):
#         'Returns the vertex bulge of the lightweight polyline'
#         #return bulge
#
#     def SetBulge(self, Index, bulge):
#         'Sets the vertex bulge of the lightweight polyline'
#         #return 
#
#     def GetWidth(self, Index):
#         'Returns segment width of the lightweight polyline'
#         #return StartWidth, EndWidth
#
#     def SetWidth(self, Index, StartWidth, EndWidth):
#         'Sets the segment width of the lightweight polyline'
#         #return 
#
#     def _get(self):
#         'Specifies the constant width for the polyline'
#         #return Width
#     def _set(self, Width):
#         'Specifies the constant width for the polyline'
#     ConstantWidth = property(_get, _set, doc = _set.__doc__)
#
#     def Offset(self, Distance):
#         'Creates a new entity object by offsetting the lightweight polyline by a given distance'
#         #return pOffsetCurves
#
#     def _get(self):
#         "Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system (Z coordinate of current vertex)"
#         #return Elevation
#     def _set(self, Elevation):
#         "Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system (Z coordinate of current vertex)"
#     Elevation = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Area(self):
#         'Specifies the area of the lightweight polyline'
#         #return Area
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'
#         #return fClose
#     def _set(self, fClose):
#         'Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'
#     Closed = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether linetype generation is Enabled or Disabled for the polyline'
#         #return bLinetypeGen
#     def _set(self, bLinetypeGen):
#         'Determines whether linetype generation is Enabled or Disabled for the polyline'
#     LinetypeGeneration = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Length(self):
#         'Specifies the length of the lightweight polyline'
#         #return Length
#


class IAcadTrace(IAcadEntity):
    """AutoCAD Trace Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{B5BF1FBC-DA40-4DB8-A739-6DF60E5634F8}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadTrace._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the coordinates of the trace'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'corners')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the coordinates of the trace'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'corners')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the trace'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the trace'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
]

################################################################
# code template for IAcadTrace implementation
# class IAcadTrace_Impl(object):
#     def _get(self):
#         'Specifies the coordinates of the trace'
#         #return corners
#     def _set(self, corners):
#         'Specifies the coordinates of the trace'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the trace'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the trace'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#


class IAcadPlotConfigurations(IAcadObject):
    """A collection of named plot settings"""
    _case_insensitive_ = True
    _iid_ = GUID('{6F5C4479-94B4-4ED6-B7B0-6D17841BA198}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPlotConfigurations._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadPlotConfiguration)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'ModelType'),
        (
            ['out', 'retval'],
            POINTER(POINTER(IAcadPlotConfiguration)),
            'pPlotConfig',
        )
    ),
]

################################################################
# code template for IAcadPlotConfigurations implementation
# class IAcadPlotConfigurations_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name, ModelType):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pPlotConfig
#


class IAcadPoint(IAcadEntity):
    """AutoCAD Point Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{EBA657C9-D850-4172-B4C4-7925D6481D70}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPoint._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for the position of the point or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Coordinates')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for the position of the point or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Coordinates')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the point'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the point'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
]

################################################################
# code template for IAcadPoint implementation
# class IAcadPoint_Impl(object):
#     def _get(self):
#         'Specify the X, Y, Z coordinate for the position of the point or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return Coordinates
#     def _set(self, Coordinates):
#         'Specify the X, Y, Z coordinate for the position of the point or use the Pick Point button to set X, Y, Z values simultaneously'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the point'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the point'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcSectionGeneration'
acSectionGenerationSourceAllObjects = 1
acSectionGenerationSourceSelectedObjects = 2
acSectionGenerationDestinationNewBlock = 16
acSectionGenerationDestinationReplaceBlock = 32
acSectionGenerationDestinationFile = 64
AcSectionGeneration = c_int  # enum

IAcadSectionTypeSettings._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the section generation options'), 'propget'],
        HRESULT,
        'GenerationOptions',
        (['out', 'retval'], POINTER(AcSectionGeneration), 'pVal')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the section generation options'), 'propput'],
        HRESULT,
        'GenerationOptions',
        (['in'], AcSectionGeneration, 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the source objects for section generation'), 'propget'],
        HRESULT,
        'SourceObjects',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the source objects for section generation'), 'propput'],
        HRESULT,
        'SourceObjects',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the destination block for section generation'), 'propget'],
        HRESULT,
        'DestinationBlock',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the destination block for section generation'), 'propput'],
        HRESULT,
        'DestinationBlock',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the destination file for section generation'), 'propget'],
        HRESULT,
        'DestinationFile',
        (['out', 'retval'], POINTER(BSTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the destination file for section generation'), 'propput'],
        HRESULT,
        'DestinationFile',
        (['in'], BSTR, 'pVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Specifies the color of intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Specifies the color of intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Specifies the layer of intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryLayer',
        (['out', 'retval'], POINTER(BSTR), 'Layer')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Specifies the layer of intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryLayer',
        (['in'], BSTR, 'Layer')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Specifies the linetype of intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Specifies the linetype of intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Specifies the linetype scale of intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryLinetypeScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Specifies the linetype scale of intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryLinetypeScale',
        (['in'], ACAD_NOUNITS, 'ltScale')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Specifies the plot style name of intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryPlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Specifies the plot style name of intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryPlotStyleName',
        (['in'], BSTR, 'plotStyle')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Specifies the line weight of intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryLineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Specifies the line weight of intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryLineweight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Specifies whether division lines are shown in intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryDivisionLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Specifies whether division lines are shown in intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryDivisionLines',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Specifies the visibility of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillVisible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Specifies the visibility of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillVisible',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Specifies the hatch pattern type for intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillHatchPatternType',
        (['out', 'retval'], POINTER(AcPatternType), 'pVal')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Specifies the hatch pattern type for intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillHatchPatternType',
        (['in'], AcPatternType, 'pVal')
    ),
    COMMETHOD(
        [dispid(73), helpstring('Specifies the hatch pattern name for intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillHatchPatternName',
        (['out', 'retval'], POINTER(BSTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(73), helpstring('Specifies the hatch pattern name for intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillHatchPatternName',
        (['in'], BSTR, 'pVal')
    ),
    COMMETHOD(
        [dispid(74), helpstring('Specifies the hatch angle for intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillHatchAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'pVal')
    ),
    COMMETHOD(
        [dispid(74), helpstring('Specifies the hatch angle for intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillHatchAngle',
        (['in'], ACAD_ANGLE, 'pVal')
    ),
    COMMETHOD(
        [dispid(75), helpstring('Specifies the hatch scale for intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillHatchScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'pVal')
    ),
    COMMETHOD(
        [dispid(75), helpstring('Specifies the hatch scale for intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillHatchScale',
        (['in'], ACAD_NOUNITS, 'pVal')
    ),
    COMMETHOD(
        [dispid(76), helpstring('Specifies the hatch spacing for intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillHatchSpacing',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(76), helpstring('Specifies the hatch spacing for intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillHatchSpacing',
        (['in'], c_double, 'pVal')
    ),
    COMMETHOD(
        [dispid(77), helpstring('Specifies the color of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(77), helpstring('Specifies the color of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(78), helpstring('Specifies the layer of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillLayer',
        (['out', 'retval'], POINTER(BSTR), 'Layer')
    ),
    COMMETHOD(
        [dispid(78), helpstring('Specifies the layer of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillLayer',
        (['in'], BSTR, 'Layer')
    ),
    COMMETHOD(
        [dispid(79), helpstring('Specifies the linetype of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(79), helpstring('Specifies the linetype of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype scale of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillLinetypeScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype scale of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillLinetypeScale',
        (['in'], ACAD_NOUNITS, 'ltScale')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the plot style name of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillPlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the plot style name of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillPlotStyleName',
        (['in'], BSTR, 'plotStyle')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the line weight of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillLineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the line weight of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillLineweight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Specifies the face transparency of intersection fill'), 'propget'],
        HRESULT,
        'IntersectionFillFaceTransparency',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Specifies the face transparency of intersection fill'), 'propput'],
        HRESULT,
        'IntersectionFillFaceTransparency',
        (['in'], c_int, 'pVal')
    ),
    COMMETHOD(
        [dispid(91), helpstring('Specifies the visibility of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesVisible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(91), helpstring('Specifies the visibility of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesVisible',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(92), helpstring('Specifies the hidden line visibility of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesHiddenLine',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(92), helpstring('Specifies the hidden line visibility of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesHiddenLine',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(93), helpstring('Specifies the color of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(93), helpstring('Specifies the color of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(94), helpstring('Specifies the layer of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesLayer',
        (['out', 'retval'], POINTER(BSTR), 'Layer')
    ),
    COMMETHOD(
        [dispid(94), helpstring('Specifies the layer of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesLayer',
        (['in'], BSTR, 'Layer')
    ),
    COMMETHOD(
        [dispid(95), helpstring('Specifies the linetype of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(95), helpstring('Specifies the linetype of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(96), helpstring('Specifies the linetype scale of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesLinetypeScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale')
    ),
    COMMETHOD(
        [dispid(96), helpstring('Specifies the linetype scale of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesLinetypeScale',
        (['in'], ACAD_NOUNITS, 'ltScale')
    ),
    COMMETHOD(
        [dispid(97), helpstring('Specifies the plot style name of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesPlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(97), helpstring('Specifies the plot style name of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesPlotStyleName',
        (['in'], BSTR, 'plotStyle')
    ),
    COMMETHOD(
        [dispid(98), helpstring('Specifies the line weight of background lines'), 'propget'],
        HRESULT,
        'BackgroundLinesLineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(98), helpstring('Specifies the line weight of background lines'), 'propput'],
        HRESULT,
        'BackgroundLinesLineweight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(111), helpstring('Specifies the visibility of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesVisible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(111), helpstring('Specifies the visibility of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesVisible',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(112), helpstring('Specifies the hidden line visibility of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesHiddenLine',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(112), helpstring('Specifies the hidden line visibility of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesHiddenLine',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(113), helpstring('Specifies the color of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(113), helpstring('Specifies the color of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(114), helpstring('Specifies the layer of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesLayer',
        (['out', 'retval'], POINTER(BSTR), 'Layer')
    ),
    COMMETHOD(
        [dispid(114), helpstring('Specifies the layer of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesLayer',
        (['in'], BSTR, 'Layer')
    ),
    COMMETHOD(
        [dispid(115), helpstring('Specifies the linetype of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(115), helpstring('Specifies the linetype of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(116), helpstring('Specifies the linetype scale of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesLinetypeScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale')
    ),
    COMMETHOD(
        [dispid(116), helpstring('Specifies the linetype scale of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesLinetypeScale',
        (['in'], ACAD_NOUNITS, 'ltScale')
    ),
    COMMETHOD(
        [dispid(117), helpstring('Specifies the plot style name of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesPlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(117), helpstring('Specifies the plot style name of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesPlotStyleName',
        (['in'], BSTR, 'plotStyle')
    ),
    COMMETHOD(
        [dispid(118), helpstring('Specifies the line weight of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesLineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(118), helpstring('Specifies the line weight of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesLineweight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(119), helpstring('Specifies the face transparency of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesFaceTransparency',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(119), helpstring('Specifies the face transparency of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesFaceTransparency',
        (['in'], c_int, 'pVal')
    ),
    COMMETHOD(
        [dispid(120), helpstring('Specifies the edge transparency of foreground lines'), 'propget'],
        HRESULT,
        'ForegroundLinesEdgeTransparency',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(120), helpstring('Specifies the edge transparency of foreground lines'), 'propput'],
        HRESULT,
        'ForegroundLinesEdgeTransparency',
        (['in'], c_int, 'pVal')
    ),
    COMMETHOD(
        [dispid(131), helpstring('Specifies the visibility of curve tangency lines'), 'propget'],
        HRESULT,
        'CurveTangencyLinesVisible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(131), helpstring('Specifies the visibility of curve tangency lines'), 'propput'],
        HRESULT,
        'CurveTangencyLinesVisible',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(132), helpstring('Specifies the color of curve tangency lines'), 'propget'],
        HRESULT,
        'CurveTangencyLinesColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(132), helpstring('Specifies the color of curve tangency lines'), 'propput'],
        HRESULT,
        'CurveTangencyLinesColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(133), helpstring('Specifies the layer of curve tangency lines'), 'propget'],
        HRESULT,
        'CurveTangencyLinesLayer',
        (['out', 'retval'], POINTER(BSTR), 'Layer')
    ),
    COMMETHOD(
        [dispid(133), helpstring('Specifies the layer of curve tangency lines'), 'propput'],
        HRESULT,
        'CurveTangencyLinesLayer',
        (['in'], BSTR, 'Layer')
    ),
    COMMETHOD(
        [dispid(134), helpstring('Specifies the linetype of curve tangency lines'), 'propget'],
        HRESULT,
        'CurveTangencyLinesLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(134), helpstring('Specifies the linetype of curve tangency lines'), 'propput'],
        HRESULT,
        'CurveTangencyLinesLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(135), helpstring('Specifies the linetype scale of curve tangency lines'), 'propget'],
        HRESULT,
        'CurveTangencyLinesLinetypeScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale')
    ),
    COMMETHOD(
        [dispid(135), helpstring('Specifies the linetype scale of curve tangency lines'), 'propput'],
        HRESULT,
        'CurveTangencyLinesLinetypeScale',
        (['in'], ACAD_NOUNITS, 'ltScale')
    ),
    COMMETHOD(
        [dispid(136), helpstring('Specifies the plot style name of curve tangency lines'), 'propget'],
        HRESULT,
        'CurveTangencyLinesPlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(136), helpstring('Specifies the plot style name of curve tangency lines'), 'propput'],
        HRESULT,
        'CurveTangencyLinesPlotStyleName',
        (['in'], BSTR, 'plotStyle')
    ),
    COMMETHOD(
        [dispid(137), helpstring('Specifies the line weight of curve tangency lines'), 'propget'],
        HRESULT,
        'CurveTangencyLinesLineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(137), helpstring('Specifies the line weight of curve tangency lines'), 'propput'],
        HRESULT,
        'CurveTangencyLinesLineweight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
]

################################################################
# code template for IAcadSectionTypeSettings implementation
# class IAcadSectionTypeSettings_Impl(object):
#     def _get(self):
#         'Specifies the section generation options'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the section generation options'
#     GenerationOptions = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the source objects for section generation'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the source objects for section generation'
#     SourceObjects = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the destination block for section generation'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the destination block for section generation'
#     DestinationBlock = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the destination file for section generation'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the destination file for section generation'
#     DestinationFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of intersection boundary'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the color of intersection boundary'
#     IntersectionBoundaryColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the layer of intersection boundary'
#         #return Layer
#     def _set(self, Layer):
#         'Specifies the layer of intersection boundary'
#     IntersectionBoundaryLayer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of intersection boundary'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of intersection boundary'
#     IntersectionBoundaryLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype scale of intersection boundary'
#         #return ltScale
#     def _set(self, ltScale):
#         'Specifies the linetype scale of intersection boundary'
#     IntersectionBoundaryLinetypeScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plot style name of intersection boundary'
#         #return plotStyle
#     def _set(self, plotStyle):
#         'Specifies the plot style name of intersection boundary'
#     IntersectionBoundaryPlotStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line weight of intersection boundary'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the line weight of intersection boundary'
#     IntersectionBoundaryLineweight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether division lines are shown in intersection boundary'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies whether division lines are shown in intersection boundary'
#     IntersectionBoundaryDivisionLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the visibility of intersection fill'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the visibility of intersection fill'
#     IntersectionFillVisible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the hatch pattern type for intersection fill'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the hatch pattern type for intersection fill'
#     IntersectionFillHatchPatternType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the hatch pattern name for intersection fill'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the hatch pattern name for intersection fill'
#     IntersectionFillHatchPatternName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the hatch angle for intersection fill'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the hatch angle for intersection fill'
#     IntersectionFillHatchAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the hatch scale for intersection fill'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the hatch scale for intersection fill'
#     IntersectionFillHatchScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the hatch spacing for intersection fill'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the hatch spacing for intersection fill'
#     IntersectionFillHatchSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of intersection fill'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the color of intersection fill'
#     IntersectionFillColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the layer of intersection fill'
#         #return Layer
#     def _set(self, Layer):
#         'Specifies the layer of intersection fill'
#     IntersectionFillLayer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of intersection fill'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of intersection fill'
#     IntersectionFillLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype scale of intersection fill'
#         #return ltScale
#     def _set(self, ltScale):
#         'Specifies the linetype scale of intersection fill'
#     IntersectionFillLinetypeScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plot style name of intersection fill'
#         #return plotStyle
#     def _set(self, plotStyle):
#         'Specifies the plot style name of intersection fill'
#     IntersectionFillPlotStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line weight of intersection fill'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the line weight of intersection fill'
#     IntersectionFillLineweight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the face transparency of intersection fill'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the face transparency of intersection fill'
#     IntersectionFillFaceTransparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the visibility of background lines'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the visibility of background lines'
#     BackgroundLinesVisible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the hidden line visibility of background lines'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the hidden line visibility of background lines'
#     BackgroundLinesHiddenLine = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of background lines'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the color of background lines'
#     BackgroundLinesColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the layer of background lines'
#         #return Layer
#     def _set(self, Layer):
#         'Specifies the layer of background lines'
#     BackgroundLinesLayer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of background lines'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of background lines'
#     BackgroundLinesLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype scale of background lines'
#         #return ltScale
#     def _set(self, ltScale):
#         'Specifies the linetype scale of background lines'
#     BackgroundLinesLinetypeScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plot style name of background lines'
#         #return plotStyle
#     def _set(self, plotStyle):
#         'Specifies the plot style name of background lines'
#     BackgroundLinesPlotStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line weight of background lines'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the line weight of background lines'
#     BackgroundLinesLineweight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the visibility of foreground lines'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the visibility of foreground lines'
#     ForegroundLinesVisible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the hidden line visibility of foreground lines'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the hidden line visibility of foreground lines'
#     ForegroundLinesHiddenLine = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of foreground lines'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the color of foreground lines'
#     ForegroundLinesColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the layer of foreground lines'
#         #return Layer
#     def _set(self, Layer):
#         'Specifies the layer of foreground lines'
#     ForegroundLinesLayer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of foreground lines'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of foreground lines'
#     ForegroundLinesLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype scale of foreground lines'
#         #return ltScale
#     def _set(self, ltScale):
#         'Specifies the linetype scale of foreground lines'
#     ForegroundLinesLinetypeScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plot style name of foreground lines'
#         #return plotStyle
#     def _set(self, plotStyle):
#         'Specifies the plot style name of foreground lines'
#     ForegroundLinesPlotStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line weight of foreground lines'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the line weight of foreground lines'
#     ForegroundLinesLineweight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the face transparency of foreground lines'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the face transparency of foreground lines'
#     ForegroundLinesFaceTransparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the edge transparency of foreground lines'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the edge transparency of foreground lines'
#     ForegroundLinesEdgeTransparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the visibility of curve tangency lines'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the visibility of curve tangency lines'
#     CurveTangencyLinesVisible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of curve tangency lines'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the color of curve tangency lines'
#     CurveTangencyLinesColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the layer of curve tangency lines'
#         #return Layer
#     def _set(self, Layer):
#         'Specifies the layer of curve tangency lines'
#     CurveTangencyLinesLayer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of curve tangency lines'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of curve tangency lines'
#     CurveTangencyLinesLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype scale of curve tangency lines'
#         #return ltScale
#     def _set(self, ltScale):
#         'Specifies the linetype scale of curve tangency lines'
#     CurveTangencyLinesLinetypeScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plot style name of curve tangency lines'
#         #return plotStyle
#     def _set(self, plotStyle):
#         'Specifies the plot style name of curve tangency lines'
#     CurveTangencyLinesPlotStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line weight of curve tangency lines'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the line weight of curve tangency lines'
#     CurveTangencyLinesLineweight = property(_get, _set, doc = _set.__doc__)
#


class IAcadLayouts(IAcadObject):
    """The collection of all layouts in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{8C3EC56B-ADA0-4FC9-8AAA-3B864ED5B633}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadLayouts._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadLayout)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadLayout)), 'pLayout')
    ),
]

################################################################
# code template for IAcadLayouts implementation
# class IAcadLayouts_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pLayout
#
# values for enumeration 'AcAngleUnits'
acDegrees = 0
acDegreeMinuteSeconds = 1
acGrads = 2
acRadians = 3
AcAngleUnits = c_int  # enum
# values for enumeration 'AcSaveAsType'
acUnknown = -1
acR12_dxf = 1
acR13_dwg = 4
acR13_dxf = 5
acR14_dwg = 8
acR14_dxf = 9
ac2000_dwg = 12
ac2000_dxf = 13
ac2000_Template = 14
ac2004_dwg = 24
ac2004_dxf = 25
ac2004_Template = 26
ac2007_dwg = 36
ac2007_dxf = 37
ac2007_Template = 38
ac2010_dwg = 48
ac2010_dxf = 49
ac2010_Template = 50
ac2013_dwg = 60
ac2013_dxf = 61
ac2013_Template = 62
ac2018_dwg = 64
ac2018_dxf = 65
ac2018_Template = 66
acNative = 64
acR15_dwg = 12
acR15_dxf = 13
acR15_Template = 14
acR18_dwg = 24
acR18_dxf = 25
acR18_Template = 26
AcSaveAsType = c_int  # enum


class AcadSubDMeshEdge(CoClass):
    """AutoCAD SubDMesh Edge Object"""
    _reg_clsid_ = GUID('{7655FFC4-20D8-4336-BFFB-ECCA54C0D35D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubDMeshEdge._com_interfaces_ = [IAcadSubDMeshEdge]
AcadSubDMeshEdge._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadSurface(IAcadEntity):
    """IAcadSurface Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{724F09CB-3840-4EFE-AE5E-46633F2BEE21}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadNurbSurface(IAcadSurface):
    """AutoCAD NURBS Surface Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{2471D82E-4288-49EB-8DEB-8344868B8E98}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcWireframeType'
acIsolines = 0
acIsoparms = 1
AcWireframeType = c_int  # enum

IAcadSurface._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Indicates the type of surface'), 'propget'],
        HRESULT,
        'SurfaceType',
        (['out', 'retval'], POINTER(BSTR), 'SurfaceType')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the number of U isolines that are displayed'), 'propget'],
        HRESULT,
        'UIsolineDensity',
        (['out', 'retval'], POINTER(c_int), 'density')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the number of U isolines that are displayed'), 'propput'],
        HRESULT,
        'UIsolineDensity',
        (['in'], c_int, 'density')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the number of V isolines that are displayed'), 'propget'],
        HRESULT,
        'VIsolineDensity',
        (['out', 'retval'], POINTER(c_int), 'density')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the number of V isolines that are displayed'), 'propput'],
        HRESULT,
        'VIsolineDensity',
        (['in'], c_int, 'density')
    ),
    COMMETHOD(
        [dispid(160), helpstring('Specifies the wireframe type of the selected surface'), 'propget'],
        HRESULT,
        'WireframeType',
        (['out', 'retval'], POINTER(AcWireframeType), 'Type')
    ),
    COMMETHOD(
        [dispid(160), helpstring('Specifies the wireframe type of the selected surface'), 'propput'],
        HRESULT,
        'WireframeType',
        (['in'], AcWireframeType, 'Type')
    ),
    COMMETHOD(
        [dispid(176), helpstring('Indicates if the surface is associated with another surface and also allows you to turn off associativity'), 'propget'],
        HRESULT,
        'MaintainAssociativity',
        (['out', 'retval'], POINTER(c_int), 'maintainAssoc')
    ),
    COMMETHOD(
        [dispid(176), helpstring('Indicates if the surface is associated with another surface and also allows you to turn off associativity'), 'propput'],
        HRESULT,
        'MaintainAssociativity',
        (['in'], c_int, 'maintainAssoc')
    ),
    COMMETHOD(
        [dispid(177), helpstring('Higlights dependent surfaces'), 'propget'],
        HRESULT,
        'ShowAssociativity',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled')
    ),
    COMMETHOD(
        [dispid(177), helpstring('Higlights dependent surfaces'), 'propput'],
        HRESULT,
        'ShowAssociativity',
        (['in'], VARIANT_BOOL, 'bEnabled')
    ),
    COMMETHOD(
        [dispid(161), helpstring('Indicates the extension distances of the edges'), 'propget'],
        HRESULT,
        'EdgeExtensionDistances',
        (['out', 'retval'], POINTER(VARIANT), 'extDistances')
    ),
    COMMETHOD(
        [dispid(161), helpstring('Indicates the extension distances of the edges'), 'propput'],
        HRESULT,
        'EdgeExtensionDistances',
        (['in'], VARIANT, 'extDistances')
    ),
    COMMETHOD(
        [dispid(193), helpstring('Specifies whether or not the Mtext is annotative'), 'propget'],
        HRESULT,
        'SurfTrimAssociativity',
        (['out', 'retval'], POINTER(VARIANT), 'associative')
    ),
    COMMETHOD(
        [dispid(193), helpstring('Specifies whether or not the Mtext is annotative'), 'propput'],
        HRESULT,
        'SurfTrimAssociativity',
        (['in'], VARIANT, 'associative')
    ),
]

################################################################
# code template for IAcadSurface implementation
# class IAcadSurface_Impl(object):
#     @property
#     def SurfaceType(self):
#         'Indicates the type of surface'
#         #return SurfaceType
#
#     def _get(self):
#         'Specifies the number of U isolines that are displayed'
#         #return density
#     def _set(self, density):
#         'Specifies the number of U isolines that are displayed'
#     UIsolineDensity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the number of V isolines that are displayed'
#         #return density
#     def _set(self, density):
#         'Specifies the number of V isolines that are displayed'
#     VIsolineDensity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the wireframe type of the selected surface'
#         #return Type
#     def _set(self, Type):
#         'Specifies the wireframe type of the selected surface'
#     WireframeType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Indicates if the surface is associated with another surface and also allows you to turn off associativity'
#         #return maintainAssoc
#     def _set(self, maintainAssoc):
#         'Indicates if the surface is associated with another surface and also allows you to turn off associativity'
#     MaintainAssociativity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Higlights dependent surfaces'
#         #return bEnabled
#     def _set(self, bEnabled):
#         'Higlights dependent surfaces'
#     ShowAssociativity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Indicates the extension distances of the edges'
#         #return extDistances
#     def _set(self, extDistances):
#         'Indicates the extension distances of the edges'
#     EdgeExtensionDistances = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether or not the Mtext is annotative'
#         #return associative
#     def _set(self, associative):
#         'Specifies whether or not the Mtext is annotative'
#     SurfTrimAssociativity = property(_get, _set, doc = _set.__doc__)
#

IAcadNurbSurface._methods_ = [
    COMMETHOD(
        [dispid(12), helpstring('Specifies whether displaying the CV Hull for NURBS surface'), 'propget'],
        HRESULT,
        'CvHullDisplay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Display')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies whether displaying the CV Hull for NURBS surface'), 'propput'],
        HRESULT,
        'CvHullDisplay',
        (['in'], VARIANT_BOOL, 'Display')
    ),
]

################################################################
# code template for IAcadNurbSurface implementation
# class IAcadNurbSurface_Impl(object):
#     def _get(self):
#         'Specifies whether displaying the CV Hull for NURBS surface'
#         #return Display
#     def _set(self, Display):
#         'Specifies whether displaying the CV Hull for NURBS surface'
#     CvHullDisplay = property(_get, _set, doc = _set.__doc__)
#


class IAcadComparedReference(IAcadExternalReference):
    """IAcadExternalReference Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{781C96D4-FE49-4731-A765-9F7B4FA35EFF}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadComparedReference._methods_ = [
]

################################################################
# code template for IAcadComparedReference implementation
# class IAcadComparedReference_Impl(object):


class IAcadMLine(IAcadEntity):
    """IAcadMLine Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{37341D94-0544-4A89-9AFA-B7D604A1EEF5}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcMLineJustification'
acTop = 0
acZero = 1
acBottom = 2
AcMLineJustification = c_int  # enum

IAcadMLine._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the Mline style name'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the coordinates for each vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Vertices')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the coordinates for each vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Vertices')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the justification of the MLine'), 'propget'],
        HRESULT,
        'Justification',
        (['out', 'retval'], POINTER(AcMLineJustification), 'Justification')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the justification of the MLine'), 'propput'],
        HRESULT,
        'Justification',
        (['in'], AcMLineJustification, 'Justification')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the scale of the MLine'), 'propget'],
        HRESULT,
        'MLineScale',
        (['out', 'retval'], POINTER(c_double), 'scale')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the scale of the MLine'), 'propput'],
        HRESULT,
        'MLineScale',
        (['in'], c_double, 'scale')
    ),
]

################################################################
# code template for IAcadMLine implementation
# class IAcadMLine_Impl(object):
#     @property
#     def StyleName(self):
#         'Specifies the Mline style name'
#         #return Name
#
#     def _get(self):
#         'Specifies the coordinates for each vertex in the object'
#         #return Vertices
#     def _set(self, Vertices):
#         'Specifies the coordinates for each vertex in the object'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the justification of the MLine'
#         #return Justification
#     def _set(self, Justification):
#         'Specifies the justification of the MLine'
#     Justification = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the scale of the MLine'
#         #return scale
#     def _set(self, scale):
#         'Specifies the scale of the MLine'
#     MLineScale = property(_get, _set, doc = _set.__doc__)
#


class IAcadText(IAcadEntity):
    """AutoCAD Text Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{C55A31FC-EF95-428D-B7BB-083A692DFC8C}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcAlignment'
acAlignmentLeft = 0
acAlignmentCenter = 1
acAlignmentRight = 2
acAlignmentAligned = 3
acAlignmentMiddle = 4
acAlignmentFit = 5
acAlignmentTopLeft = 6
acAlignmentTopCenter = 7
acAlignmentTopRight = 8
acAlignmentMiddleLeft = 9
acAlignmentMiddleCenter = 10
acAlignmentMiddleRight = 11
acAlignmentBottomLeft = 12
acAlignmentBottomCenter = 13
acAlignmentBottomRight = 14
AcAlignment = c_int  # enum

IAcadText._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the text string of the text'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the text string of the text'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the style name of the text'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the style name of the text'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies both text height and text orientation by designating the endpoints of the baseline'), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(AcAlignment), 'align')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies both text height and text orientation by designating the endpoints of the baseline'), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], AcAlignment, 'align')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the horizontal alignment of the text'), 'hidden', 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(AcHorizontalAlignment), 'horizAlign')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the horizontal alignment of the text'), 'hidden', 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], AcHorizontalAlignment, 'horizAlign')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the vertical alignment of the text'), 'hidden', 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(AcVerticalAlignment), 'vertiAlign')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the vertical alignment of the text'), 'hidden', 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], AcVerticalAlignment, 'vertiAlign')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the height of the text'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the height of the text'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the rotation angle of the text'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the rotation angle of the text'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the width scale factor of the text'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the width scale factor of the text'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'scalFactor')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the oblique angle of the text'), 'propget'],
        HRESULT,
        'ObliqueAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the oblique angle of the text'), 'propput'],
        HRESULT,
        'ObliqueAngle',
        (['in'], ACAD_ANGLE, 'obliAngle')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specify the X, Y, Z coordinate of the alignment point of the text'), 'propget'],
        HRESULT,
        'TextAlignmentPoint',
        (['out', 'retval'], POINTER(VARIANT), 'alignPoint')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specify the X, Y, Z coordinate of the alignment point of the text'), 'propput'],
        HRESULT,
        'TextAlignmentPoint',
        (['in'], VARIANT, 'alignPoint')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specify the X, Y, Z coordinate of the insertion point of the text'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specify the X, Y, Z coordinate of the insertion point of the text'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the attribute text generation flag'), 'nonbrowsable', 'propget'],
        HRESULT,
        'TextGenerationFlag',
        (['out', 'retval'], POINTER(c_int), 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the attribute text generation flag'), 'nonbrowsable', 'propput'],
        HRESULT,
        'TextGenerationFlag',
        (['in'], c_int, 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the thickness of the text'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the thickness of the text'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Determines whether the text is upside down or not'), 'propget'],
        HRESULT,
        'UpsideDown',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'UpsideDown')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Determines whether the text is upside down or not'), 'propput'],
        HRESULT,
        'UpsideDown',
        (['in'], VARIANT_BOOL, 'UpsideDown')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Determines whether the text is backward or not'), 'propget'],
        HRESULT,
        'Backward',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Backward')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Determines whether the text is backward or not'), 'propput'],
        HRESULT,
        'Backward',
        (['in'], VARIANT_BOOL, 'Backward')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Returns the text string with field codes of the text')],
        HRESULT,
        'FieldCode',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
]

################################################################
# code template for IAcadText implementation
# class IAcadText_Impl(object):
#     def _get(self):
#         'Specifies the text string of the text'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the text'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style name of the text'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the style name of the text'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies both text height and text orientation by designating the endpoints of the baseline'
#         #return align
#     def _set(self, align):
#         'Specifies both text height and text orientation by designating the endpoints of the baseline'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the horizontal alignment of the text'
#         #return horizAlign
#     def _set(self, horizAlign):
#         'Specifies the horizontal alignment of the text'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the vertical alignment of the text'
#         #return vertiAlign
#     def _set(self, vertiAlign):
#         'Specifies the vertical alignment of the text'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the text'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the text'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the text'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the text'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width scale factor of the text'
#         #return scalFactor
#     def _set(self, scalFactor):
#         'Specifies the width scale factor of the text'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the oblique angle of the text'
#         #return obliAngle
#     def _set(self, obliAngle):
#         'Specifies the oblique angle of the text'
#     ObliqueAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the alignment point of the text'
#         #return alignPoint
#     def _set(self, alignPoint):
#         'Specify the X, Y, Z coordinate of the alignment point of the text'
#     TextAlignmentPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the insertion point of the text'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specify the X, Y, Z coordinate of the insertion point of the text'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the attribute text generation flag'
#         #return textGenFlag
#     def _set(self, textGenFlag):
#         'Specifies the attribute text generation flag'
#     TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the text'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the text'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the text is upside down or not'
#         #return UpsideDown
#     def _set(self, UpsideDown):
#         'Determines whether the text is upside down or not'
#     UpsideDown = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the text is backward or not'
#         #return Backward
#     def _set(self, Backward):
#         'Determines whether the text is backward or not'
#     Backward = property(_get, _set, doc = _set.__doc__)
#
#     def FieldCode(self):
#         'Returns the text string with field codes of the text'
#         #return bstrText
#
# values for enumeration 'AcUnits'
acDefaultUnits = -1
acScientific = 1
acDecimal = 2
acEngineering = 3
acArchitectural = 4
acFractional = 5
AcUnits = c_int  # enum


class IAcadSpline(IAcadEntity):
    """AutoCAD Spline Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{FCEC9D4D-1511-46EC-8974-52E8DD8D0833}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcSplineKnotParameterizationType'
acChord = 0
acSqrtChord = 1
acUniformParam = 2
acCustomParameterization = 15
AcSplineKnotParameterizationType = c_int  # enum
# values for enumeration 'AcSplineFrameType'
acShow = 0
acHide = 1
AcSplineFrameType = c_int  # enum
# values for enumeration 'AcSplineMethodType'
acFit = 0
acControlVertices = 1
AcSplineMethodType = c_int  # enum

IAcadSpline._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the number of control points of the spline'), 'propget'],
        HRESULT,
        'NumberOfControlPoints',
        (['out', 'retval'], POINTER(c_int), 'numCtrlPoints')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the current control point of the spline'), 'propget'],
        HRESULT,
        'ControlPoints',
        (['out', 'retval'], POINTER(VARIANT), 'controlPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the current control point of the spline'), 'propput'],
        HRESULT,
        'ControlPoints',
        (['in'], VARIANT, 'controlPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the number of fit points of the spline'), 'propget'],
        HRESULT,
        'NumberOfFitPoints',
        (['out', 'retval'], POINTER(c_int), 'numFitPoints')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the current fit point of the spline'), 'propget'],
        HRESULT,
        'FitPoints',
        (['out', 'retval'], POINTER(VARIANT), 'fitPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the current fit point of the spline'), 'propput'],
        HRESULT,
        'FitPoints',
        (['in'], VARIANT, 'fitPoint')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the degree of the spline'), 'propget'],
        HRESULT,
        'Degree',
        (['out', 'retval'], POINTER(c_int), 'Degree')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies whether the spline is open or closed'), 'propget'],
        HRESULT,
        'Closed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Determines the whether the spline is planar'), 'propget'],
        HRESULT,
        'IsPlanar',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fPlanar')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Determines if the given spline is planar'), 'nonbrowsable', 'propget'],
        HRESULT,
        'IsRational',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fRational')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Determines if the given spline is periodic'), 'propget'],
        HRESULT,
        'IsPeriodic',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fPeriodic')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specify the X, Y, Z coordinate for start tangent of the spline'), 'propget'],
        HRESULT,
        'StartTangent',
        (['out', 'retval'], POINTER(VARIANT), 'StartTangent')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specify the X, Y, Z coordinate for start tangent of the spline'), 'propput'],
        HRESULT,
        'StartTangent',
        (['in'], VARIANT, 'StartTangent')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specify the X, Y, Z coordinate for end tangent of the spline'), 'propget'],
        HRESULT,
        'EndTangent',
        (['out', 'retval'], POINTER(VARIANT), 'EndTangent')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specify the X, Y, Z coordinate for end tangent of the spline'), 'propput'],
        HRESULT,
        'EndTangent',
        (['in'], VARIANT, 'EndTangent')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the fit tolerance of the spline'), 'propget'],
        HRESULT,
        'FitTolerance',
        (['out', 'retval'], POINTER(c_double), 'fitTol')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the fit tolerance of the spline'), 'propput'],
        HRESULT,
        'FitTolerance',
        (['in'], c_double, 'fitTol')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the area of the spline'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Sets the indexed control point of the spline at a specified point')],
        HRESULT,
        'SetControlPoint',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'controlPoint')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Returns the control point of the spline at a given index')],
        HRESULT,
        'GetControlPoint',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'controlPoint')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Sets the indexed fit point of the spline at a specified point')],
        HRESULT,
        'SetFitPoint',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'fitPoint')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Returns the fit point of the spline at a given index')],
        HRESULT,
        'GetFitPoint',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'fitPoint')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Sets the weight of the spline at a given control point index')],
        HRESULT,
        'SetWeight',
        (['in'], c_int, 'Index'),
        (['in'], c_double, 'weight')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Returns the weight of the spline at a given control point index')],
        HRESULT,
        'GetWeight',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(c_double), 'weight')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Adds the fit point to the spline at a given index')],
        HRESULT,
        'AddFitPoint',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'fitPoint')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Deletes the fit point of the spline at a given index')],
        HRESULT,
        'DeleteFitPoint',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Elevates the order of the spline')],
        HRESULT,
        'ElevateOrder',
        (['in'], c_int, 'Order')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Creates a new entity object by offsetting the spline by a given value')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Purges the fit data of the spline')],
        HRESULT,
        'PurgeFitData',
    ),
    COMMETHOD(
        [dispid(25), helpstring('Reverses the direction of the spline')],
        HRESULT,
        'Reverse',
    ),
    COMMETHOD(
        [dispid(26), helpstring('Gets the knot vector for a spline'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Knots',
        (['out', 'retval'], POINTER(VARIANT), 'KnotValues')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Gets the knot vector for a spline'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Knots',
        (['in'], VARIANT, 'KnotValues')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the weight vector for spline'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Weights',
        (['out', 'retval'], POINTER(VARIANT), 'WeightValues')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the weight vector for spline'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Weights',
        (['in'], VARIANT, 'WeightValues')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Specifies knot spacing when spline was created'), 'propget'],
        HRESULT,
        'KnotParameterization',
        (
            ['out', 'retval'],
            POINTER(AcSplineKnotParameterizationType),
            'knotParamVal',
        )
    ),
    COMMETHOD(
        [dispid(28), helpstring('Specifies knot spacing when spline was created'), 'propput'],
        HRESULT,
        'KnotParameterization',
        (['in'], AcSplineKnotParameterizationType, 'knotParamVal')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Specifies whether displaying the CV Hull for spline'), 'propget'],
        HRESULT,
        'SplineFrame',
        (['out', 'retval'], POINTER(AcSplineFrameType), 'show')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Specifies whether displaying the CV Hull for spline'), 'propput'],
        HRESULT,
        'SplineFrame',
        (['in'], AcSplineFrameType, 'show')
    ),
    COMMETHOD(
        [dispid(30), helpstring("Specifies whether fit points or CV's are displayed when selected"), 'propget'],
        HRESULT,
        'SplineMethod',
        (['out', 'retval'], POINTER(AcSplineMethodType), 'method')
    ),
    COMMETHOD(
        [dispid(30), helpstring("Specifies whether fit points or CV's are displayed when selected"), 'propput'],
        HRESULT,
        'SplineMethod',
        (['in'], AcSplineMethodType, 'method')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Specifies the degree of the spline'), 'propput'],
        HRESULT,
        'Degree2',
        (['in'], c_int, 'Degree')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Specifies the degree of the spline'), 'propget'],
        HRESULT,
        'Degree2',
        (['out', 'retval'], POINTER(c_int), 'Degree')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Specifies whether the spline is open or closed'), 'propput'],
        HRESULT,
        'Closed2',
        (['in'], VARIANT_BOOL, 'fClose')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Specifies whether the spline is open or closed'), 'propget'],
        HRESULT,
        'Closed2',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose')
    ),
]

################################################################
# code template for IAcadSpline implementation
# class IAcadSpline_Impl(object):
#     @property
#     def NumberOfControlPoints(self):
#         'Specifies the number of control points of the spline'
#         #return numCtrlPoints
#
#     def _get(self):
#         'Specifies the current control point of the spline'
#         #return controlPoint
#     def _set(self, controlPoint):
#         'Specifies the current control point of the spline'
#     ControlPoints = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NumberOfFitPoints(self):
#         'Specifies the number of fit points of the spline'
#         #return numFitPoints
#
#     def _get(self):
#         'Specifies the current fit point of the spline'
#         #return fitPoint
#     def _set(self, fitPoint):
#         'Specifies the current fit point of the spline'
#     FitPoints = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Degree(self):
#         'Specifies the degree of the spline'
#         #return Degree
#
#     @property
#     def Closed(self):
#         'Specifies whether the spline is open or closed'
#         #return fClose
#
#     @property
#     def IsPlanar(self):
#         'Determines the whether the spline is planar'
#         #return fPlanar
#
#     @property
#     def IsRational(self):
#         'Determines if the given spline is planar'
#         #return fRational
#
#     @property
#     def IsPeriodic(self):
#         'Determines if the given spline is periodic'
#         #return fPeriodic
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate for start tangent of the spline'
#         #return StartTangent
#     def _set(self, StartTangent):
#         'Specify the X, Y, Z coordinate for start tangent of the spline'
#     StartTangent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate for end tangent of the spline'
#         #return EndTangent
#     def _set(self, EndTangent):
#         'Specify the X, Y, Z coordinate for end tangent of the spline'
#     EndTangent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the fit tolerance of the spline'
#         #return fitTol
#     def _set(self, fitTol):
#         'Specifies the fit tolerance of the spline'
#     FitTolerance = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Area(self):
#         'Specifies the area of the spline'
#         #return Area
#
#     def SetControlPoint(self, Index, controlPoint):
#         'Sets the indexed control point of the spline at a specified point'
#         #return 
#
#     def GetControlPoint(self, Index):
#         'Returns the control point of the spline at a given index'
#         #return controlPoint
#
#     def SetFitPoint(self, Index, fitPoint):
#         'Sets the indexed fit point of the spline at a specified point'
#         #return 
#
#     def GetFitPoint(self, Index):
#         'Returns the fit point of the spline at a given index'
#         #return fitPoint
#
#     def SetWeight(self, Index, weight):
#         'Sets the weight of the spline at a given control point index'
#         #return 
#
#     def GetWeight(self, Index):
#         'Returns the weight of the spline at a given control point index'
#         #return weight
#
#     def AddFitPoint(self, Index, fitPoint):
#         'Adds the fit point to the spline at a given index'
#         #return 
#
#     def DeleteFitPoint(self, Index):
#         'Deletes the fit point of the spline at a given index'
#         #return 
#
#     def ElevateOrder(self, Order):
#         'Elevates the order of the spline'
#         #return 
#
#     def Offset(self, Distance):
#         'Creates a new entity object by offsetting the spline by a given value'
#         #return pOffsetCurves
#
#     def PurgeFitData(self):
#         'Purges the fit data of the spline'
#         #return 
#
#     def Reverse(self):
#         'Reverses the direction of the spline'
#         #return 
#
#     def _get(self):
#         'Gets the knot vector for a spline'
#         #return KnotValues
#     def _set(self, KnotValues):
#         'Gets the knot vector for a spline'
#     Knots = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Gets the weight vector for spline'
#         #return WeightValues
#     def _set(self, WeightValues):
#         'Gets the weight vector for spline'
#     Weights = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies knot spacing when spline was created'
#         #return knotParamVal
#     def _set(self, knotParamVal):
#         'Specifies knot spacing when spline was created'
#     KnotParameterization = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether displaying the CV Hull for spline'
#         #return show
#     def _set(self, show):
#         'Specifies whether displaying the CV Hull for spline'
#     SplineFrame = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies whether fit points or CV's are displayed when selected"
#         #return method
#     def _set(self, method):
#         "Specifies whether fit points or CV's are displayed when selected"
#     SplineMethod = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the degree of the spline'
#         #return Degree
#     def _set(self, Degree):
#         'Specifies the degree of the spline'
#     Degree2 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether the spline is open or closed'
#         #return fClose
#     def _set(self, fClose):
#         'Specifies whether the spline is open or closed'
#     Closed2 = property(_get, _set, doc = _set.__doc__)
#


class IAcadPolyline(IAcadEntity):
    """AutoCAD Polyline Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{408FA420-B10A-44A2-BA9A-8F4B363F269D}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPolyline._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the polyline'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Coordinates')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the polyline'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Coordinates')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the polyline'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the thickness of the polyline'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Appends a vertex to the polyline')],
        HRESULT,
        'AppendVertex',
        (['in'], VARIANT, 'vertex')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Explodes the polyline and returns the sub-entities as an array of Object')],
        HRESULT,
        'Explode',
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the vertex bulge of the polyline')],
        HRESULT,
        'GetBulge',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(c_double), 'bulge')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Sets the vertex bulge of the polyline')],
        HRESULT,
        'SetBulge',
        (['in'], c_int, 'Index'),
        (['in'], c_double, 'bulge')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns segment width of the polyline')],
        HRESULT,
        'GetWidth',
        (['in'], c_int, 'Index'),
        (['out'], POINTER(c_double), 'StartWidth'),
        ([], POINTER(c_double), 'EndWidth')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Sets the segment width of the polyline')],
        HRESULT,
        'SetWidth',
        (['in'], c_int, 'Index'),
        (['in'], c_double, 'StartWidth'),
        ([], c_double, 'EndWidth')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the constant width for the polyline'), 'propget'],
        HRESULT,
        'ConstantWidth',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the constant width for the polyline'), 'propput'],
        HRESULT,
        'ConstantWidth',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Creates a new entity object by offsetting the polyline by a specified distance')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
    COMMETHOD(
        [dispid(12), helpstring("Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system"), 'propget'],
        HRESULT,
        'Elevation',
        (['out', 'retval'], POINTER(c_double), 'Elevation')
    ),
    COMMETHOD(
        [dispid(12), helpstring("Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system"), 'propput'],
        HRESULT,
        'Elevation',
        (['in'], c_double, 'Elevation')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Applies a fit curve or spline type to a 2D polyline'), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(AcPolylineType), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Applies a fit curve or spline type to a 2D polyline'), 'propput'],
        HRESULT,
        'Type',
        (['in'], AcPolylineType, 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'), 'propget'],
        HRESULT,
        'Closed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'), 'propput'],
        HRESULT,
        'Closed',
        (['in'], VARIANT_BOOL, 'fClose')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Generates linetype in a continuous pattern through the vertices of the polyline. When turned off, linetype is generated starting and ending with a dash at each vertex.'), 'propget'],
        HRESULT,
        'LinetypeGeneration',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bLinetypeGen')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Generates linetype in a continuous pattern through the vertices of the polyline. When turned off, linetype is generated starting and ending with a dash at each vertex.'), 'propput'],
        HRESULT,
        'LinetypeGeneration',
        (['in'], VARIANT_BOOL, 'bLinetypeGen')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the area of the polyline'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the length of the polyline'), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_double), 'Length')
    ),
]

################################################################
# code template for IAcadPolyline implementation
# class IAcadPolyline_Impl(object):
#     def _get(self):
#         'Specifies the current vertex of the polyline'
#         #return Coordinates
#     def _set(self, Coordinates):
#         'Specifies the current vertex of the polyline'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the polyline'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the polyline'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def AppendVertex(self, vertex):
#         'Appends a vertex to the polyline'
#         #return 
#
#     def Explode(self):
#         'Explodes the polyline and returns the sub-entities as an array of Object'
#         #return pArrayObjs
#
#     def GetBulge(self, Index):
#         'Returns the vertex bulge of the polyline'
#         #return bulge
#
#     def SetBulge(self, Index, bulge):
#         'Sets the vertex bulge of the polyline'
#         #return 
#
#     def GetWidth(self, Index, EndWidth):
#         'Returns segment width of the polyline'
#         #return StartWidth
#
#     def SetWidth(self, Index, StartWidth, EndWidth):
#         'Sets the segment width of the polyline'
#         #return 
#
#     def _get(self):
#         'Specifies the constant width for the polyline'
#         #return Width
#     def _set(self, Width):
#         'Specifies the constant width for the polyline'
#     ConstantWidth = property(_get, _set, doc = _set.__doc__)
#
#     def Offset(self, Distance):
#         'Creates a new entity object by offsetting the polyline by a specified distance'
#         #return pOffsetCurves
#
#     def _get(self):
#         "Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system"
#         #return Elevation
#     def _set(self, Elevation):
#         "Specifies the elevation of the polyline relative to the Z axis of the objects' coordinate system"
#     Elevation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Applies a fit curve or spline type to a 2D polyline'
#         #return Type
#     def _set(self, Type):
#         'Applies a fit curve or spline type to a 2D polyline'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'
#         #return fClose
#     def _set(self, fClose):
#         'Determines whether polyline is Open or Closed. Closed draws a line segment from current position to starting point of the polyline.'
#     Closed = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Generates linetype in a continuous pattern through the vertices of the polyline. When turned off, linetype is generated starting and ending with a dash at each vertex.'
#         #return bLinetypeGen
#     def _set(self, bLinetypeGen):
#         'Generates linetype in a continuous pattern through the vertices of the polyline. When turned off, linetype is generated starting and ending with a dash at each vertex.'
#     LinetypeGeneration = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Area(self):
#         'Specifies the area of the polyline'
#         #return Area
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Length(self):
#         'Specifies the length of the polyline'
#         #return Length
#


class IAcadPreferencesDrafting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the Drafting tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{6CA0C79C-A982-409C-9821-76A69E49931A}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcAlignmentPointAcquisition'
acAlignPntAcquisitionAutomatic = 0
acAlignPntAcquisitionShiftToAcquire = 1
AcAlignmentPointAcquisition = c_int  # enum

IAcadPreferencesDrafting._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Toggles the AutoSnap marker'), 'propput'],
        HRESULT,
        'AutoSnapMarker',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Toggles the AutoSnap marker'), 'propget'],
        HRESULT,
        'AutoSnapMarker',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Toggles the AutoSnap magnet'), 'propput'],
        HRESULT,
        'AutoSnapMagnet',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Toggles the AutoSnap magnet'), 'propget'],
        HRESULT,
        'AutoSnapMagnet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Toggles the AutoSnap tooltips'), 'propput'],
        HRESULT,
        'AutoSnapTooltip',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Toggles the AutoSnap tooltips'), 'propget'],
        HRESULT,
        'AutoSnapTooltip',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Toggles the display of the AutoSnap aperture'), 'propput'],
        HRESULT,
        'AutoSnapAperture',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Toggles the display of the AutoSnap aperture'), 'propget'],
        HRESULT,
        'AutoSnapAperture',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the size of the AutoSnap aperture'), 'propput'],
        HRESULT,
        'AutoSnapApertureSize',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the size of the AutoSnap aperture'), 'propget'],
        HRESULT,
        'AutoSnapApertureSize',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the color of the AutoSnap marker'), 'propput'],
        HRESULT,
        'AutoSnapMarkerColor',
        (['in'], AcColor, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the color of the AutoSnap marker'), 'propget'],
        HRESULT,
        'AutoSnapMarkerColor',
        (['out', 'retval'], POINTER(AcColor), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the size of the AutoSnap marker'), 'propput'],
        HRESULT,
        'AutoSnapMarkerSize',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the size of the AutoSnap marker'), 'propget'],
        HRESULT,
        'AutoSnapMarkerSize',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Toggles the display of polar tracking vectors'), 'propput'],
        HRESULT,
        'PolarTrackingVector',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Toggles the display of polar tracking vectors'), 'propget'],
        HRESULT,
        'PolarTrackingVector',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Toggles the display of full screen tracking vectors'), 'propput'],
        HRESULT,
        'FullScreenTrackingVector',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Toggles the display of full screen tracking vectors'), 'propget'],
        HRESULT,
        'FullScreenTrackingVector',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Toggles the display of the AutoTrack tooltips'), 'propput'],
        HRESULT,
        'AutoTrackTooltip',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Toggles the display of the AutoTrack tooltips'), 'propget'],
        HRESULT,
        'AutoTrackTooltip',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies how AutoAlignment points are acquired'), 'propput'],
        HRESULT,
        'AlignmentPointAcquisition',
        (['in'], AcAlignmentPointAcquisition, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies how AutoAlignment points are acquired'), 'propget'],
        HRESULT,
        'AlignmentPointAcquisition',
        (['out', 'retval'], POINTER(AcAlignmentPointAcquisition), 'Path')
    ),
]

################################################################
# code template for IAcadPreferencesDrafting implementation
# class IAcadPreferencesDrafting_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Toggles the AutoSnap marker'
#         #return Path
#     def _set(self, Path):
#         'Toggles the AutoSnap marker'
#     AutoSnapMarker = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the AutoSnap magnet'
#         #return Path
#     def _set(self, Path):
#         'Toggles the AutoSnap magnet'
#     AutoSnapMagnet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the AutoSnap tooltips'
#         #return Path
#     def _set(self, Path):
#         'Toggles the AutoSnap tooltips'
#     AutoSnapTooltip = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of the AutoSnap aperture'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of the AutoSnap aperture'
#     AutoSnapAperture = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of the AutoSnap aperture'
#         #return Path
#     def _set(self, Path):
#         'Specifies the size of the AutoSnap aperture'
#     AutoSnapApertureSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the AutoSnap marker'
#         #return Path
#     def _set(self, Path):
#         'Specifies the color of the AutoSnap marker'
#     AutoSnapMarkerColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of the AutoSnap marker'
#         #return Path
#     def _set(self, Path):
#         'Specifies the size of the AutoSnap marker'
#     AutoSnapMarkerSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of polar tracking vectors'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of polar tracking vectors'
#     PolarTrackingVector = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of full screen tracking vectors'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of full screen tracking vectors'
#     FullScreenTrackingVector = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of the AutoTrack tooltips'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of the AutoTrack tooltips'
#     AutoTrackTooltip = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies how AutoAlignment points are acquired'
#         #return Path
#     def _set(self, Path):
#         'Specifies how AutoAlignment points are acquired'
#     AlignmentPointAcquisition = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcKeyboardAccelerator'
acPreferenceClassic = 0
acPreferenceCustom = 1
AcKeyboardAccelerator = c_int  # enum
# values for enumeration 'AcKeyboardPriority'
acKeyboardRunningObjSnap = 0
acKeyboardEntry = 1
acKeyboardEntryExceptScripts = 2
AcKeyboardPriority = c_int  # enum
# values for enumeration 'AcInsertUnits'
acInsertUnitsUnitless = 0
acInsertUnitsInches = 1
acInsertUnitsFeet = 2
acInsertUnitsMiles = 3
acInsertUnitsMillimeters = 4
acInsertUnitsCentimeters = 5
acInsertUnitsMeters = 6
acInsertUnitsKilometers = 7
acInsertUnitsMicroinches = 8
acInsertUnitsMils = 9
acInsertUnitsYards = 10
acInsertUnitsAngstroms = 11
acInsertUnitsNanometers = 12
acInsertUnitsMicrons = 13
acInsertUnitsDecimeters = 14
acInsertUnitsDecameters = 15
acInsertUnitsHectometers = 16
acInsertUnitsGigameters = 17
acInsertUnitsAstronomicalUnits = 18
acInsertUnitsLightYears = 19
acInsertUnitsParsecs = 20
acInsertUnitsUSSurveyFeet = 21
acInsertUnitsUSSurveyInch = 22
acInsertUnitsUSSurveyYard = 23
acInsertUnitsUSSurveyMile = 24
AcInsertUnits = c_int  # enum
# values for enumeration 'AcDrawingAreaSCMDefault'
acRepeatLastCommand = 0
acSCM = 1
AcDrawingAreaSCMDefault = c_int  # enum
# values for enumeration 'AcDrawingAreaSCMEdit'
acEdRepeatLastCommand = 0
acEdSCM = 1
AcDrawingAreaSCMEdit = c_int  # enum
# values for enumeration 'AcDrawingAreaSCMCommand'
acEnter = 0
acEnableSCMOptions = 1
acEnableSCM = 2
AcDrawingAreaSCMCommand = c_int  # enum

IAcadPreferencesUser._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies the Windows standard or AutoCAD classic keyboard'), 'propput'],
        HRESULT,
        'KeyboardAccelerator',
        (['in'], AcKeyboardAccelerator, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies the Windows standard or AutoCAD classic keyboard'), 'propget'],
        HRESULT,
        'KeyboardAccelerator',
        (['out', 'retval'], POINTER(AcKeyboardAccelerator), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Controls how AutoCAD responds to the input of coordinate data'), 'propput'],
        HRESULT,
        'KeyboardPriority',
        (['in'], AcKeyboardPriority, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Controls how AutoCAD responds to the input of coordinate data'), 'propget'],
        HRESULT,
        'KeyboardPriority',
        (['out', 'retval'], POINTER(AcKeyboardPriority), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Toggles the display of the hyperlink cursor and shortcut menu'), 'propput'],
        HRESULT,
        'HyperlinkDisplayCursor',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Toggles the display of the hyperlink cursor and shortcut menu'), 'propget'],
        HRESULT,
        'HyperlinkDisplayCursor',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Determines the units to automatically use for objects in the AutoCAD DesignCenter for a source drawing that does not have assigned insert units'), 'propput'],
        HRESULT,
        'ADCInsertUnitsDefaultSource',
        (['in'], AcInsertUnits, 'pIU')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Determines the units to automatically use for objects in the AutoCAD DesignCenter for a source drawing that does not have assigned insert units'), 'propget'],
        HRESULT,
        'ADCInsertUnitsDefaultSource',
        (['out', 'retval'], POINTER(AcInsertUnits), 'pIU')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Determines the units to automatically use for objects in the AutoCAD DesignCenter for a target drawing that does not have assigned insert units'), 'propput'],
        HRESULT,
        'ADCInsertUnitsDefaultTarget',
        (['in'], AcInsertUnits, 'pSUunits')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Determines the units to automatically use for objects in the AutoCAD DesignCenter for a target drawing that does not have assigned insert units'), 'propget'],
        HRESULT,
        'ADCInsertUnitsDefaultTarget',
        (['out', 'retval'], POINTER(AcInsertUnits), 'pSUunits')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('ShortCutMenuDisplay.'), 'propput'],
        HRESULT,
        'ShortCutMenuDisplay',
        (['in'], VARIANT_BOOL, 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('ShortCutMenuDisplay.'), 'propget'],
        HRESULT,
        'ShortCutMenuDisplay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Determines right-click functionality in the drawing area while in Default mode, which means that no objects are selected and no commands are in progress'), 'propput'],
        HRESULT,
        'SCMDefaultMode',
        (['in'], AcDrawingAreaSCMDefault, 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Determines right-click functionality in the drawing area while in Default mode, which means that no objects are selected and no commands are in progress'), 'propget'],
        HRESULT,
        'SCMDefaultMode',
        (['out', 'retval'], POINTER(AcDrawingAreaSCMDefault), 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Determines right-click functionality in the drawing area while in Edit mode, which means that one or more objects are selected and no commands are in progress'), 'propput'],
        HRESULT,
        'SCMEditMode',
        (['in'], AcDrawingAreaSCMEdit, 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Determines right-click functionality in the drawing area while in Edit mode, which means that one or more objects are selected and no commands are in progress'), 'propget'],
        HRESULT,
        'SCMEditMode',
        (['out', 'retval'], POINTER(AcDrawingAreaSCMEdit), 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Determines right-click functionality in the drawing area while in Command mode, which means that a command is currently in progress'), 'propput'],
        HRESULT,
        'SCMCommandMode',
        (['in'], AcDrawingAreaSCMCommand, 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Determines right-click functionality in the drawing area while in Command mode, which means that a command is currently in progress'), 'propget'],
        HRESULT,
        'SCMCommandMode',
        (['out', 'retval'], POINTER(AcDrawingAreaSCMCommand), 'pSCM')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Determines whether time sensitive right-click functionality is on.'), 'propput'],
        HRESULT,
        'SCMTimeMode',
        (['in'], VARIANT_BOOL, 'time')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Determines whether time sensitive right-click functionality is on.'), 'propget'],
        HRESULT,
        'SCMTimeMode',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'time')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Determines time sensitive right-click functionality longer click duration in milliseconds.'), 'propput'],
        HRESULT,
        'SCMTimeValue',
        (['in'], c_int, 'time')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Determines time sensitive right-click functionality longer click duration in milliseconds.'), 'propget'],
        HRESULT,
        'SCMTimeValue',
        (['out', 'retval'], POINTER(c_int), 'time')
    ),
]

################################################################
# code template for IAcadPreferencesUser implementation
# class IAcadPreferencesUser_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Specifies the Windows standard or AutoCAD classic keyboard'
#         #return Path
#     def _set(self, Path):
#         'Specifies the Windows standard or AutoCAD classic keyboard'
#     KeyboardAccelerator = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls how AutoCAD responds to the input of coordinate data'
#         #return Path
#     def _set(self, Path):
#         'Controls how AutoCAD responds to the input of coordinate data'
#     KeyboardPriority = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of the hyperlink cursor and shortcut menu'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of the hyperlink cursor and shortcut menu'
#     HyperlinkDisplayCursor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines the units to automatically use for objects in the AutoCAD DesignCenter for a source drawing that does not have assigned insert units'
#         #return pIU
#     def _set(self, pIU):
#         'Determines the units to automatically use for objects in the AutoCAD DesignCenter for a source drawing that does not have assigned insert units'
#     ADCInsertUnitsDefaultSource = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines the units to automatically use for objects in the AutoCAD DesignCenter for a target drawing that does not have assigned insert units'
#         #return pSUunits
#     def _set(self, pSUunits):
#         'Determines the units to automatically use for objects in the AutoCAD DesignCenter for a target drawing that does not have assigned insert units'
#     ADCInsertUnitsDefaultTarget = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'ShortCutMenuDisplay.'
#         #return pSCM
#     def _set(self, pSCM):
#         'ShortCutMenuDisplay.'
#     ShortCutMenuDisplay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines right-click functionality in the drawing area while in Default mode, which means that no objects are selected and no commands are in progress'
#         #return pSCM
#     def _set(self, pSCM):
#         'Determines right-click functionality in the drawing area while in Default mode, which means that no objects are selected and no commands are in progress'
#     SCMDefaultMode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines right-click functionality in the drawing area while in Edit mode, which means that one or more objects are selected and no commands are in progress'
#         #return pSCM
#     def _set(self, pSCM):
#         'Determines right-click functionality in the drawing area while in Edit mode, which means that one or more objects are selected and no commands are in progress'
#     SCMEditMode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines right-click functionality in the drawing area while in Command mode, which means that a command is currently in progress'
#         #return pSCM
#     def _set(self, pSCM):
#         'Determines right-click functionality in the drawing area while in Command mode, which means that a command is currently in progress'
#     SCMCommandMode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether time sensitive right-click functionality is on.'
#         #return time
#     def _set(self, time):
#         'Determines whether time sensitive right-click functionality is on.'
#     SCMTimeMode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines time sensitive right-click functionality longer click duration in milliseconds.'
#         #return time
#     def _set(self, time):
#         'Determines time sensitive right-click functionality longer click duration in milliseconds.'
#     SCMTimeValue = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcCoordinateSystem'
acWorld = 0
acUCS = 1
acDisplayDCS = 2
acPaperSpaceDCS = 3
acOCS = 4
AcCoordinateSystem = c_int  # enum


class AcadSubDMeshVertex(CoClass):
    """AutoCAD SubDMesh Vertex Object"""
    _reg_clsid_ = GUID('{231E1D77-7508-479A-B832-02F6FCCE5AE8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSubDMeshVertex._com_interfaces_ = [IAcadSubDMeshVertex]
AcadSubDMeshVertex._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadGeoPositionMarker(IAcadEntity):
    """AutoCAD GeoPositionMarker Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{BE68B4F4-B0A3-4DCD-A5CA-7B0E0DA68D2D}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadGeoPositionMarker._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring("Specify the marker's position"), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(VARIANT), 'Position')
    ),
    COMMETHOD(
        [dispid(1), helpstring("Specify the marker's position"), 'propput'],
        HRESULT,
        'Position',
        (['in'], VARIANT, 'Position')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the text string of the MText'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the text string of the MText'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the style name of the MText'), 'propget'],
        HRESULT,
        'TextStyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the style name of the MText'), 'propput'],
        HRESULT,
        'TextStyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the attachment point of the MText'), 'propget'],
        HRESULT,
        'TextJustify',
        (['out', 'retval'], POINTER(AcAttachmentPoint), 'attPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the attachment point of the MText'), 'propput'],
        HRESULT,
        'TextJustify',
        (['in'], AcAttachmentPoint, 'attPoint')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the drawing direction of the MText'), 'propget'],
        HRESULT,
        'DrawingDirection',
        (['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the drawing direction of the MText'), 'propput'],
        HRESULT,
        'DrawingDirection',
        (['in'], AcDrawingDirection, 'drawDir')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the width of the MText'), 'propget'],
        HRESULT,
        'TextWidth',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the width of the MText'), 'propput'],
        HRESULT,
        'TextWidth',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the height of the Mtext'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the height of the Mtext'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the rotation angle of the Mtext'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the rotation angle of the Mtext'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the line spacing factor of the Mtext'), 'propget'],
        HRESULT,
        'LineSpacingFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the line spacing factor of the Mtext'), 'propput'],
        HRESULT,
        'LineSpacingFactor',
        (['in'], c_double, 'factor')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the line spacing distance of the Mtext'), 'propget'],
        HRESULT,
        'LineSpacingDistance',
        (['out', 'retval'], POINTER(c_double), 'Value')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the line spacing distance of the Mtext'), 'propput'],
        HRESULT,
        'LineSpacingDistance',
        (['in'], c_double, 'Value')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the line spacing style of the Mtext'), 'propget'],
        HRESULT,
        'LineSpacingStyle',
        (['out', 'retval'], POINTER(AcLineSpacingStyle), 'style')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the line spacing style of the Mtext'), 'propput'],
        HRESULT,
        'LineSpacingStyle',
        (['in'], AcLineSpacingStyle, 'style')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies use Background Mask of the MText'), 'propget'],
        HRESULT,
        'BackgroundFill',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bUseBackgroundFill')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies use Background Mask of the MText'), 'propput'],
        HRESULT,
        'BackgroundFill',
        (['in'], VARIANT_BOOL, 'bUseBackgroundFill')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specify the landing distance'), 'propget'],
        HRESULT,
        'LandingGap',
        (['out', 'retval'], POINTER(c_double), 'gap')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specify the landing distance'), 'propput'],
        HRESULT,
        'LandingGap',
        (['in'], c_double, 'gap')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Radius'), 'propget'],
        HRESULT,
        'Radius',
        (['out', 'retval'], POINTER(c_double), 'gap')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Radius'), 'propput'],
        HRESULT,
        'Radius',
        (['in'], c_double, 'gap')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Display/hide text frame of content'), 'propget'],
        HRESULT,
        'TextFrameDisplay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Display/hide text frame of content'), 'propput'],
        HRESULT,
        'TextFrameDisplay',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the latitude of the marker'), 'propget'],
        HRESULT,
        'Latitude',
        (['out', 'retval'], POINTER(BSTR), 'Latitude')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the latitude of the marker'), 'propput'],
        HRESULT,
        'Latitude',
        (['in'], BSTR, 'Latitude')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the longitude of the marker'), 'propget'],
        HRESULT,
        'Longitude',
        (['out', 'retval'], POINTER(BSTR), 'Longitude')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the longitude of the marker'), 'propput'],
        HRESULT,
        'Longitude',
        (['in'], BSTR, 'Longitude')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the elevation of the marker'), 'propget'],
        HRESULT,
        'Altitude',
        (['out', 'retval'], POINTER(c_double), 'Altitude')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the elevation of the marker'), 'propput'],
        HRESULT,
        'Altitude',
        (['in'], c_double, 'Altitude')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the notes for the marker'), 'propget'],
        HRESULT,
        'Notes',
        (['out', 'retval'], POINTER(BSTR), 'Notes')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the notes for the marker'), 'propput'],
        HRESULT,
        'Notes',
        (['in'], BSTR, 'Notes')
    ),
]

################################################################
# code template for IAcadGeoPositionMarker implementation
# class IAcadGeoPositionMarker_Impl(object):
#     def _get(self):
#         "Specify the marker's position"
#         #return Position
#     def _set(self, Position):
#         "Specify the marker's position"
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text string of the MText'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the MText'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style name of the MText'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the style name of the MText'
#     TextStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the attachment point of the MText'
#         #return attPoint
#     def _set(self, attPoint):
#         'Specifies the attachment point of the MText'
#     TextJustify = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the drawing direction of the MText'
#         #return drawDir
#     def _set(self, drawDir):
#         'Specifies the drawing direction of the MText'
#     DrawingDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the MText'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the MText'
#     TextWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the Mtext'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the Mtext'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the Mtext'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the Mtext'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing factor of the Mtext'
#         #return factor
#     def _set(self, factor):
#         'Specifies the line spacing factor of the Mtext'
#     LineSpacingFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing distance of the Mtext'
#         #return Value
#     def _set(self, Value):
#         'Specifies the line spacing distance of the Mtext'
#     LineSpacingDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing style of the Mtext'
#         #return style
#     def _set(self, style):
#         'Specifies the line spacing style of the Mtext'
#     LineSpacingStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies use Background Mask of the MText'
#         #return bUseBackgroundFill
#     def _set(self, bUseBackgroundFill):
#         'Specifies use Background Mask of the MText'
#     BackgroundFill = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the landing distance'
#         #return gap
#     def _set(self, gap):
#         'Specify the landing distance'
#     LandingGap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Radius'
#         #return gap
#     def _set(self, gap):
#         'Radius'
#     Radius = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Display/hide text frame of content'
#         #return pVal
#     def _set(self, pVal):
#         'Display/hide text frame of content'
#     TextFrameDisplay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the latitude of the marker'
#         #return Latitude
#     def _set(self, Latitude):
#         'Specifies the latitude of the marker'
#     Latitude = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the longitude of the marker'
#         #return Longitude
#     def _set(self, Longitude):
#         'Specifies the longitude of the marker'
#     Longitude = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the elevation of the marker'
#         #return Altitude
#     def _set(self, Altitude):
#         'Specifies the elevation of the marker'
#     Altitude = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the notes for the marker'
#         #return Notes
#     def _set(self, Notes):
#         'Specifies the notes for the marker'
#     Notes = property(_get, _set, doc = _set.__doc__)
#


class IAcadDim3PointAngular(IAcadDimension):
    """IAcadDim3PointAngular Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{B59E1E38-FDB6-4A17-95BE-BB4D086AC515}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadDim3PointAngular._methods_ = [
    COMMETHOD(
        [dispid(38), helpstring('Specifies the endpoint of the first extension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine1EndPoint',
        (['out', 'retval'], POINTER(VARIANT), 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Specifies the endpoint of the first extension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine1EndPoint',
        (['in'], VARIANT, 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Specifies the endpoint of the second extension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine2EndPoint',
        (['out', 'retval'], POINTER(VARIANT), 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Specifies the endpoint of the second extension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine2EndPoint',
        (['in'], VARIANT, 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(45), helpstring('Specifies the angle vertex for the three point angular dimension'), 'nonbrowsable', 'propget'],
        HRESULT,
        'AngleVertex',
        (['out', 'retval'], POINTER(VARIANT), 'AngleVertex')
    ),
    COMMETHOD(
        [dispid(45), helpstring('Specifies the angle vertex for the three point angular dimension'), 'nonbrowsable', 'propput'],
        HRESULT,
        'AngleVertex',
        (['in'], VARIANT, 'AngleVertex')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'), 'propget'],
        HRESULT,
        'TextPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'AngleVertex')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'), 'propput'],
        HRESULT,
        'TextPrecision',
        (['in'], AcDimPrecision, 'AngleVertex')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Specifies the angle format (DIMAUNIT system variable)'), 'propget'],
        HRESULT,
        'AngleFormat',
        (['out', 'retval'], POINTER(AcAngleUnits), 'format')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Specifies the angle format (DIMAUNIT system variable)'), 'propput'],
        HRESULT,
        'AngleFormat',
        (['in'], AcAngleUnits, 'format')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propget'],
        HRESULT,
        'HorizontalTextPosition',
        (['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propput'],
        HRESULT,
        'HorizontalTextPosition',
        (['in'], AcDimHorizontalJustification, 'Type')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'lweight')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propget'],
        HRESULT,
        'DimLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propput'],
        HRESULT,
        'DimLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propget'],
        HRESULT,
        'DimLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propput'],
        HRESULT,
        'DimLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propget'],
        HRESULT,
        'DimLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propput'],
        HRESULT,
        'DimLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineOffset',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineOffset',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead1Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead1Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead2Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead2Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'bVal')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead1Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead1Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead2Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead2Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['in'], VARIANT_BOOL, 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLen',
        (['out', 'retval'], POINTER(c_double), 'FixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLen',
        (['in'], c_double, 'FixedLen')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propget'],
        HRESULT,
        'DimConstrForm',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propput'],
        HRESULT,
        'DimConstrForm',
        (['in'], VARIANT_BOOL, 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propget'],
        HRESULT,
        'DimConstrReference',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propput'],
        HRESULT,
        'DimConstrReference',
        (['in'], VARIANT_BOOL, 'bIsReference')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propget'],
        HRESULT,
        'DimConstrName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propput'],
        HRESULT,
        'DimConstrName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrExpression',
        (['out', 'retval'], POINTER(BSTR), 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrExpression',
        (['in'], BSTR, 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrValue',
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrValue',
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propget'],
        HRESULT,
        'DimConstrDesc',
        (['out', 'retval'], POINTER(BSTR), 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propput'],
        HRESULT,
        'DimConstrDesc',
        (['in'], BSTR, 'bstrDescription')
    ),
]

################################################################
# code template for IAcadDim3PointAngular implementation
# class IAcadDim3PointAngular_Impl(object):
#     def _get(self):
#         'Specifies the endpoint of the first extension line'
#         #return xLine1Point
#     def _set(self, xLine1Point):
#         'Specifies the endpoint of the first extension line'
#     ExtLine1EndPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the endpoint of the second extension line'
#         #return xLine2Point
#     def _set(self, xLine2Point):
#         'Specifies the endpoint of the second extension line'
#     ExtLine2EndPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the angle vertex for the three point angular dimension'
#         #return AngleVertex
#     def _set(self, AngleVertex):
#         'Specifies the angle vertex for the three point angular dimension'
#     AngleVertex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'
#         #return AngleVertex
#     def _set(self, AngleVertex):
#         'Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'
#     TextPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the angle format (DIMAUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies the angle format (DIMAUNIT system variable)'
#     AngleFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#     ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#     ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#     HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#         #return lweight
#     def _set(self, lweight):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#     ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#     DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#     DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#     ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#     ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#     DimLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#     ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#     Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#     Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#     Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#     Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#     ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#     ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#         #return bFixedLen
#     def _set(self, bFixedLen):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#     ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Set extension line fixed length (DIMFXL system variable)'
#         #return FixedLen
#     def _set(self, FixedLen):
#         'Set extension line fixed length (DIMFXL system variable)'
#     ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the constraint type - Dynamic or Annotational'
#         #return bIsDynamic
#     def _set(self, bIsDynamic):
#         'Specifies the constraint type - Dynamic or Annotational'
#     DimConstrForm = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#         #return bIsReference
#     def _set(self, bIsReference):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#     DimConstrReference = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#     DimConstrName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the expression or the value of the constraint'
#         #return bstrExpression
#     def _set(self, bstrExpression):
#         'Specifies the expression or the value of the constraint'
#     DimConstrExpression = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the value of the constraint'
#         #return Value
#     def _set(self, Value):
#         'Specifies the value of the constraint'
#     DimConstrValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies description for constraint'
#         #return bstrDescription
#     def _set(self, bstrDescription):
#         'Specifies description for constraint'
#     DimConstrDesc = property(_get, _set, doc = _set.__doc__)
#


class AcadNurbSurface(CoClass):
    """AutoCAD NURBS Surface Object"""
    _reg_clsid_ = GUID('{53BBD354-CDC2-4059-87AF-88A310D4A356}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadNurbSurface._com_interfaces_ = [IAcadNurbSurface]
AcadNurbSurface._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcMeasurementUnits'
acEnglish = 0
acMetric = 1
AcMeasurementUnits = c_int  # enum


class IAcadGeomapImage(IAcadRasterImage):
    """AutoCAD Geomap Image Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{D77A260E-F577-4650-8ED9-FF204B7039DC}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadGeomapImage._methods_ = [
    COMMETHOD(
        [dispid(33), helpstring('Specifies the brightness of the Geomap image'), 'propget'],
        HRESULT,
        'GeoImageBrightness',
        (['out', 'retval'], POINTER(c_int), 'Brightness')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Specifies the brightness of the Geomap image'), 'propput'],
        HRESULT,
        'GeoImageBrightness',
        (['in'], c_int, 'Brightness')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Specifies the contrast of the Geomap image'), 'propget'],
        HRESULT,
        'GeoImageContrast',
        (['out', 'retval'], POINTER(c_int), 'Contrast')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Specifies the contrast of the Geomap image'), 'propput'],
        HRESULT,
        'GeoImageContrast',
        (['in'], c_int, 'Contrast')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies the fade of the Geomap image'), 'propget'],
        HRESULT,
        'GeoImageFade',
        (['out', 'retval'], POINTER(c_int), 'Fade')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies the fade of the Geomap image'), 'propput'],
        HRESULT,
        'GeoImageFade',
        (['in'], c_int, 'Fade')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Specifies the position of the Geomap image'), 'propget'],
        HRESULT,
        'GeoImagePosition',
        (['out', 'retval'], POINTER(VARIANT), 'Position')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Specifies the width of the Geomap image'), 'propget'],
        HRESULT,
        'GeoImageWidth',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Specifies the height of the Geomap image'), 'propget'],
        HRESULT,
        'GeoImageHeight',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
]

################################################################
# code template for IAcadGeomapImage implementation
# class IAcadGeomapImage_Impl(object):
#     def _get(self):
#         'Specifies the brightness of the Geomap image'
#         #return Brightness
#     def _set(self, Brightness):
#         'Specifies the brightness of the Geomap image'
#     GeoImageBrightness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the contrast of the Geomap image'
#         #return Contrast
#     def _set(self, Contrast):
#         'Specifies the contrast of the Geomap image'
#     GeoImageContrast = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the fade of the Geomap image'
#         #return Fade
#     def _set(self, Fade):
#         'Specifies the fade of the Geomap image'
#     GeoImageFade = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def GeoImagePosition(self):
#         'Specifies the position of the Geomap image'
#         #return Position
#
#     @property
#     def GeoImageWidth(self):
#         'Specifies the width of the Geomap image'
#         #return Width
#
#     @property
#     def GeoImageHeight(self):
#         'Specifies the height of the Geomap image'
#         #return Height
#


class IAcadXline(IAcadEntity):
    """AutoCAD Xline Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{789381BE-9096-45F8-91D4-E5C472E78811}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadXline._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for the base point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'BasePoint',
        (['out', 'retval'], POINTER(VARIANT), 'BasePoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for the base point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'BasePoint',
        (['in'], VARIANT, 'BasePoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate for the second point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'SecondPoint',
        (['out', 'retval'], POINTER(VARIANT), 'SecondPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate for the second point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'SecondPoint',
        (['in'], VARIANT, 'SecondPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specify the X, Y, Z coordinate for the direction vector of the Xline'), 'propget'],
        HRESULT,
        'DirectionVector',
        (['out', 'retval'], POINTER(VARIANT), 'dirVector')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specify the X, Y, Z coordinate for the direction vector of the Xline'), 'propput'],
        HRESULT,
        'DirectionVector',
        (['in'], VARIANT, 'dirVector')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Creates a new entity object by offsetting the Xline by a specified distance')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
]

################################################################
# code template for IAcadXline implementation
# class IAcadXline_Impl(object):
#     def _get(self):
#         'Specify the X, Y, Z coordinate for the base point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return BasePoint
#     def _set(self, BasePoint):
#         'Specify the X, Y, Z coordinate for the base point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'
#     BasePoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate for the second point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return SecondPoint
#     def _set(self, SecondPoint):
#         'Specify the X, Y, Z coordinate for the second point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously'
#     SecondPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate for the direction vector of the Xline'
#         #return dirVector
#     def _set(self, dirVector):
#         'Specify the X, Y, Z coordinate for the direction vector of the Xline'
#     DirectionVector = property(_get, _set, doc = _set.__doc__)
#
#     def Offset(self, Distance):
#         'Creates a new entity object by offsetting the Xline by a specified distance'
#         #return pOffsetCurves
#

IAcadCircle._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the center of the circle or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'Center',
        (['out', 'retval'], POINTER(VARIANT), 'CenterPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the center of the circle or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'Center',
        (['in'], VARIANT, 'CenterPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the radius of the circle'), 'propget'],
        HRESULT,
        'Radius',
        (['out', 'retval'], POINTER(c_double), 'Radius')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the radius of the circle'), 'propput'],
        HRESULT,
        'Radius',
        (['in'], c_double, 'Radius')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the diameter of the circle'), 'propget'],
        HRESULT,
        'Diameter',
        (['out', 'retval'], POINTER(c_double), 'Diameter')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the diameter of the circle'), 'propput'],
        HRESULT,
        'Diameter',
        (['in'], c_double, 'Diameter')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the circumference of the circle'), 'propget'],
        HRESULT,
        'Circumference',
        (['out', 'retval'], POINTER(c_double), 'Circumference')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the circumference of the circle'), 'propput'],
        HRESULT,
        'Circumference',
        (['in'], c_double, 'Circumference')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the area of the circle'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the area of the circle'), 'propput'],
        HRESULT,
        'Area',
        (['in'], c_double, 'Area')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specify the X, Y, Z coordinate of the normal direction vector'), 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specify the X, Y, Z coordinate of the normal direction vector'), 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the thickness of the circle'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the thickness of the circle'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Creates an arc by offsetting the original arc by a specified distance')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
]

################################################################
# code template for IAcadCircle implementation
# class IAcadCircle_Impl(object):
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the center of the circle or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return CenterPoint
#     def _set(self, CenterPoint):
#         'Specify the X, Y, Z coordinate of the center of the circle or use the Pick Point button to set X, Y, Z values simultaneously'
#     Center = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the radius of the circle'
#         #return Radius
#     def _set(self, Radius):
#         'Specifies the radius of the circle'
#     Radius = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the diameter of the circle'
#         #return Diameter
#     def _set(self, Diameter):
#         'Specifies the diameter of the circle'
#     Diameter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the circumference of the circle'
#         #return Circumference
#     def _set(self, Circumference):
#         'Specifies the circumference of the circle'
#     Circumference = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the area of the circle'
#         #return Area
#     def _set(self, Area):
#         'Specifies the area of the circle'
#     Area = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the normal direction vector'
#         #return Normal
#     def _set(self, Normal):
#         'Specify the X, Y, Z coordinate of the normal direction vector'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the circle'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the circle'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def Offset(self, Distance):
#         'Creates an arc by offsetting the original arc by a specified distance'
#         #return pOffsetCurves
#
# values for enumeration 'AcXRefDemandLoad'
acDemandLoadDisabled = 0
acDemandLoadEnabled = 1
acDemandLoadEnabledWithCopy = 2
AcXRefDemandLoad = c_int  # enum


class AcadMLeaderLeader(CoClass):
    """AutoCAD Object for Multi-Leader's Leader Line"""
    _reg_clsid_ = GUID('{5AF8892E-1D2A-45A0-9C04-C446AED5DD18}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMLeaderLeader._com_interfaces_ = [IAcadMLeaderLeader]
AcadMLeaderLeader._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadMaterial(IAcadObject):
    """The render material characteristics"""
    _case_insensitive_ = True
    _iid_ = GUID('{BCDA7885-FBA7-4667-89F9-0077E3B9CEAB}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadMaterial._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the material description'), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'bstrDes')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the material description'), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'bstrDes')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
]

################################################################
# code template for IAcadMaterial implementation
# class IAcadMaterial_Impl(object):
#     def _get(self):
#         'Specifies the material description'
#         #return bstrDes
#     def _set(self, bstrDes):
#         'Specifies the material description'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#


class IAcad3DSolid(IAcadEntity):
    """AutoCAD 3dSolid Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{F3BF08F3-D4F1-4625-9A66-2AB64C2AB038}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadRegion(IAcadEntity):
    """AutoCAD Region Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{03E7FB76-5FE2-40E0-B791-73C4D7288703}')
    _idlflags_ = ['dual', 'oleautomation']


IAcad3DSolid._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Gets the center of area or mass for a region or solid'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Centroid',
        (['out', 'retval'], POINTER(VARIANT), 'Centroid')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the moment of inertia for the solid'), 'nonbrowsable', 'propget'],
        HRESULT,
        'MomentOfInertia',
        (['out', 'retval'], POINTER(VARIANT), 'momentInertia')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Gets the principal directions of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'PrincipalDirections',
        (['out', 'retval'], POINTER(VARIANT), 'prinDir')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Gets the principal moments property of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'PrincipalMoments',
        (['out', 'retval'], POINTER(VARIANT), 'prinMoments')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Gets the product of inertia of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ProductOfInertia',
        (['out', 'retval'], POINTER(VARIANT), 'prodInertia')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Gets the radius of gyration of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'RadiiOfGyration',
        (['out', 'retval'], POINTER(VARIANT), 'radiiGyration')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Gets the volume of the solid'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Volume',
        (['out', 'retval'], POINTER(c_double), 'Volume')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Performs a boolean operation against another 3dsolid.')],
        HRESULT,
        'Boolean',
        (['in'], AcBooleanType, 'Operation'),
        (['in'], POINTER(IAcad3DSolid), 'SolidObject')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Check interference for the 3dsolid object.')],
        HRESULT,
        'CheckInterference',
        (['in'], POINTER(IAcad3DSolid), 'Object'),
        (['in'], VARIANT_BOOL, 'CreateInterferenceSolid'),
        (['out'], POINTER(VARIANT_BOOL), 'SolidsInterfere'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pIntSolid')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Create a section of the 3dsolid given three points that define the plane. Returns the Section as a Region object')],
        HRESULT,
        'SectionSolid',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['in'], VARIANT, 'point3'),
        (['out', 'retval'], POINTER(POINTER(IAcadRegion)), 'pRegion')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Create a slice of the 3dsolid given three points that define the plane. Returns the resulting array of 3dSolid object. ')],
        HRESULT,
        'SliceSolid',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['in'], VARIANT, 'point3'),
        (['in'], VARIANT_BOOL, 'Negative'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pNegSideSolid')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Indicates the type of solid'), 'propget'],
        HRESULT,
        'SolidType',
        (['out', 'retval'], POINTER(BSTR), 'SolidType')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the X, Y, Z coordinate for center of the base or center of the solid'), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(VARIANT), 'Position')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the X, Y, Z coordinate for center of the base or center of the solid'), 'propput'],
        HRESULT,
        'Position',
        (['in'], VARIANT, 'Position')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies whether history is saved'), 'propget'],
        HRESULT,
        'History',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bHistory')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies whether history is saved'), 'propput'],
        HRESULT,
        'History',
        (['in'], VARIANT_BOOL, 'bHistory')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies whether to show history of the solid'), 'propget'],
        HRESULT,
        'ShowHistory',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Position')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies whether to show history of the solid'), 'propput'],
        HRESULT,
        'ShowHistory',
        (['in'], VARIANT_BOOL, 'Position')
    ),
]

################################################################
# code template for IAcad3DSolid implementation
# class IAcad3DSolid_Impl(object):
#     @property
#     def Centroid(self):
#         'Gets the center of area or mass for a region or solid'
#         #return Centroid
#
#     @property
#     def MomentOfInertia(self):
#         'Gets the moment of inertia for the solid'
#         #return momentInertia
#
#     @property
#     def PrincipalDirections(self):
#         'Gets the principal directions of the solid or region'
#         #return prinDir
#
#     @property
#     def PrincipalMoments(self):
#         'Gets the principal moments property of the solid or region'
#         #return prinMoments
#
#     @property
#     def ProductOfInertia(self):
#         'Gets the product of inertia of the solid or region'
#         #return prodInertia
#
#     @property
#     def RadiiOfGyration(self):
#         'Gets the radius of gyration of the solid or region'
#         #return radiiGyration
#
#     @property
#     def Volume(self):
#         'Gets the volume of the solid'
#         #return Volume
#
#     def Boolean(self, Operation, SolidObject):
#         'Performs a boolean operation against another 3dsolid.'
#         #return 
#
#     def CheckInterference(self, Object, CreateInterferenceSolid):
#         'Check interference for the 3dsolid object.'
#         #return SolidsInterfere, pIntSolid
#
#     def SectionSolid(self, Point1, Point2, point3):
#         'Create a section of the 3dsolid given three points that define the plane. Returns the Section as a Region object'
#         #return pRegion
#
#     def SliceSolid(self, Point1, Point2, point3, Negative):
#         'Create a slice of the 3dsolid given three points that define the plane. Returns the resulting array of 3dSolid object. '
#         #return pNegSideSolid
#
#     @property
#     def SolidType(self):
#         'Indicates the type of solid'
#         #return SolidType
#
#     def _get(self):
#         'Specifies the X, Y, Z coordinate for center of the base or center of the solid'
#         #return Position
#     def _set(self, Position):
#         'Specifies the X, Y, Z coordinate for center of the base or center of the solid'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether history is saved'
#         #return bHistory
#     def _set(self, bHistory):
#         'Specifies whether history is saved'
#     History = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether to show history of the solid'
#         #return Position
#     def _set(self, Position):
#         'Specifies whether to show history of the solid'
#     ShowHistory = property(_get, _set, doc = _set.__doc__)
#


class AcadMLeader(CoClass):
    """AutoCAD Multi-Leader Object"""
    _reg_clsid_ = GUID('{4865A5DA-AC09-441D-8174-8EE4432558B2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMLeader._com_interfaces_ = [IAcadMLeader]
AcadMLeader._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcPreviewMode'
acPartialPreview = 0
acFullPreview = 1
AcPreviewMode = c_int  # enum


class AcadLWPolyline(CoClass):
    """AutoCAD Lightweight Polyline Object"""
    _reg_clsid_ = GUID('{F191B69E-7593-4141-A8E9-2F197459B2FD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLWPolyline._com_interfaces_ = [IAcadLWPolyline]
AcadLWPolyline._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadSecurityParams(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """Security Parameters Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{01AEF2A5-2F4E-4CB7-B726-742B3FB7BEB2}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSecurityParams._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the security-related operations to be performed.'), 'propput'],
        HRESULT,
        'Action',
        (['in'], c_int, 'pOperations')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the security-related operations to be performed.'), 'propget'],
        HRESULT,
        'Action',
        (['out', 'retval'], POINTER(c_int), 'pOperations')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the encryption password.'), 'propput'],
        HRESULT,
        'Password',
        (['in'], BSTR, 'pSecret')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the encryption password.'), 'propget'],
        HRESULT,
        'Password',
        (['out', 'retval'], POINTER(BSTR), 'pSecret')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the encryption provider type.'), 'propput'],
        HRESULT,
        'ProviderType',
        (['in'], c_int, 'pProvType')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the encryption provider type.'), 'propget'],
        HRESULT,
        'ProviderType',
        (['out', 'retval'], POINTER(c_int), 'pProvType')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the encryption provider name.'), 'propput'],
        HRESULT,
        'ProviderName',
        (['in'], BSTR, 'pProvName')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the encryption provider name.'), 'propget'],
        HRESULT,
        'ProviderName',
        (['out', 'retval'], POINTER(BSTR), 'pProvName')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the encryption algorithm identifier.'), 'propput'],
        HRESULT,
        'Algorithm',
        (['in'], c_int, 'pAlgId')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the encryption algorithm identifier.'), 'propget'],
        HRESULT,
        'Algorithm',
        (['out', 'retval'], POINTER(c_int), 'pAlgId')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the length of the encryption key.'), 'propput'],
        HRESULT,
        'KeyLength',
        (['in'], c_int, 'pKeyLen')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the length of the encryption key.'), 'propget'],
        HRESULT,
        'KeyLength',
        (['out', 'retval'], POINTER(c_int), 'pKeyLen')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the subject name of the digital certificate'), 'propput'],
        HRESULT,
        'Subject',
        (['in'], BSTR, 'pCertSubject')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the subject name of the digital certificate'), 'propget'],
        HRESULT,
        'Subject',
        (['out', 'retval'], POINTER(BSTR), 'pCertSubject')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the issuer name of the digital certificate.'), 'propput'],
        HRESULT,
        'Issuer',
        (['in'], BSTR, 'pCertIssuer')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the issuer name of the digital certificate.'), 'propget'],
        HRESULT,
        'Issuer',
        (['out', 'retval'], POINTER(BSTR), 'pCertIssuer')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the serial number of the digital certificate.'), 'propput'],
        HRESULT,
        'SerialNumber',
        (['in'], BSTR, 'pSerialNum')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the serial number of the digital certificate.'), 'propget'],
        HRESULT,
        'SerialNumber',
        (['out', 'retval'], POINTER(BSTR), 'pSerialNum')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the comment to be included with the digital signature.'), 'propput'],
        HRESULT,
        'Comment',
        (['in'], BSTR, 'pText')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the comment to be included with the digital signature.'), 'propget'],
        HRESULT,
        'Comment',
        (['out', 'retval'], POINTER(BSTR), 'pText')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the name of the time server to be used for the digital signature.'), 'propput'],
        HRESULT,
        'TimeServer',
        (['in'], BSTR, 'pTimeServerName')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the name of the time server to be used for the digital signature.'), 'propget'],
        HRESULT,
        'TimeServer',
        (['out', 'retval'], POINTER(BSTR), 'pTimeServerName')
    ),
]

################################################################
# code template for IAcadSecurityParams implementation
# class IAcadSecurityParams_Impl(object):
#     def _get(self):
#         'Specifies the security-related operations to be performed.'
#         #return pOperations
#     def _set(self, pOperations):
#         'Specifies the security-related operations to be performed.'
#     Action = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the encryption password.'
#         #return pSecret
#     def _set(self, pSecret):
#         'Specifies the encryption password.'
#     Password = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the encryption provider type.'
#         #return pProvType
#     def _set(self, pProvType):
#         'Specifies the encryption provider type.'
#     ProviderType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the encryption provider name.'
#         #return pProvName
#     def _set(self, pProvName):
#         'Specifies the encryption provider name.'
#     ProviderName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the encryption algorithm identifier.'
#         #return pAlgId
#     def _set(self, pAlgId):
#         'Specifies the encryption algorithm identifier.'
#     Algorithm = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the length of the encryption key.'
#         #return pKeyLen
#     def _set(self, pKeyLen):
#         'Specifies the length of the encryption key.'
#     KeyLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the subject name of the digital certificate'
#         #return pCertSubject
#     def _set(self, pCertSubject):
#         'Specifies the subject name of the digital certificate'
#     Subject = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the issuer name of the digital certificate.'
#         #return pCertIssuer
#     def _set(self, pCertIssuer):
#         'Specifies the issuer name of the digital certificate.'
#     Issuer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the serial number of the digital certificate.'
#         #return pSerialNum
#     def _set(self, pSerialNum):
#         'Specifies the serial number of the digital certificate.'
#     SerialNumber = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the comment to be included with the digital signature.'
#         #return pText
#     def _set(self, pText):
#         'Specifies the comment to be included with the digital signature.'
#     Comment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the time server to be used for the digital signature.'
#         #return pTimeServerName
#     def _set(self, pTimeServerName):
#         'Specifies the name of the time server to be used for the digital signature.'
#     TimeServer = property(_get, _set, doc = _set.__doc__)
#


class AcadLine(CoClass):
    """AutoCAD Line Object"""
    _reg_clsid_ = GUID('{FAF0242F-F14E-415C-AE6E-FFC7D2B160ED}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadLine(IAcadEntity):
    """AutoCAD Line Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{2577B2D6-F859-45D6-99A7-051D482D02BC}')
    _idlflags_ = ['dual', 'oleautomation']


AcadLine._com_interfaces_ = [IAcadLine]
AcadLine._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcPolymeshType'
acSimpleMesh = 0
acQuadSurfaceMesh = 5
acCubicSurfaceMesh = 6
acBezierSurfaceMesh = 8
AcPolymeshType = c_int  # enum


class IAcadSummaryInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """IAcadSummaryInfo Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{709B6D13-62D3-49D2-9431-91BD88A7DCEC}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSummaryInfo._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Returns the value of the author field.'), 'propget'],
        HRESULT,
        'Author',
        (['out', 'retval'], POINTER(BSTR), 'pAuthor')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Returns the value of the author field.'), 'propput'],
        HRESULT,
        'Author',
        (['in'], BSTR, 'pAuthor')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Returns the value of the comments field.'), 'propget'],
        HRESULT,
        'Comments',
        (['out', 'retval'], POINTER(BSTR), 'pComments')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Returns the value of the comments field.'), 'propput'],
        HRESULT,
        'Comments',
        (['in'], BSTR, 'pComments')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Returns the value of the hyperlink base path field.'), 'propget'],
        HRESULT,
        'HyperlinkBase',
        (['out', 'retval'], POINTER(BSTR), 'pHyperlinkBase')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Returns the value of the hyperlink base path field.'), 'propput'],
        HRESULT,
        'HyperlinkBase',
        (['in'], BSTR, 'pHyperlinkBase')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns the value of the keywords field.'), 'propget'],
        HRESULT,
        'Keywords',
        (['out', 'retval'], POINTER(BSTR), 'pKeywords')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Returns the value of the keywords field.'), 'propput'],
        HRESULT,
        'Keywords',
        (['in'], BSTR, 'pKeywords')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Returns the login name of the user to last save this database by using the LOGINNAME sysvar, or NULL if it has not been set.'), 'propget'],
        HRESULT,
        'LastSavedBy',
        (['out', 'retval'], POINTER(BSTR), 'pLastSavedBy')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Returns the login name of the user to last save this database by using the LOGINNAME sysvar, or NULL if it has not been set.'), 'propput'],
        HRESULT,
        'LastSavedBy',
        (['in'], BSTR, 'pLastSavedBy')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the value of the revision number field, which is a string.'), 'propget'],
        HRESULT,
        'RevisionNumber',
        (['out', 'retval'], POINTER(BSTR), 'pRevisionNumber')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the value of the revision number field, which is a string.'), 'propput'],
        HRESULT,
        'RevisionNumber',
        (['in'], BSTR, 'pRevisionNumber')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Returns the value of the subject field.'), 'propget'],
        HRESULT,
        'Subject',
        (['out', 'retval'], POINTER(BSTR), 'pSubject')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Returns the value of the subject field.'), 'propput'],
        HRESULT,
        'Subject',
        (['in'], BSTR, 'pSubject')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns the value of the title field.'), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'pTitle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns the value of the title field.'), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'pTitle')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Returns the number of custom information fields that have been set.')],
        HRESULT,
        'NumCustomInfo',
        (['out', 'retval'], POINTER(c_int), 'Index')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Gets the key and value of the custom field specified its index.')],
        HRESULT,
        'GetCustomByIndex',
        (['in'], c_int, 'Index'),
        (['out'], POINTER(BSTR), 'pKey'),
        (['out'], POINTER(BSTR), 'pValue')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Returns the number of custom information fields that have been set.')],
        HRESULT,
        'GetCustomByKey',
        (['in'], BSTR, 'key'),
        (['out'], POINTER(BSTR), 'pValue')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Sets set the key and value of the custom field specified by the index. Note, index range is from one to the number of custom fields.')],
        HRESULT,
        'SetCustomByIndex',
        (['in'], c_int, 'Index'),
        (['in'], BSTR, 'key'),
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Sets set the value of the custom field specified by the key.')],
        HRESULT,
        'SetCustomByKey',
        (['in'], BSTR, 'key'),
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Adds a new custom field at the end of the existing list of custom fields.')],
        HRESULT,
        'AddCustomInfo',
        (['in'], BSTR, 'key'),
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Removes a custom field (key and value) indicated by the index. Note, index range is from one to the number of custom fields.')],
        HRESULT,
        'RemoveCustomByIndex',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Removes a custom field (key and value) indicated by the key.')],
        HRESULT,
        'RemoveCustomByKey',
        (['in'], BSTR, 'key')
    ),
]

################################################################
# code template for IAcadSummaryInfo implementation
# class IAcadSummaryInfo_Impl(object):
#     def _get(self):
#         'Returns the value of the author field.'
#         #return pAuthor
#     def _set(self, pAuthor):
#         'Returns the value of the author field.'
#     Author = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the value of the comments field.'
#         #return pComments
#     def _set(self, pComments):
#         'Returns the value of the comments field.'
#     Comments = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the value of the hyperlink base path field.'
#         #return pHyperlinkBase
#     def _set(self, pHyperlinkBase):
#         'Returns the value of the hyperlink base path field.'
#     HyperlinkBase = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the value of the keywords field.'
#         #return pKeywords
#     def _set(self, pKeywords):
#         'Returns the value of the keywords field.'
#     Keywords = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the login name of the user to last save this database by using the LOGINNAME sysvar, or NULL if it has not been set.'
#         #return pLastSavedBy
#     def _set(self, pLastSavedBy):
#         'Returns the login name of the user to last save this database by using the LOGINNAME sysvar, or NULL if it has not been set.'
#     LastSavedBy = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the value of the revision number field, which is a string.'
#         #return pRevisionNumber
#     def _set(self, pRevisionNumber):
#         'Returns the value of the revision number field, which is a string.'
#     RevisionNumber = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the value of the subject field.'
#         #return pSubject
#     def _set(self, pSubject):
#         'Returns the value of the subject field.'
#     Subject = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the value of the title field.'
#         #return pTitle
#     def _set(self, pTitle):
#         'Returns the value of the title field.'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     def NumCustomInfo(self):
#         'Returns the number of custom information fields that have been set.'
#         #return Index
#
#     def GetCustomByIndex(self, Index):
#         'Gets the key and value of the custom field specified its index.'
#         #return pKey, pValue
#
#     def GetCustomByKey(self, key):
#         'Returns the number of custom information fields that have been set.'
#         #return pValue
#
#     def SetCustomByIndex(self, Index, key, Value):
#         'Sets set the key and value of the custom field specified by the index. Note, index range is from one to the number of custom fields.'
#         #return 
#
#     def SetCustomByKey(self, key, Value):
#         'Sets set the value of the custom field specified by the key.'
#         #return 
#
#     def AddCustomInfo(self, key, Value):
#         'Adds a new custom field at the end of the existing list of custom fields.'
#         #return 
#
#     def RemoveCustomByIndex(self, Index):
#         'Removes a custom field (key and value) indicated by the index. Note, index range is from one to the number of custom fields.'
#         #return 
#
#     def RemoveCustomByKey(self, key):
#         'Removes a custom field (key and value) indicated by the key.'
#         #return 
#


class IAcadDatabasePreferences(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object specifies the current AutoCAD drawing specific settings"""
    _case_insensitive_ = True
    _iid_ = GUID('{150F3C7A-A584-403E-93E8-98DB3D0A3485}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadDatabasePreferences._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies if multilines, traces, solids, all hatches (including solid-fill) and wide polylines are filled in'), 'propget'],
        HRESULT,
        'SolidFill',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Fill')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies if multilines, traces, solids, all hatches (including solid-fill) and wide polylines are filled in'), 'propput'],
        HRESULT,
        'SolidFill',
        (['in'], VARIANT_BOOL, 'Fill')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Determines if the current drawing can be edited in place when being referenced by another user'), 'propget'],
        HRESULT,
        'XRefEdit',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Edit')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Determines if the current drawing can be edited in place when being referenced by another user'), 'propput'],
        HRESULT,
        'XRefEdit',
        (['in'], VARIANT_BOOL, 'Edit')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Determines the visibility of xref-dependent layers and specifies if nested xref path changes are saved'), 'propget'],
        HRESULT,
        'XRefLayerVisibility',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'XRefLayerVis')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Determines the visibility of xref-dependent layers and specifies if nested xref path changes are saved'), 'propput'],
        HRESULT,
        'XRefLayerVisibility',
        (['in'], VARIANT_BOOL, 'XRefLayerVis')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Determines whether to launch the parent application when plotting OLE objects'), 'propget'],
        HRESULT,
        'OLELaunch',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Launch')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Determines whether to launch the parent application when plotting OLE objects'), 'propput'],
        HRESULT,
        'OLELaunch',
        (['in'], VARIANT_BOOL, 'Launch')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Determines if symbol names may include extended character sets, or more than 31 characters'), 'propget'],
        HRESULT,
        'AllowLongSymbolNames',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'LongNames')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Determines if symbol names may include extended character sets, or more than 31 characters'), 'propput'],
        HRESULT,
        'AllowLongSymbolNames',
        (['in'], VARIANT_BOOL, 'LongNames')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Toggles sorting of drawing objects by object selection'), 'propget'],
        HRESULT,
        'ObjectSortBySelection',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Toggles sorting of drawing objects by object selection'), 'propput'],
        HRESULT,
        'ObjectSortBySelection',
        (['in'], VARIANT_BOOL, 'Sort')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Toggles sorting of drawing objects by object snap'), 'propget'],
        HRESULT,
        'ObjectSortBySnap',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Toggles sorting of drawing objects by object snap'), 'propput'],
        HRESULT,
        'ObjectSortBySnap',
        (['in'], VARIANT_BOOL, 'Sort')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Toggles sorting of drawing objects by redraw order'), 'propget'],
        HRESULT,
        'ObjectSortByRedraws',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Toggles sorting of drawing objects by redraw order'), 'propput'],
        HRESULT,
        'ObjectSortByRedraws',
        (['in'], VARIANT_BOOL, 'Sort')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Toggles sorting of drawing objects by regeneration order'), 'propget'],
        HRESULT,
        'ObjectSortByRegens',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Toggles sorting of drawing objects by regeneration order'), 'propput'],
        HRESULT,
        'ObjectSortByRegens',
        (['in'], VARIANT_BOOL, 'Sort')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Toggles sorting of drawing objects by plotting order'), 'propget'],
        HRESULT,
        'ObjectSortByPlotting',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Toggles sorting of drawing objects by plotting order'), 'propput'],
        HRESULT,
        'ObjectSortByPlotting',
        (['in'], VARIANT_BOOL, 'Sort')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Toggles sorting of drawing objects by PostScript output order'), 'propget'],
        HRESULT,
        'ObjectSortByPSOutput',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Toggles sorting of drawing objects by PostScript output order'), 'propput'],
        HRESULT,
        'ObjectSortByPSOutput',
        (['in'], VARIANT_BOOL, 'Sort')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the number of contour lines (isolines) per surface on objects'), 'propput'],
        HRESULT,
        'ContourLinesPerSurface',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the number of contour lines (isolines) per surface on objects'), 'propget'],
        HRESULT,
        'ContourLinesPerSurface',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Controls if silhouette curves of solid objects are displayed in Wireframe mode'), 'propput'],
        HRESULT,
        'DisplaySilhouette',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Controls if silhouette curves of solid objects are displayed in Wireframe mode'), 'propget'],
        HRESULT,
        'DisplaySilhouette',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies the maximum number of active viewports'), 'propput'],
        HRESULT,
        'MaxActiveViewports',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies the maximum number of active viewports'), 'propget'],
        HRESULT,
        'MaxActiveViewports',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the smoothness of shaded, rendered, and hidden line-removed objects'), 'propput'],
        HRESULT,
        'RenderSmoothness',
        (['in'], c_double, 'Path')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the smoothness of shaded, rendered, and hidden line-removed objects'), 'propget'],
        HRESULT,
        'RenderSmoothness',
        (['out', 'retval'], POINTER(c_double), 'Path')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the number of line segments to be generated for each polyline curve'), 'propput'],
        HRESULT,
        'SegmentPerPolyline',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the number of line segments to be generated for each polyline curve'), 'propget'],
        HRESULT,
        'SegmentPerPolyline',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Toggles the display of frames for text objects instead of displaying the text itself'), 'propput'],
        HRESULT,
        'TextFrameDisplay',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Toggles the display of frames for text objects instead of displaying the text itself'), 'propget'],
        HRESULT,
        'TextFrameDisplay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the lineweight of an individual entity or the default lineweight for the drawing'), 'propput'],
        HRESULT,
        'Lineweight',
        (['in'], AcLineWeight, 'Path')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the lineweight of an individual entity or the default lineweight for the drawing'), 'propget'],
        HRESULT,
        'Lineweight',
        (['out', 'retval'], POINTER(AcLineWeight), 'Path')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies whether lineweights are displayed in model space for the drawing'), 'propput'],
        HRESULT,
        'LineWeightDisplay',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies whether lineweights are displayed in model space for the drawing'), 'propget'],
        HRESULT,
        'LineWeightDisplay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
]

################################################################
# code template for IAcadDatabasePreferences implementation
# class IAcadDatabasePreferences_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Specifies if multilines, traces, solids, all hatches (including solid-fill) and wide polylines are filled in'
#         #return Fill
#     def _set(self, Fill):
#         'Specifies if multilines, traces, solids, all hatches (including solid-fill) and wide polylines are filled in'
#     SolidFill = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines if the current drawing can be edited in place when being referenced by another user'
#         #return Edit
#     def _set(self, Edit):
#         'Determines if the current drawing can be edited in place when being referenced by another user'
#     XRefEdit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines the visibility of xref-dependent layers and specifies if nested xref path changes are saved'
#         #return XRefLayerVis
#     def _set(self, XRefLayerVis):
#         'Determines the visibility of xref-dependent layers and specifies if nested xref path changes are saved'
#     XRefLayerVisibility = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether to launch the parent application when plotting OLE objects'
#         #return Launch
#     def _set(self, Launch):
#         'Determines whether to launch the parent application when plotting OLE objects'
#     OLELaunch = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines if symbol names may include extended character sets, or more than 31 characters'
#         #return LongNames
#     def _set(self, LongNames):
#         'Determines if symbol names may include extended character sets, or more than 31 characters'
#     AllowLongSymbolNames = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles sorting of drawing objects by object selection'
#         #return Sort
#     def _set(self, Sort):
#         'Toggles sorting of drawing objects by object selection'
#     ObjectSortBySelection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles sorting of drawing objects by object snap'
#         #return Sort
#     def _set(self, Sort):
#         'Toggles sorting of drawing objects by object snap'
#     ObjectSortBySnap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles sorting of drawing objects by redraw order'
#         #return Sort
#     def _set(self, Sort):
#         'Toggles sorting of drawing objects by redraw order'
#     ObjectSortByRedraws = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles sorting of drawing objects by regeneration order'
#         #return Sort
#     def _set(self, Sort):
#         'Toggles sorting of drawing objects by regeneration order'
#     ObjectSortByRegens = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles sorting of drawing objects by plotting order'
#         #return Sort
#     def _set(self, Sort):
#         'Toggles sorting of drawing objects by plotting order'
#     ObjectSortByPlotting = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles sorting of drawing objects by PostScript output order'
#         #return Sort
#     def _set(self, Sort):
#         'Toggles sorting of drawing objects by PostScript output order'
#     ObjectSortByPSOutput = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the number of contour lines (isolines) per surface on objects'
#         #return Path
#     def _set(self, Path):
#         'Specifies the number of contour lines (isolines) per surface on objects'
#     ContourLinesPerSurface = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls if silhouette curves of solid objects are displayed in Wireframe mode'
#         #return Path
#     def _set(self, Path):
#         'Controls if silhouette curves of solid objects are displayed in Wireframe mode'
#     DisplaySilhouette = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the maximum number of active viewports'
#         #return Path
#     def _set(self, Path):
#         'Specifies the maximum number of active viewports'
#     MaxActiveViewports = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the smoothness of shaded, rendered, and hidden line-removed objects'
#         #return Path
#     def _set(self, Path):
#         'Specifies the smoothness of shaded, rendered, and hidden line-removed objects'
#     RenderSmoothness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the number of line segments to be generated for each polyline curve'
#         #return Path
#     def _set(self, Path):
#         'Specifies the number of line segments to be generated for each polyline curve'
#     SegmentPerPolyline = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of frames for text objects instead of displaying the text itself'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of frames for text objects instead of displaying the text itself'
#     TextFrameDisplay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the lineweight of an individual entity or the default lineweight for the drawing'
#         #return Path
#     def _set(self, Path):
#         'Specifies the lineweight of an individual entity or the default lineweight for the drawing'
#     Lineweight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether lineweights are displayed in model space for the drawing'
#         #return Path
#     def _set(self, Path):
#         'Specifies whether lineweights are displayed in model space for the drawing'
#     LineWeightDisplay = property(_get, _set, doc = _set.__doc__)
#


class AcadMText(CoClass):
    """AutoCAD MText Object"""
    _reg_clsid_ = GUID('{0A9A05BA-C08E-4FF6-88F3-6D5582499B83}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadMText(IAcadEntity):
    """AutoCAD MText Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{234A241F-CF00-4CAB-8072-809A1367FEB6}')
    _idlflags_ = ['dual', 'oleautomation']


AcadMText._com_interfaces_ = [IAcadMText]
AcadMText._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPoint(CoClass):
    """AutoCAD Point Object"""
    _reg_clsid_ = GUID('{DA641859-AFBA-4E5E-9D69-38C88D7542F8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPoint._com_interfaces_ = [IAcadPoint]
AcadPoint._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcPrinterSpoolAlert'
acPrinterAlwaysAlert = 0
acPrinterAlertOnce = 1
acPrinterNeverAlertLogOnce = 2
acPrinterNeverAlert = 3
AcPrinterSpoolAlert = c_int  # enum


class AcadPointCloudEx(CoClass):
    """AutoCAD Point Cloud Object"""
    _reg_clsid_ = GUID('{F3448242-A117-4E8E-97A4-646EB9CC2565}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPointCloudEx._com_interfaces_ = [IAcadPointCloudEx2]
AcadPointCloudEx._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPolyline(CoClass):
    """AutoCAD Polyline Object"""
    _reg_clsid_ = GUID('{4AA2143D-2F10-44D3-B43B-CE6E44EE0B54}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPolyline._com_interfaces_ = [IAcadPolyline]
AcadPolyline._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadSummaryInfo(CoClass):
    """AcadSummaryInfo Class"""
    _reg_clsid_ = GUID('{2820B3F1-7E73-4475-954D-AE64B1B8E04C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSummaryInfo._com_interfaces_ = [IAcadSummaryInfo]
# values for enumeration 'AcZoomScaleType'
acZoomScaledAbsolute = 0
acZoomScaledRelative = 1
acZoomScaledRelativePSpace = 2
AcZoomScaleType = c_int  # enum


class AcadPolygonMesh(CoClass):
    """AutoCAD PolygonMesh Object"""
    _reg_clsid_ = GUID('{7B4B6353-6F65-4964-BD6D-7917F7E1EF29}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPolygonMesh(IAcadEntity):
    """AutoCAD PolygonMesh Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{178EB1CF-BB81-4D9E-91D7-A8E5A24023FE}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPolygonMesh._com_interfaces_ = [IAcadPolygonMesh]
AcadPolygonMesh._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDatabasePreferences(CoClass):
    """This object specifies the current AutoCAD drawing specific settings"""
    _reg_clsid_ = GUID('{F9341EFE-0063-4541-80CB-9D9D068C4798}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDatabasePreferences._com_interfaces_ = [IAcadDatabasePreferences]
# values for enumeration 'AcPlotPolicyForNewDwgs'
acPolicyNewDefault = 0
acPolicyNewLegacy = 1
AcPlotPolicyForNewDwgs = c_int  # enum


class AcadRay(CoClass):
    """AutoCAD Ray Object"""
    _reg_clsid_ = GUID('{DEBFEB6D-D92F-45A4-83C0-D352ED182BDF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadRay._com_interfaces_ = [IAcadRay]
AcadRay._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDatabase(CoClass):
    """The contents of an XRef block"""
    _reg_clsid_ = GUID('{C151302D-9E05-4645-BCA8-91BB6C2217C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDatabase._com_interfaces_ = [IAcadDatabase]
# values for enumeration 'AcadSecurityParamsConstants'
ACADSECURITYPARAMS_ALGID_RC4 = 26625
AcadSecurityParamsConstants = c_int  # enum


class AcadShape(CoClass):
    """AutoCAD Shape Object"""
    _reg_clsid_ = GUID('{9DEE32A4-1B1E-4BC4-A505-C2DDFC1B93D4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadShape._com_interfaces_ = [IAcadShape]
AcadShape._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcDragDisplayMode'
acDragDoNotDisplay = 0
acDragDisplayOnRequest = 1
acDragDisplayAutomatically = 2
AcDragDisplayMode = c_int  # enum
# values for enumeration 'AcadSecurityParamsType'
ACADSECURITYPARAMS_ENCRYPT_DATA = 1
ACADSECURITYPARAMS_ENCRYPT_PROPS = 2
ACADSECURITYPARAMS_SIGN_DATA = 16
ACADSECURITYPARAMS_ADD_TIMESTAMP = 32
AcadSecurityParamsType = c_int  # enum


class AcadSolid(CoClass):
    """AutoCAD Solid Object"""
    _reg_clsid_ = GUID('{F540952D-D226-4C73-99B5-C44CA8230E23}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSolid._com_interfaces_ = [IAcadSolid]
AcadSolid._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcPlotPolicyForLegacyDwgs'
acPolicyLegacyDefault = 0
acPolicyLegacyQuery = 1
acPolicyLegacyLegacy = 2
AcPlotPolicyForLegacyDwgs = c_int  # enum


class AcadSpline(CoClass):
    """AutoCAD Spline Object"""
    _reg_clsid_ = GUID('{6BE676F9-7069-4582-BBFB-507A22B9F9EE}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSpline._com_interfaces_ = [IAcadSpline]
AcadSpline._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcARXDemandLoad'
acDemanLoadDisable = 0
acDemandLoadOnObjectDetect = 1
acDemandLoadCmdInvoke = 2
AcARXDemandLoad = c_int  # enum


class AcadText(CoClass):
    """AutoCAD Text Object"""
    _reg_clsid_ = GUID('{410C5378-CED6-4C12-89E1-9524EA4757D8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadText._com_interfaces_ = [IAcadText]
AcadText._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadSelectionSets(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """The collection of all selection sets in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{A0A53FF5-1CCE-4A79-A74A-7BCDEBA03F35}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSelectionSets._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadSelectionSet)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadSelectionSet)), 'pSet')
    ),
]

################################################################
# code template for IAcadSelectionSets implementation
# class IAcadSelectionSets_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pVal
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pSet
#
# values for enumeration 'AcOleQuality'
acOQLineArt = 0
acOQText = 1
acOQGraphics = 2
acOQPhoto = 3
acOQHighPhoto = 4
AcOleQuality = c_int  # enum

IAcadRegion._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the area of the region'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the center of area or mass for a region or solid'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Centroid',
        (['out', 'retval'], POINTER(VARIANT), 'Centroid')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Gets the moment of inertia for the solid'), 'nonbrowsable', 'propget'],
        HRESULT,
        'MomentOfInertia',
        (['out', 'retval'], POINTER(VARIANT), 'momentInertia')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the perimeter of the region'), 'propget'],
        HRESULT,
        'Perimeter',
        (['out', 'retval'], POINTER(c_double), 'Perimeter')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Gets the principal directions of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'PrincipalDirections',
        (['out', 'retval'], POINTER(VARIANT), 'prinDir')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Gets the principal moments property of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'PrincipalMoments',
        (['out', 'retval'], POINTER(VARIANT), 'prinMoments')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Gets the product of inertia of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ProductOfInertia',
        (['out', 'retval'], POINTER(c_double), 'prodInertia')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Gets the radius of gyration of the solid or region'), 'nonbrowsable', 'propget'],
        HRESULT,
        'RadiiOfGyration',
        (['out', 'retval'], POINTER(VARIANT), 'radiiGyration')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Perform a Boolean operation against another region.')],
        HRESULT,
        'Boolean',
        (['in'], AcBooleanType, 'Operation'),
        (['in'], POINTER(IAcadRegion), 'Object')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Explodes the region and returns the sub-entities as an array of object.')],
        HRESULT,
        'Explode',
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
]

################################################################
# code template for IAcadRegion implementation
# class IAcadRegion_Impl(object):
#     @property
#     def Area(self):
#         'Specifies the area of the region'
#         #return Area
#
#     @property
#     def Centroid(self):
#         'Gets the center of area or mass for a region or solid'
#         #return Centroid
#
#     @property
#     def MomentOfInertia(self):
#         'Gets the moment of inertia for the solid'
#         #return momentInertia
#
#     @property
#     def Normal(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#
#     @property
#     def Perimeter(self):
#         'Specifies the perimeter of the region'
#         #return Perimeter
#
#     @property
#     def PrincipalDirections(self):
#         'Gets the principal directions of the solid or region'
#         #return prinDir
#
#     @property
#     def PrincipalMoments(self):
#         'Gets the principal moments property of the solid or region'
#         #return prinMoments
#
#     @property
#     def ProductOfInertia(self):
#         'Gets the product of inertia of the solid or region'
#         #return prodInertia
#
#     @property
#     def RadiiOfGyration(self):
#         'Gets the radius of gyration of the solid or region'
#         #return radiiGyration
#
#     def Boolean(self, Operation, Object):
#         'Perform a Boolean operation against another region.'
#         #return 
#
#     def Explode(self):
#         'Explodes the region and returns the sub-entities as an array of object.'
#         #return pArrayObjs
#


class AcadTolerance(CoClass):
    """AutoCAD Tolerance Object"""
    _reg_clsid_ = GUID('{8BD77948-2B22-4508-A5D0-9BDF25D6B320}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadTolerance(IAcadEntity):
    """AutoCAD Tolerance Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{632D13BC-6146-4391-B198-01503A139B92}')
    _idlflags_ = ['dual', 'oleautomation']


AcadTolerance._com_interfaces_ = [IAcadTolerance]
AcadTolerance._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadLayerStateManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """IAcadLayerStateManager Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{42344E80-3558-49CD-A738-5602E8B4306A}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcLayerStateMask'
acLsNone = 0
acLsOn = 1
acLsFrozen = 2
acLsLocked = 4
acLsPlot = 8
acLsNewViewport = 16
acLsColor = 32
acLsLineType = 64
acLsLineWeight = 128
acLsPlotStyle = 256
acLsAll = 65535
AcLayerStateMask = c_int  # enum

IAcadLayerStateManager._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Sets the working database for the layer state manager.')],
        HRESULT,
        'SetDatabase',
        (['in'], POINTER(IAcadDatabase), 'iHostDb')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Sets the mask used for restoring the specified layer state.'), 'propput'],
        HRESULT,
        'Mask',
        (['in'], BSTR, 'bsName'),
        (['in'], AcLayerStateMask, 'eMask')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Sets the mask used for restoring the specified layer state.'), 'propget'],
        HRESULT,
        'Mask',
        (['in'], BSTR, 'bsName'),
        (['out', 'retval'], POINTER(AcLayerStateMask), 'eMask')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Saves the attribute mask and the state of all layers into the specified layer state.')],
        HRESULT,
        'Save',
        (['in'], BSTR, 'bsName'),
        (['in'], AcLayerStateMask, 'eMask')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Restores the layers to the specified state as per the layer state mask.')],
        HRESULT,
        'Restore',
        (['in'], BSTR, 'bsName')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Deletes the specified layers state.')],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'bsName')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Renames the specified layers state.')],
        HRESULT,
        'Rename',
        (['in'], BSTR, 'bsName'),
        (['in'], BSTR, 'bsNewName')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Imports all layer states from the specified file.')],
        HRESULT,
        'Import',
        (['in'], BSTR, 'bsFilename')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Exports the specified layer state to the specified file.')],
        HRESULT,
        'Export',
        (['in'], BSTR, 'bsName'),
        (['in'], BSTR, 'bsFilename')
    ),
]

################################################################
# code template for IAcadLayerStateManager implementation
# class IAcadLayerStateManager_Impl(object):
#     def SetDatabase(self, iHostDb):
#         'Sets the working database for the layer state manager.'
#         #return 
#
#     def _get(self, bsName):
#         'Sets the mask used for restoring the specified layer state.'
#         #return eMask
#     def _set(self, bsName, eMask):
#         'Sets the mask used for restoring the specified layer state.'
#     Mask = property(_get, _set, doc = _set.__doc__)
#
#     def Save(self, bsName, eMask):
#         'Saves the attribute mask and the state of all layers into the specified layer state.'
#         #return 
#
#     def Restore(self, bsName):
#         'Restores the layers to the specified state as per the layer state mask.'
#         #return 
#
#     def Delete(self, bsName):
#         'Deletes the specified layers state.'
#         #return 
#
#     def Rename(self, bsName, bsNewName):
#         'Renames the specified layers state.'
#         #return 
#
#     def Import(self, bsFilename):
#         'Imports all layer states from the specified file.'
#         #return 
#
#     def Export(self, bsName, bsFilename):
#         'Exports the specified layer state to the specified file.'
#         #return 
#


class AcadTrace(CoClass):
    """AutoCAD Trace Object"""
    _reg_clsid_ = GUID('{0B986F63-9DDA-41DC-AB65-1770AD991B66}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadTrace._com_interfaces_ = [IAcadTrace]
AcadTrace._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcTextFontStyle'
acFontRegular = 0
acFontItalic = 1
acFontBold = 2
acFontBoldItalic = 3
AcTextFontStyle = c_int  # enum


class AcadXline(CoClass):
    """AutoCAD Xline Object"""
    _reg_clsid_ = GUID('{AA819B76-19FF-4033-93BD-C329A5FDF5AE}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadXline._com_interfaces_ = [IAcadXline]
AcadXline._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPViewport(CoClass):
    """AutoCAD Paperspace Viewport Object"""
    _reg_clsid_ = GUID('{F7550EB8-29C3-498F-A0FE-F41F6652C879}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPViewport(IAcadEntity):
    """IAcadPViewport Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{8E70F234-A6D0-4373-87C6-F041E6396E43}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPViewport._com_interfaces_ = [IAcadPViewport]
AcadPViewport._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcLoadPalette'
acPaletteByDrawing = 0
acPaletteBySession = 1
AcLoadPalette = c_int  # enum


class AcadMInsertBlock(CoClass):
    """AutoCAD MInsertBlock Object"""
    _reg_clsid_ = GUID('{1F50A6D7-176E-4D22-8E22-A29B4D7CE3E9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMInsertBlock._com_interfaces_ = [IAcadMInsertBlock]
AcadMInsertBlock._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadSelectionSet._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadEntity)), 'pEntity')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets the highlight status for the given object, or for all objects in a given selection set')],
        HRESULT,
        'Highlight',
        (['in'], VARIANT_BOOL, 'bFlag')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Erases all the objects in a selection set')],
        HRESULT,
        'Erase',
    ),
    COMMETHOD(
        [dispid(5), helpstring('Updates the object to the drawing screen')],
        HRESULT,
        'Update',
    ),
    COMMETHOD(
        [dispid(6), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Adds one or more objects to the specified selection set')],
        HRESULT,
        'AddItems',
        (['in'], VARIANT, 'pSelSet')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Removes specified items from the group or selection set')],
        HRESULT,
        'RemoveItems',
        (['in'], VARIANT, 'Objects')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Clears the specified selection set of all items')],
        HRESULT,
        'Clear',
    ),
    COMMETHOD(
        [dispid(10), helpstring('Selects objects and places them into a selection set')],
        HRESULT,
        'Select',
        (['in'], AcSelect, 'Mode'),
        (['in', 'optional'], VARIANT, 'Point1'),
        (['in', 'optional'], VARIANT, 'Point2'),
        (['in', 'optional'], VARIANT, 'FilterType'),
        (['in', 'optional'], VARIANT, 'FilterData')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Selects an object passing through a given point and places it into a selection set')],
        HRESULT,
        'SelectAtPoint',
        (['in'], VARIANT, 'Point'),
        (['in', 'optional'], VARIANT, 'FilterType'),
        (['in', 'optional'], VARIANT, 'FilterData')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Selects entities within a fence and adds them to the selection set')],
        HRESULT,
        'SelectByPolygon',
        (['in'], AcSelect, 'Mode'),
        (['in'], VARIANT, 'PointsList'),
        (['in', 'optional'], VARIANT, 'FilterType'),
        (['in', 'optional'], VARIANT, 'FilterData')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Prompts the user to pick an object from the screen')],
        HRESULT,
        'SelectOnScreen',
        (['in', 'optional'], VARIANT, 'FilterType'),
        (['in', 'optional'], VARIANT, 'FilterData')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Deletes a specified object')],
        HRESULT,
        'Delete',
    ),
]

################################################################
# code template for IAcadSelectionSet implementation
# class IAcadSelectionSet_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pEntity
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pVal
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def Name(self):
#         'Specifies the name of the object'
#         #return bstrName
#
#     def Highlight(self, bFlag):
#         'Sets the highlight status for the given object, or for all objects in a given selection set'
#         #return 
#
#     def Erase(self):
#         'Erases all the objects in a selection set'
#         #return 
#
#     def Update(self):
#         'Updates the object to the drawing screen'
#         #return 
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def AddItems(self, pSelSet):
#         'Adds one or more objects to the specified selection set'
#         #return 
#
#     def RemoveItems(self, Objects):
#         'Removes specified items from the group or selection set'
#         #return 
#
#     def Clear(self):
#         'Clears the specified selection set of all items'
#         #return 
#
#     def Select(self, Mode, Point1, Point2, FilterType, FilterData):
#         'Selects objects and places them into a selection set'
#         #return 
#
#     def SelectAtPoint(self, Point, FilterType, FilterData):
#         'Selects an object passing through a given point and places it into a selection set'
#         #return 
#
#     def SelectByPolygon(self, Mode, PointsList, FilterType, FilterData):
#         'Selects entities within a fence and adds them to the selection set'
#         #return 
#
#     def SelectOnScreen(self, FilterType, FilterData):
#         'Prompts the user to pick an object from the screen'
#         #return 
#
#     def Delete(self):
#         'Deletes a specified object'
#         #return 
#
# values for enumeration 'AcProxyImage'
acProxyNotShow = 0
acProxyShow = 1
acProxyBoundingBox = 2
AcProxyImage = c_int  # enum


class AcadPolyfaceMesh(CoClass):
    """AutoCAD PolyfaceMesh Object"""
    _reg_clsid_ = GUID('{FD1D0023-6D6C-4140-A37A-AB10BFF1C01D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPolyfaceMesh._com_interfaces_ = [IAcadPolyfaceMesh]
AcadPolyfaceMesh._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadMLine(CoClass):
    """AutoCAD MLine Object"""
    _reg_clsid_ = GUID('{9C0DF51E-0F61-48DE-9EC4-4D003B93E536}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMLine._com_interfaces_ = [IAcadMLine]
AcadMLine._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadExternalReference(CoClass):
    """AutoCAD External Reference Object"""
    _reg_clsid_ = GUID('{B1A1FC63-1196-487D-873A-06165407A826}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadExternalReference._com_interfaces_ = [IAcadExternalReference]
AcadExternalReference._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadOle(IAcadEntity):
    """IAcadOle Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{49B9397A-4EFD-4087-A188-06ABF76AA9C5}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcOleType'
acOTLink = 1
acOTEmbedded = 2
acOTStatic = 3
AcOleType = c_int  # enum
# values for enumeration 'AcOlePlotQuality'
acOPQMonochrome = 0
acOPQLowGraphics = 1
acOPQHighGraphics = 2
AcOlePlotQuality = c_int  # enum

IAcadOle._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the origin coordinates (upper left corner) of the OLE object'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the origin coordinates (upper left corner) of the OLE object'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the rotation angle of the OLE object'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rot')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the rotation angle of the OLE object'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rot')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the width of the OLE object box'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the width of the OLE object box'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the height of the OLE object box'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the height of the OLE object box'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width of the object as a percentage of original width'), 'propget'],
        HRESULT,
        'ScaleWidth',
        (['out', 'retval'], POINTER(c_double), 'swidth')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width of the object as a percentage of original width'), 'propput'],
        HRESULT,
        'ScaleWidth',
        (['in'], c_double, 'swidth')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the height of the object as a percentage of original height'), 'propget'],
        HRESULT,
        'ScaleHeight',
        (['out', 'retval'], POINTER(c_double), 'sheight')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the height of the object as a percentage of original height'), 'propput'],
        HRESULT,
        'ScaleHeight',
        (['in'], c_double, 'sheight')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Ensures the width and height of the object stay in proportion'), 'propget'],
        HRESULT,
        'LockAspectRatio',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'aspect')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Ensures the width and height of the object stay in proportion'), 'propput'],
        HRESULT,
        'LockAspectRatio',
        (['in'], VARIANT_BOOL, 'aspect')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies whether the OLE object is linked to the original pasted file when opening object for editing'), 'propget'],
        HRESULT,
        'OleItemType',
        (['out', 'retval'], POINTER(AcOleType), 'pType')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies whether the OLE object is linked to the original pasted file when opening object for editing'), 'propput'],
        HRESULT,
        'OleItemType',
        (['in'], AcOleType, 'pType')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Controls plot quality of OLE object based on file type selected from list'), 'propget'],
        HRESULT,
        'OlePlotQuality',
        (['out', 'retval'], POINTER(AcOlePlotQuality), 'pPQuality')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Controls plot quality of OLE object based on file type selected from list'), 'propput'],
        HRESULT,
        'OlePlotQuality',
        (['in'], AcOlePlotQuality, 'pPQuality')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Application for editing OLE object'), 'propget'],
        HRESULT,
        'OleSourceApp',
        (['out', 'retval'], POINTER(BSTR), 'srcApp')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Application for editing OLE object'), 'propput'],
        HRESULT,
        'OleSourceApp',
        (['in'], BSTR, 'srcApp')
    ),
]

################################################################
# code template for IAcadOle implementation
# class IAcadOle_Impl(object):
#     def _get(self):
#         'Specifies the origin coordinates (upper left corner) of the OLE object'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specifies the origin coordinates (upper left corner) of the OLE object'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the OLE object'
#         #return rot
#     def _set(self, rot):
#         'Specifies the rotation angle of the OLE object'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the OLE object box'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the OLE object box'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the OLE object box'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the OLE object box'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the object as a percentage of original width'
#         #return swidth
#     def _set(self, swidth):
#         'Specifies the width of the object as a percentage of original width'
#     ScaleWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the object as a percentage of original height'
#         #return sheight
#     def _set(self, sheight):
#         'Specifies the height of the object as a percentage of original height'
#     ScaleHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Ensures the width and height of the object stay in proportion'
#         #return aspect
#     def _set(self, aspect):
#         'Ensures the width and height of the object stay in proportion'
#     LockAspectRatio = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether the OLE object is linked to the original pasted file when opening object for editing'
#         #return pType
#     def _set(self, pType):
#         'Specifies whether the OLE object is linked to the original pasted file when opening object for editing'
#     OleItemType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls plot quality of OLE object based on file type selected from list'
#         #return pPQuality
#     def _set(self, pPQuality):
#         'Controls plot quality of OLE object based on file type selected from list'
#     OlePlotQuality = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Application for editing OLE object'
#         #return srcApp
#     def _set(self, srcApp):
#         'Application for editing OLE object'
#     OleSourceApp = property(_get, _set, doc = _set.__doc__)
#


class AcadComparedReference(CoClass):
    """AutoCAD External Reference Object"""
    _reg_clsid_ = GUID('{0772D8BC-8999-435F-9BED-785B4539CFF2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadComparedReference._com_interfaces_ = [IAcadComparedReference]
AcadComparedReference._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadTable(CoClass):
    """AutoCAD Table Object"""
    _reg_clsid_ = GUID('{46AFC62B-2FF8-41CB-82B8-B1CFCC675237}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadTable._com_interfaces_ = [IAcadTable]
AcadTable._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcMenuGroupType'
acBaseMenuGroup = 0
acPartialMenuGroup = 1
AcMenuGroupType = c_int  # enum


class IAcadHelix(IAcadEntity):
    """IAcadSpring Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{9E48F748-72FE-4FAB-9765-A662B3AC37CE}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcHelixConstrainType'
acTurnHeight = 0
acTurns = 1
acHeight = 2
AcHelixConstrainType = c_int  # enum
# values for enumeration 'AcHelixTwistType'
acCCW = 0
acCW = 1
AcHelixTwistType = c_int  # enum

IAcadHelix._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the X, Y, and Z for the center of the base of the helix'), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(VARIANT), 'StartPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the X, Y, and Z for the center of the base of the helix'), 'propput'],
        HRESULT,
        'Position',
        (['in'], VARIANT, 'StartPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Controls which property is constrained when editing other property values'), 'propget'],
        HRESULT,
        'Constrain',
        (['out', 'retval'], POINTER(AcHelixConstrainType), 'constrainType')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Controls which property is constrained when editing other property values'), 'propput'],
        HRESULT,
        'Constrain',
        (['in'], AcHelixConstrainType, 'constrainType')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the height of the helix'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Length')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the height of the helix'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Length')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the number of turns for the helix'), 'propget'],
        HRESULT,
        'Turns',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Turns')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the number of turns for the helix'), 'propput'],
        HRESULT,
        'Turns',
        (['in'], ACAD_NOUNITS, 'Turns')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the height of one full turn for the helix'), 'propget'],
        HRESULT,
        'TurnHeight',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the height of one full turn for the helix'), 'propput'],
        HRESULT,
        'TurnHeight',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the base radius of the helix'), 'propget'],
        HRESULT,
        'BaseRadius',
        (['out', 'retval'], POINTER(c_double), 'Radius')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the base radius of the helix'), 'propput'],
        HRESULT,
        'BaseRadius',
        (['in'], c_double, 'Radius')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the top radius of the helix'), 'propget'],
        HRESULT,
        'TopRadius',
        (['out', 'retval'], POINTER(c_double), 'Radius')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the top radius of the helix'), 'propput'],
        HRESULT,
        'TopRadius',
        (['in'], c_double, 'Radius')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Controls the twist direction of the helix'), 'propget'],
        HRESULT,
        'Twist',
        (['out', 'retval'], POINTER(AcHelixTwistType), 'twistType')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Controls the twist direction of the helix'), 'propput'],
        HRESULT,
        'Twist',
        (['in'], AcHelixTwistType, 'twistType')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Displays the constant incline angle for the helix path'), 'propget'],
        HRESULT,
        'TurnSlope',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'slopeAngle')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the total length of the helix'), 'propget'],
        HRESULT,
        'TotalLength',
        (['out', 'retval'], POINTER(c_double), 'TotalLength')
    ),
]

################################################################
# code template for IAcadHelix implementation
# class IAcadHelix_Impl(object):
#     def _get(self):
#         'Specifies the X, Y, and Z for the center of the base of the helix'
#         #return StartPoint
#     def _set(self, StartPoint):
#         'Specifies the X, Y, and Z for the center of the base of the helix'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls which property is constrained when editing other property values'
#         #return constrainType
#     def _set(self, constrainType):
#         'Controls which property is constrained when editing other property values'
#     Constrain = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the helix'
#         #return Length
#     def _set(self, Length):
#         'Specifies the height of the helix'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the number of turns for the helix'
#         #return Turns
#     def _set(self, Turns):
#         'Specifies the number of turns for the helix'
#     Turns = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of one full turn for the helix'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies the height of one full turn for the helix'
#     TurnHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the base radius of the helix'
#         #return Radius
#     def _set(self, Radius):
#         'Specifies the base radius of the helix'
#     BaseRadius = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the top radius of the helix'
#         #return Radius
#     def _set(self, Radius):
#         'Specifies the top radius of the helix'
#     TopRadius = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the twist direction of the helix'
#         #return twistType
#     def _set(self, twistType):
#         'Controls the twist direction of the helix'
#     Twist = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def TurnSlope(self):
#         'Displays the constant incline angle for the helix path'
#         #return slopeAngle
#
#     @property
#     def TotalLength(self):
#         'Specifies the total length of the helix'
#         #return TotalLength
#
# values for enumeration 'AcMenuFileType'
acMenuFileCompiled = 0
acMenuFileSource = 1
AcMenuFileType = c_int  # enum
# values for enumeration 'AcMenuItemType'
acMenuItem = 0
acMenuSeparator = 1
acMenuSubMenu = 2
AcMenuItemType = c_int  # enum


class AcadGeoPositionMarker(CoClass):
    """AutoCAD Point Object"""
    _reg_clsid_ = GUID('{5AA6CF53-6973-488B-9889-890446476CA7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadGeoPositionMarker._com_interfaces_ = [IAcadGeoPositionMarker]
AcadGeoPositionMarker._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcPointCloudColorType'
acTrueColor = 0
acByColor = 1
AcPointCloudColorType = c_int  # enum
# values for enumeration 'AcPointCloudIntensityStyle'
acIntensityGrayscale = 0
acIntensityRainbow = 1
acIntensityRed = 2
acIntensityGreen = 3
acIntensityBlue = 4
acIntensityEditableFlag = 5
AcPointCloudIntensityStyle = c_int  # enum
# values for enumeration 'AcPointCloudStylizationType'
acScanColor = 0
acObjectColor = 1
acNormal = 2
acIntensity = 3
AcPointCloudStylizationType = c_int  # enum

IAcadPointCloud._methods_ = [
    COMMETHOD(
        [dispid(4), helpstring('Specifies the point cloud color source.'), 'propget'],
        HRESULT,
        'UseEntityColor',
        (['out', 'retval'], POINTER(AcPointCloudColorType), 'val')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the point cloud color source.'), 'propput'],
        HRESULT,
        'UseEntityColor',
        (['in'], AcPointCloudColorType, 'val')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies whether to display point cloud intensity using a shaded color scheme. \nYou can only see the intensity color mapping effect in 3D visual style and when hardware acceleration is on.'), 'propget'],
        HRESULT,
        'ShowIntensity',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'val')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies whether to display point cloud intensity using a shaded color scheme. \nYou can only see the intensity color mapping effect in 3D visual style and when hardware acceleration is on.'), 'propput'],
        HRESULT,
        'ShowIntensity',
        (['in'], VARIANT_BOOL, 'val')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the color scheme to use for displaying intensity values.'), 'propget'],
        HRESULT,
        'IntensityColorScheme',
        (['out', 'retval'], POINTER(AcPointCloudIntensityStyle), 'val')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the color scheme to use for displaying intensity values.'), 'propput'],
        HRESULT,
        'IntensityColorScheme',
        (['in'], AcPointCloudIntensityStyle, 'val')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the insertion point of the point cloud.'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'EndPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the insertion point of the point cloud.'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'EndPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the rotation angle of the point cloud.'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'val')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the rotation angle of the point cloud.'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'val')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the width of the point cloud.'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(ACAD_DISTANCE), 'val')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the width of the point cloud.'), 'propput'],
        HRESULT,
        'Width',
        (['in'], ACAD_DISTANCE, 'val')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the length of the point cloud.'), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(ACAD_DISTANCE), 'val')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the length of the point cloud.'), 'propput'],
        HRESULT,
        'Length',
        (['in'], ACAD_DISTANCE, 'val')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the height of the point cloud.'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(ACAD_DISTANCE), 'val')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the height of the point cloud.'), 'propput'],
        HRESULT,
        'Height',
        (['in'], ACAD_DISTANCE, 'val')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the scale value of the point cloud.'), 'propget'],
        HRESULT,
        'scale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'val')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the scale value of the point cloud.'), 'propput'],
        HRESULT,
        'scale',
        (['in'], ACAD_NOUNITS, 'val')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the name of the point cloud file.'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the path to the point cloud file.'), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Enables or disables the clipping boundary of the point cloud.'), 'propget'],
        HRESULT,
        'ShowClipped',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'val')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Enables or disables the clipping boundary of the point cloud.'), 'propput'],
        HRESULT,
        'ShowClipped',
        (['in'], VARIANT_BOOL, 'val')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies if the point cloud is locked.'), 'propget'],
        HRESULT,
        'Locked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'val')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies if the point cloud is locked.'), 'propput'],
        HRESULT,
        'Locked',
        (['in'], VARIANT_BOOL, 'val')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies color stylization for selected point cloud.'), 'propget'],
        HRESULT,
        'Stylization',
        (['out', 'retval'], POINTER(AcPointCloudStylizationType), 'val')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies color stylization for selected point cloud.'), 'propput'],
        HRESULT,
        'Stylization',
        (['in'], AcPointCloudStylizationType, 'val')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the unit of the point cloud file.'), 'propget'],
        HRESULT,
        'Unit',
        (['out', 'retval'], POINTER(BSTR), 'val')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies insert unit factor of the point cloud file.'), 'propget'],
        HRESULT,
        'UnitFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'val')
    ),
]

################################################################
# code template for IAcadPointCloud implementation
# class IAcadPointCloud_Impl(object):
#     def _get(self):
#         'Specifies the point cloud color source.'
#         #return val
#     def _set(self, val):
#         'Specifies the point cloud color source.'
#     UseEntityColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether to display point cloud intensity using a shaded color scheme. \nYou can only see the intensity color mapping effect in 3D visual style and when hardware acceleration is on.'
#         #return val
#     def _set(self, val):
#         'Specifies whether to display point cloud intensity using a shaded color scheme. \nYou can only see the intensity color mapping effect in 3D visual style and when hardware acceleration is on.'
#     ShowIntensity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color scheme to use for displaying intensity values.'
#         #return val
#     def _set(self, val):
#         'Specifies the color scheme to use for displaying intensity values.'
#     IntensityColorScheme = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the insertion point of the point cloud.'
#         #return EndPoint
#     def _set(self, EndPoint):
#         'Specifies the insertion point of the point cloud.'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the rotation angle of the point cloud.'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the width of the point cloud.'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the length of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the length of the point cloud.'
#     Length = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the height of the point cloud.'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the scale value of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies the scale value of the point cloud.'
#     scale = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         'Specifies the name of the point cloud file.'
#         #return val
#
#     @property
#     def Path(self):
#         'Specifies the path to the point cloud file.'
#         #return val
#
#     def _get(self):
#         'Enables or disables the clipping boundary of the point cloud.'
#         #return val
#     def _set(self, val):
#         'Enables or disables the clipping boundary of the point cloud.'
#     ShowClipped = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the point cloud is locked.'
#         #return val
#     def _set(self, val):
#         'Specifies if the point cloud is locked.'
#     Locked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color stylization for selected point cloud.'
#         #return val
#     def _set(self, val):
#         'Specifies color stylization for selected point cloud.'
#     Stylization = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Unit(self):
#         'Specifies the unit of the point cloud file.'
#         #return val
#
#     @property
#     def UnitFactor(self):
#         'Specifies insert unit factor of the point cloud file.'
#         #return val
#


class AcadTableStyle(CoClass):
    """AutoCAD AcadTableStyle Object"""
    _reg_clsid_ = GUID('{99E5E0B7-1075-4690-A71F-2C0BD8FB3CCF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadTableStyle._com_interfaces_ = [IAcadTableStyle]
AcadTableStyle._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadSectionSettings(CoClass):
    """AutoCAD Section Settings Object"""
    _reg_clsid_ = GUID('{905B42B9-EECD-4EBE-98D2-E89D771C3AEB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSectionSettings._com_interfaces_ = [IAcadSectionSettings]
AcadSectionSettings._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadSecurityParams(CoClass):
    """Security Parameters Object"""
    _reg_clsid_ = GUID('{8A64F84B-739B-4342-B855-879517F7D230}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSecurityParams._com_interfaces_ = [IAcadSecurityParams]


class IAcadBlocks(IAcadObject):
    """The collection of all blocks in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{6DC49550-9FE8-4456-9751-BCCB9C436FF3}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadGroups(IAcadObject):
    """The collection of all groups in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{257DF530-AE46-4A50-8948-54948B2AB045}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDimStyles(IAcadObject):
    """The collection of all dimension styles in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{2932818F-C836-44F9-9329-3A27628B478A}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadLayers(IAcadObject):
    """The collection of all layers in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{955BD2D0-D331-4E04-B50D-D3632BCAF5F2}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadLineTypes(IAcadObject):
    """The collection of all linetypes in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{2EB8451D-2CFB-4F35-A9D9-24323AB74350}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDictionaries(IAcadObject):
    """The collection of all dictionaries in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{3ADFB200-A04C-434F-975E-3A3F978786A2}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadRegisteredApplications(IAcadObject):
    """The collection of all registered applications in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{7D6C6772-C5CD-4633-BCFC-B4A8858A6BCB}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadTextStyles(IAcadObject):
    """The collection of all text styles in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{6464273B-23A6-40D9-B408-6B7A3429892D}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadUCSs(IAcadObject):
    """The collection of all user coordinate systems (UCSs) in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{EA8D9DB3-5546-45F6-BBF6-844CA5E3E73E}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadViews(IAcadObject):
    """The collection of all views in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{C08E2EA0-FF82-4DF6-A85C-5DF79B033929}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadViewports(IAcadObject):
    """The collection of all viewports in the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{49C7B6C0-8613-44CB-980B-7CE1371EA912}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadSectionManager(IAcadObject):
    """Controls which property is constrained when editing other property values"""
    _case_insensitive_ = True
    _iid_ = GUID('{34B16C03-E5B7-41FD-8181-60141C33E394}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadMaterials(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{81B5645D-003B-4F35-B5FB-F0BABE4DD217}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadDatabase._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Gets the ModelSpace collection for the document'), 'propget'],
        HRESULT,
        'ModelSpace',
        (['out', 'retval'], POINTER(POINTER(IAcadModelSpace)), 'pMSpace')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the PaperSpace collection for the document'), 'propget'],
        HRESULT,
        'PaperSpace',
        (['out', 'retval'], POINTER(POINTER(IAcadPaperSpace)), 'pPSpace')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Gets the Blocks collection for the drawing'), 'propget'],
        HRESULT,
        'Blocks',
        (['out', 'retval'], POINTER(POINTER(IAcadBlocks)), 'pBlocks')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Duplicates multiple objects (deep cloning)')],
        HRESULT,
        'CopyObjects',
        (['in'], VARIANT, 'Objects'),
        (['in', 'optional'], VARIANT, 'Owner'),
        (['in', 'out', 'optional'], POINTER(VARIANT), 'IdPairs'),
        (['out', 'retval'], POINTER(VARIANT), 'pNewObjects')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Gets the Groups collection for the document'), 'propget'],
        HRESULT,
        'Groups',
        (['out', 'retval'], POINTER(POINTER(IAcadGroups)), 'pGroups')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Gets the DimStyles collection for the document'), 'propget'],
        HRESULT,
        'DimStyles',
        (['out', 'retval'], POINTER(POINTER(IAcadDimStyles)), 'pDimStyles')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Gets the Layers collection for the document'), 'propget'],
        HRESULT,
        'Layers',
        (['out', 'retval'], POINTER(POINTER(IAcadLayers)), 'pLayers')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Gets the Linetypes collection for the document'), 'propget'],
        HRESULT,
        'Linetypes',
        (['out', 'retval'], POINTER(POINTER(IAcadLineTypes)), 'pLinetypes')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Gets the Dictionaries collection for the document'), 'propget'],
        HRESULT,
        'Dictionaries',
        (
            ['out', 'retval'],
            POINTER(POINTER(IAcadDictionaries)),
            'pDictionaries',
        )
    ),
    COMMETHOD(
        [dispid(10), helpstring('The collection of all registered applications in the drawing'), 'propget'],
        HRESULT,
        'RegisteredApplications',
        (
            ['out', 'retval'],
            POINTER(POINTER(IAcadRegisteredApplications)),
            'pRegApps',
        )
    ),
    COMMETHOD(
        [dispid(11), helpstring('Gets the TextStyles collection for the document'), 'propget'],
        HRESULT,
        'TextStyles',
        (['out', 'retval'], POINTER(POINTER(IAcadTextStyles)), 'pTextStyles')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Gets the UCSs collection for the document'), 'propget'],
        HRESULT,
        'UserCoordinateSystems',
        (['out', 'retval'], POINTER(POINTER(IAcadUCSs)), 'pUCSs')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Gets the Views collection for the document'), 'propget'],
        HRESULT,
        'Views',
        (['out', 'retval'], POINTER(POINTER(IAcadViews)), 'pViews')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Gets the Viewports collection for the document'), 'propget'],
        HRESULT,
        'Viewports',
        (['out', 'retval'], POINTER(POINTER(IAcadViewports)), 'pViewports')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the elevation setting in the model space'), 'propget'],
        HRESULT,
        'ElevationModelSpace',
        (['out', 'retval'], POINTER(c_double), 'Elevation')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the elevation setting in the model space'), 'propput'],
        HRESULT,
        'ElevationModelSpace',
        (['in'], c_double, 'Elevation')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the elevation setting in the paper space'), 'propget'],
        HRESULT,
        'ElevationPaperSpace',
        (['out', 'retval'], POINTER(c_double), 'Elevation')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the elevation setting in the paper space'), 'propput'],
        HRESULT,
        'ElevationPaperSpace',
        (['in'], c_double, 'Elevation')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the drawing limits'), 'propget'],
        HRESULT,
        'Limits',
        (['out', 'retval'], POINTER(VARIANT), 'Limits')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the drawing limits'), 'propput'],
        HRESULT,
        'Limits',
        (['in'], VARIANT, 'Limits')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Gets the object that corresponds to the given handle')],
        HRESULT,
        'HandleToObject',
        (['in'], BSTR, 'Handle'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObj')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Gets the object that corresponds to the given object ID')],
        HRESULT,
        'ObjectIdToObject',
        (['in'], LONG_PTR, 'ObjectID'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObj')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Gets the Layouts collection for the document'), 'propget'],
        HRESULT,
        'Layouts',
        (['out', 'retval'], POINTER(POINTER(IAcadLayouts)), 'pLayouts')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Gets the PlotConfigurations collection for the document'), 'propget'],
        HRESULT,
        'PlotConfigurations',
        (
            ['out', 'retval'],
            POINTER(POINTER(IAcadPlotConfigurations)),
            'pPlotConfigs',
        )
    ),
    COMMETHOD(
        [dispid(22), helpstring('Gets the Preferences object'), 'propget'],
        HRESULT,
        'Preferences',
        (['out', 'retval'], POINTER(POINTER(IAcadDatabasePreferences)), 'pPref')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Returns the summary info object.'), 'propget'],
        HRESULT,
        'SummaryInfo',
        (['out', 'retval'], POINTER(POINTER(IAcadSummaryInfo)), 'pSummaryInfo')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Returns the section manager object.'), 'propget'],
        HRESULT,
        'SectionManager',
        (['out', 'retval'], POINTER(POINTER(IAcadSectionManager)), 'pSecMgr')
    ),
    COMMETHOD(
        [dispid(73), 'propget'],
        HRESULT,
        'Materials',
        (['out', 'retval'], POINTER(POINTER(IAcadMaterials)), 'pMaterials')
    ),
]

################################################################
# code template for IAcadDatabase implementation
# class IAcadDatabase_Impl(object):
#     @property
#     def ModelSpace(self):
#         'Gets the ModelSpace collection for the document'
#         #return pMSpace
#
#     @property
#     def PaperSpace(self):
#         'Gets the PaperSpace collection for the document'
#         #return pPSpace
#
#     @property
#     def Blocks(self):
#         'Gets the Blocks collection for the drawing'
#         #return pBlocks
#
#     def CopyObjects(self, Objects, Owner):
#         'Duplicates multiple objects (deep cloning)'
#         #return IdPairs, pNewObjects
#
#     @property
#     def Groups(self):
#         'Gets the Groups collection for the document'
#         #return pGroups
#
#     @property
#     def DimStyles(self):
#         'Gets the DimStyles collection for the document'
#         #return pDimStyles
#
#     @property
#     def Layers(self):
#         'Gets the Layers collection for the document'
#         #return pLayers
#
#     @property
#     def Linetypes(self):
#         'Gets the Linetypes collection for the document'
#         #return pLinetypes
#
#     @property
#     def Dictionaries(self):
#         'Gets the Dictionaries collection for the document'
#         #return pDictionaries
#
#     @property
#     def RegisteredApplications(self):
#         'The collection of all registered applications in the drawing'
#         #return pRegApps
#
#     @property
#     def TextStyles(self):
#         'Gets the TextStyles collection for the document'
#         #return pTextStyles
#
#     @property
#     def UserCoordinateSystems(self):
#         'Gets the UCSs collection for the document'
#         #return pUCSs
#
#     @property
#     def Views(self):
#         'Gets the Views collection for the document'
#         #return pViews
#
#     @property
#     def Viewports(self):
#         'Gets the Viewports collection for the document'
#         #return pViewports
#
#     def _get(self):
#         'Specifies the elevation setting in the model space'
#         #return Elevation
#     def _set(self, Elevation):
#         'Specifies the elevation setting in the model space'
#     ElevationModelSpace = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the elevation setting in the paper space'
#         #return Elevation
#     def _set(self, Elevation):
#         'Specifies the elevation setting in the paper space'
#     ElevationPaperSpace = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the drawing limits'
#         #return Limits
#     def _set(self, Limits):
#         'Specifies the drawing limits'
#     Limits = property(_get, _set, doc = _set.__doc__)
#
#     def HandleToObject(self, Handle):
#         'Gets the object that corresponds to the given handle'
#         #return pObj
#
#     def ObjectIdToObject(self, ObjectID):
#         'Gets the object that corresponds to the given object ID'
#         #return pObj
#
#     @property
#     def Layouts(self):
#         'Gets the Layouts collection for the document'
#         #return pLayouts
#
#     @property
#     def PlotConfigurations(self):
#         'Gets the PlotConfigurations collection for the document'
#         #return pPlotConfigs
#
#     @property
#     def Preferences(self):
#         'Gets the Preferences object'
#         #return pPref
#
#     @property
#     def SummaryInfo(self):
#         'Returns the summary info object.'
#         #return pSummaryInfo
#
#     @property
#     def SectionManager(self):
#         'Returns the section manager object.'
#         #return pSecMgr
#
#     @property
#     def Materials(self):
#         '-no docstring-'
#         #return pMaterials
#


class IAcadPlot(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """The set of methods and properties used for plotting layouts"""
    _case_insensitive_ = True
    _iid_ = GUID('{60CD0F9E-61AB-4631-B947-88180FBFB9E9}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadLayer(IAcadObject):
    """A logical grouping of data, similar to transparent acetate overlays on a drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{57995A1E-64DB-4C6C-8155-1F9E6FB608E2}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadLineType(IAcadObject):
    """The line characteristics consisting of combinations of dashes, dots, and spaces"""
    _case_insensitive_ = True
    _iid_ = GUID('{195E95A0-500A-4187-9EAC-E033BB9B1B08}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDimStyle(IAcadObject):
    """A group of dimension settings that determines the appearance of a dimension"""
    _case_insensitive_ = True
    _iid_ = GUID('{B001A02B-0560-4954-B921-CFF786EAD2C6}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadTextStyle(IAcadObject):
    """A named, saved collection of settings that determines the appearance of text characters"""
    _case_insensitive_ = True
    _iid_ = GUID('{739F20C7-25D3-431E-88B7-B7824CA4D7BC}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcActiveSpace'
acPaperSpace = 0
acModelSpace = 1
AcActiveSpace = c_int  # enum

IAcadDocument._methods_ = [
    COMMETHOD(
        [dispid(23), helpstring('Gets the Plot object for the document'), 'propget'],
        HRESULT,
        'Plot',
        (['out', 'retval'], POINTER(POINTER(IAcadPlot)), 'pPlot')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the active layer'), 'propget'],
        HRESULT,
        'ActiveLayer',
        (['out', 'retval'], POINTER(POINTER(IAcadLayer)), 'pActLayer')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the active layer'), 'propput'],
        HRESULT,
        'ActiveLayer',
        (['in'], POINTER(IAcadLayer), 'pActLayer')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies the active linetype for the drawing'), 'propget'],
        HRESULT,
        'ActiveLinetype',
        (['out', 'retval'], POINTER(POINTER(IAcadLineType)), 'pActLinetype')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies the active linetype for the drawing'), 'propput'],
        HRESULT,
        'ActiveLinetype',
        (['in'], POINTER(IAcadLineType), 'pActLinetype')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the active dimension style'), 'propget'],
        HRESULT,
        'ActiveDimStyle',
        (['out', 'retval'], POINTER(POINTER(IAcadDimStyle)), 'pActDimStyle')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the active dimension style'), 'propput'],
        HRESULT,
        'ActiveDimStyle',
        (['in'], POINTER(IAcadDimStyle), 'pActDimStyle')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies the active text style for the drawing'), 'propget'],
        HRESULT,
        'ActiveTextStyle',
        (['out', 'retval'], POINTER(POINTER(IAcadTextStyle)), 'pActTextStyle')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies the active text style for the drawing'), 'propput'],
        HRESULT,
        'ActiveTextStyle',
        (['in'], POINTER(IAcadTextStyle), 'pActTextStyle')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Specifies the active UCS for the drawing'), 'propget'],
        HRESULT,
        'ActiveUCS',
        (['out', 'retval'], POINTER(POINTER(IAcadUCS)), 'pActUCS')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Specifies the active UCS for the drawing'), 'propput'],
        HRESULT,
        'ActiveUCS',
        (['in'], POINTER(IAcadUCS), 'pActUCS')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Specifies the active viewport for the drawing'), 'propget'],
        HRESULT,
        'ActiveViewport',
        (['out', 'retval'], POINTER(POINTER(IAcadViewport)), 'pActView')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Specifies the active viewport for the drawing'), 'propput'],
        HRESULT,
        'ActiveViewport',
        (['in'], POINTER(IAcadViewport), 'pActView')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Specifies the active paper space viewport for the drawing'), 'propget'],
        HRESULT,
        'ActivePViewport',
        (['out', 'retval'], POINTER(POINTER(IAcadPViewport)), 'pActView')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Specifies the active paper space viewport for the drawing'), 'propput'],
        HRESULT,
        'ActivePViewport',
        (['in'], POINTER(IAcadPViewport), 'pActView')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Toggles the active space between paper space and model space'), 'propget'],
        HRESULT,
        'ActiveSpace',
        (['out', 'retval'], POINTER(AcActiveSpace), 'ActSpace')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Toggles the active space between paper space and model space'), 'propput'],
        HRESULT,
        'ActiveSpace',
        (['in'], AcActiveSpace, 'ActSpace')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Gets the SelectionSets collection for the document'), 'propget'],
        HRESULT,
        'SelectionSets',
        (['out', 'retval'], POINTER(POINTER(IAcadSelectionSets)), 'pSelSets')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Gets the active selection set for the drawing'), 'propget'],
        HRESULT,
        'ActiveSelectionSet',
        (['out', 'retval'], POINTER(POINTER(IAcadSelectionSet)), 'pSelSet')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Gets the name of the application or document, including the path'), 'propget'],
        HRESULT,
        'FullName',
        (['out', 'retval'], POINTER(BSTR), 'FullName')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Gets the path of the document, application, or external reference'), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Specifies the setting of the object snap mode'), 'propget'],
        HRESULT,
        'ObjectSnapMode',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fSnapMode')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Specifies the setting of the object snap mode'), 'propput'],
        HRESULT,
        'ObjectSnapMode',
        (['in'], VARIANT_BOOL, 'fSnapMode')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Specifies if the document is read-only or read-write'), 'propget'],
        HRESULT,
        'ReadOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bReadOnly')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Specifies if the document has any unsaved changes'), 'propget'],
        HRESULT,
        'Saved',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSaved')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Allows editing of the model from floating paper space viewports'), 'propget'],
        HRESULT,
        'MSpace',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Mode')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Allows editing of the model from floating paper space viewports'), 'propput'],
        HRESULT,
        'MSpace',
        (['in'], VARIANT_BOOL, 'Mode')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Gets the Utility object for the document'), 'propget'],
        HRESULT,
        'Utility',
        (['out', 'retval'], POINTER(POINTER(IAcadUtility)), 'pUtil')
    ),
    COMMETHOD(
        [dispid(42), helpstring('Opens an existing drawing file (DWG) and makes it the active document')],
        HRESULT,
        'Open',
        (['in'], BSTR, 'FullName'),
        (['in', 'optional'], VARIANT, 'Password'),
        (['out', 'retval'], POINTER(POINTER(IAcadDocument)), 'pDocObj')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Evaluates the integrity of the drawing')],
        HRESULT,
        'AuditInfo',
        (['in'], VARIANT_BOOL, 'FixErr')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Imports a drawing file in SAT, EPS, DXF, or WMF format')],
        HRESULT,
        'Import',
        (['in'], BSTR, 'FileName'),
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], c_double, 'ScaleFactor'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObj')
    ),
    COMMETHOD(
        [dispid(45), helpstring('Exports the AutoCAD drawing to a WMF, SAT, EPS, DXF, or BMP format')],
        HRESULT,
        'Export',
        (['in'], BSTR, 'FileName'),
        (['in'], BSTR, 'Extension'),
        (['in'], POINTER(IAcadSelectionSet), 'SelectionSet')
    ),
    COMMETHOD(
        [dispid(46), helpstring('Creates a new document in SDI mode')],
        HRESULT,
        'New',
        (['in'], BSTR, 'TemplateFileName'),
        (['out', 'retval'], POINTER(POINTER(IAcadDocument)), 'pDocObj')
    ),
    COMMETHOD(
        [dispid(47), helpstring('Saves the document or menu group')],
        HRESULT,
        'Save',
    ),
    COMMETHOD(
        [dispid(48), helpstring('Saves the document or menu group to a specified file')],
        HRESULT,
        'SaveAs',
        (['in'], BSTR, 'FullFileName'),
        (['in', 'optional'], VARIANT, 'SaveAsType'),
        (['in', 'optional'], VARIANT, 'vSecurityParams')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Writes out the given selection set as a new drawing file')],
        HRESULT,
        'Wblock',
        (['in'], BSTR, 'FileName'),
        (['in'], POINTER(IAcadSelectionSet), 'SelectionSet')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Removes unused named references such as unused blocks or layers from the document')],
        HRESULT,
        'PurgeAll',
    ),
    COMMETHOD(
        [dispid(51), helpstring('Gets the current setting of an AutoCAD system variable')],
        HRESULT,
        'GetVariable',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(VARIANT), 'Value')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets the value of an AutoCAD system variable')],
        HRESULT,
        'SetVariable',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Loads a shape file (SHX)')],
        HRESULT,
        'LoadShapeFile',
        (['in'], BSTR, 'FullName')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Regenerates the entire drawing and recomputes the screen coordinates and view resolution for all objects')],
        HRESULT,
        'Regen',
        (['in'], AcRegenType, 'WhichViewports')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Gets the pickfirst selection set'), 'propget'],
        HRESULT,
        'PickfirstSelectionSet',
        (['out', 'retval'], POINTER(POINTER(IAcadSelectionSet)), 'pSelSet')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Determines if the document is the active document for the session'), 'propget'],
        HRESULT,
        'Active',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvbActive')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Makes the specified drawing active')],
        HRESULT,
        'Activate',
    ),
    COMMETHOD(
        [dispid(58), helpstring('Closes the specified drawing, or all open drawings')],
        HRESULT,
        'Close',
        (['in', 'optional'], VARIANT, 'SaveChanges'),
        (['in', 'optional'], VARIANT, 'FileName')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Specifies the state of the application or document window'), 'propput'],
        HRESULT,
        'WindowState',
        (['in'], AcWindowState, 'pWinState')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Specifies the state of the application or document window'), 'propget'],
        HRESULT,
        'WindowState',
        (['out', 'retval'], POINTER(AcWindowState), 'pWinState')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'pWidth')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'pWidth')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'pHeight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'pHeight')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies the active layout'), 'propput'],
        HRESULT,
        'ActiveLayout',
        (['in'], POINTER(IAcadLayout), 'pLayout')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies the active layout'), 'propget'],
        HRESULT,
        'ActiveLayout',
        (['out', 'retval'], POINTER(POINTER(IAcadLayout)), 'pLayout')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Sends a command string from a VB or VBA application to the document for processing')],
        HRESULT,
        'SendCommand',
        (['in'], BSTR, 'Command')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Gets the window handle of the document window frame'), 'propget'],
        HRESULT,
        'HWND',
        (['out', 'retval'], POINTER(LONG_PTR), 'HWND')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Gets the title of the document window'), 'propget'],
        HRESULT,
        'WindowTitle',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(67), helpstring('Gets the database in which the object belongs'), 'propget'],
        HRESULT,
        'Database',
        (['out', 'retval'], POINTER(POINTER(IAcadDatabase)), 'pDatabase')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Marks the beginning of a block of operations')],
        HRESULT,
        'StartUndoMark',
    ),
    COMMETHOD(
        [dispid(69), helpstring('Marks the end of a block of operations')],
        HRESULT,
        'EndUndoMark',
    ),
    COMMETHOD(
        [dispid(74), 'propget'],
        HRESULT,
        'ActiveMaterial',
        (['out', 'retval'], POINTER(POINTER(IAcadMaterial)), 'pActMaterial')
    ),
    COMMETHOD(
        [dispid(74), 'propput'],
        HRESULT,
        'ActiveMaterial',
        (['in'], POINTER(IAcadMaterial), 'pActMaterial')
    ),
    COMMETHOD(
        [dispid(75), helpstring('Posts a command string from a VB or VBA application to the document for processing')],
        HRESULT,
        'PostCommand',
        (['in'], BSTR, 'Command')
    ),
]

################################################################
# code template for IAcadDocument implementation
# class IAcadDocument_Impl(object):
#     @property
#     def Plot(self):
#         'Gets the Plot object for the document'
#         #return pPlot
#
#     def _get(self):
#         'Specifies the active layer'
#         #return pActLayer
#     def _set(self, pActLayer):
#         'Specifies the active layer'
#     ActiveLayer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the active linetype for the drawing'
#         #return pActLinetype
#     def _set(self, pActLinetype):
#         'Specifies the active linetype for the drawing'
#     ActiveLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the active dimension style'
#         #return pActDimStyle
#     def _set(self, pActDimStyle):
#         'Specifies the active dimension style'
#     ActiveDimStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the active text style for the drawing'
#         #return pActTextStyle
#     def _set(self, pActTextStyle):
#         'Specifies the active text style for the drawing'
#     ActiveTextStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the active UCS for the drawing'
#         #return pActUCS
#     def _set(self, pActUCS):
#         'Specifies the active UCS for the drawing'
#     ActiveUCS = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the active viewport for the drawing'
#         #return pActView
#     def _set(self, pActView):
#         'Specifies the active viewport for the drawing'
#     ActiveViewport = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the active paper space viewport for the drawing'
#         #return pActView
#     def _set(self, pActView):
#         'Specifies the active paper space viewport for the drawing'
#     ActivePViewport = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the active space between paper space and model space'
#         #return ActSpace
#     def _set(self, ActSpace):
#         'Toggles the active space between paper space and model space'
#     ActiveSpace = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SelectionSets(self):
#         'Gets the SelectionSets collection for the document'
#         #return pSelSets
#
#     @property
#     def ActiveSelectionSet(self):
#         'Gets the active selection set for the drawing'
#         #return pSelSet
#
#     @property
#     def FullName(self):
#         'Gets the name of the application or document, including the path'
#         #return FullName
#
#     @property
#     def Name(self):
#         'Specifies the name of the object'
#         #return Name
#
#     @property
#     def Path(self):
#         'Gets the path of the document, application, or external reference'
#         #return Path
#
#     def _get(self):
#         'Specifies the setting of the object snap mode'
#         #return fSnapMode
#     def _set(self, fSnapMode):
#         'Specifies the setting of the object snap mode'
#     ObjectSnapMode = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ReadOnly(self):
#         'Specifies if the document is read-only or read-write'
#         #return bReadOnly
#
#     @property
#     def Saved(self):
#         'Specifies if the document has any unsaved changes'
#         #return bSaved
#
#     def _get(self):
#         'Allows editing of the model from floating paper space viewports'
#         #return Mode
#     def _set(self, Mode):
#         'Allows editing of the model from floating paper space viewports'
#     MSpace = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Utility(self):
#         'Gets the Utility object for the document'
#         #return pUtil
#
#     def Open(self, FullName, Password):
#         'Opens an existing drawing file (DWG) and makes it the active document'
#         #return pDocObj
#
#     def AuditInfo(self, FixErr):
#         'Evaluates the integrity of the drawing'
#         #return 
#
#     def Import(self, FileName, InsertionPoint, ScaleFactor):
#         'Imports a drawing file in SAT, EPS, DXF, or WMF format'
#         #return pObj
#
#     def Export(self, FileName, Extension, SelectionSet):
#         'Exports the AutoCAD drawing to a WMF, SAT, EPS, DXF, or BMP format'
#         #return 
#
#     def New(self, TemplateFileName):
#         'Creates a new document in SDI mode'
#         #return pDocObj
#
#     def Save(self):
#         'Saves the document or menu group'
#         #return 
#
#     def SaveAs(self, FullFileName, SaveAsType, vSecurityParams):
#         'Saves the document or menu group to a specified file'
#         #return 
#
#     def Wblock(self, FileName, SelectionSet):
#         'Writes out the given selection set as a new drawing file'
#         #return 
#
#     def PurgeAll(self):
#         'Removes unused named references such as unused blocks or layers from the document'
#         #return 
#
#     def GetVariable(self, Name):
#         'Gets the current setting of an AutoCAD system variable'
#         #return Value
#
#     def SetVariable(self, Name, Value):
#         'Sets the value of an AutoCAD system variable'
#         #return 
#
#     def LoadShapeFile(self, FullName):
#         'Loads a shape file (SHX)'
#         #return 
#
#     def Regen(self, WhichViewports):
#         'Regenerates the entire drawing and recomputes the screen coordinates and view resolution for all objects'
#         #return 
#
#     @property
#     def PickfirstSelectionSet(self):
#         'Gets the pickfirst selection set'
#         #return pSelSet
#
#     @property
#     def Active(self):
#         'Determines if the document is the active document for the session'
#         #return pvbActive
#
#     def Activate(self):
#         'Makes the specified drawing active'
#         #return 
#
#     def Close(self, SaveChanges, FileName):
#         'Closes the specified drawing, or all open drawings'
#         #return 
#
#     def _get(self):
#         'Specifies the state of the application or document window'
#         #return pWinState
#     def _set(self, pWinState):
#         'Specifies the state of the application or document window'
#     WindowState = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#         #return pWidth
#     def _set(self, pWidth):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#         #return pHeight
#     def _set(self, pHeight):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the active layout'
#         #return pLayout
#     def _set(self, pLayout):
#         'Specifies the active layout'
#     ActiveLayout = property(_get, _set, doc = _set.__doc__)
#
#     def SendCommand(self, Command):
#         'Sends a command string from a VB or VBA application to the document for processing'
#         #return 
#
#     @property
#     def HWND(self):
#         'Gets the window handle of the document window frame'
#         #return HWND
#
#     @property
#     def WindowTitle(self):
#         'Gets the title of the document window'
#         #return Title
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Database(self):
#         'Gets the database in which the object belongs'
#         #return pDatabase
#
#     def StartUndoMark(self):
#         'Marks the beginning of a block of operations'
#         #return 
#
#     def EndUndoMark(self):
#         'Marks the end of a block of operations'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pActMaterial
#     def _set(self, pActMaterial):
#         '-no docstring-'
#     ActiveMaterial = property(_get, _set, doc = _set.__doc__)
#
#     def PostCommand(self, Command):
#         'Posts a command string from a VB or VBA application to the document for processing'
#         #return 
#


class AcadSectionTypeSettings(CoClass):
    """AutoCAD Section Type Settings Object"""
    _reg_clsid_ = GUID('{B6EBE4C1-471A-414D-B327-81448DC0C695}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadSectionTypeSettings2(IAcadSectionTypeSettings):
    """IAcadSectionTypeSettings Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{4C37F08E-7CA8-403B-BCBC-43CE57784FE8}')
    _idlflags_ = ['dual', 'oleautomation']


AcadSectionTypeSettings._com_interfaces_ = [IAcadSectionTypeSettings2, IAcadSectionTypeSettings]
AcadSectionTypeSettings._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadShadowDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    """AutoCAD Entity with Shadows interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{847A8F18-D313-4382-8FC1-BDF7982B2F31}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcShadowDisplayType'
acCastsAndReceivesShadows = 0
acCastsShadows = 1
acReceivesShadows = 2
acIgnoreShadows = 3
AcShadowDisplayType = c_int  # enum

IAcadShadowDisplay._methods_ = [
    COMMETHOD(
        [dispid(1610678272), helpstring('Specifies the shadow display property of the object.'), 'propget'],
        HRESULT,
        'ShadowDisplay',
        (['out', 'retval'], POINTER(AcShadowDisplayType), 'ShadowDisplay')
    ),
    COMMETHOD(
        [dispid(1610678272), helpstring('Specifies the shadow display property of the object.'), 'propput'],
        HRESULT,
        'ShadowDisplay',
        (['in'], AcShadowDisplayType, 'ShadowDisplay')
    ),
    COMMETHOD(
        [dispid(1610678274), helpstring('Specifies whether the shadow display property is enabled for the object.'), 'propget'],
        HRESULT,
        'EnableShadowDisplay',
        (['out', 'retval'], POINTER(c_int), 'ShadowDisplay')
    ),
]

################################################################
# code template for IAcadShadowDisplay implementation
# class IAcadShadowDisplay_Impl(object):
#     def _get(self):
#         'Specifies the shadow display property of the object.'
#         #return ShadowDisplay
#     def _set(self, ShadowDisplay):
#         'Specifies the shadow display property of the object.'
#     ShadowDisplay = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def EnableShadowDisplay(self):
#         'Specifies whether the shadow display property is enabled for the object.'
#         #return ShadowDisplay
#
# values for enumeration 'AcHatchObjectType'
acHatchObject = 0
acGradientObject = 1
AcHatchObjectType = c_int  # enum

IAcadHatch._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the number of loops in the hatch boundary'), 'nonbrowsable', 'propget'],
        HRESULT,
        'NumberOfLoops',
        (['out', 'retval'], POINTER(c_int), 'numLoops')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the pattern type of the hatch'), 'propget'],
        HRESULT,
        'PatternType',
        (['out', 'retval'], POINTER(AcPatternType), 'PatternType')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the pattern name of the hatch'), 'propget'],
        HRESULT,
        'PatternName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the pattern angle of the hatch'), 'propget'],
        HRESULT,
        'PatternAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'PatternAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the pattern angle of the hatch'), 'propput'],
        HRESULT,
        'PatternAngle',
        (['in'], ACAD_ANGLE, 'PatternAngle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the pattern scale of the hatch'), 'propget'],
        HRESULT,
        'PatternScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'PatternScale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the pattern scale of the hatch'), 'propput'],
        HRESULT,
        'PatternScale',
        (['in'], ACAD_NOUNITS, 'PatternScale')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the pattern space of the hatch'), 'propget'],
        HRESULT,
        'PatternSpace',
        (['out', 'retval'], POINTER(c_double), 'PatternSpace')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the pattern space of the hatch'), 'propput'],
        HRESULT,
        'PatternSpace',
        (['in'], c_double, 'PatternSpace')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the ISO pen width of an ISO hatch pattern'), 'propget'],
        HRESULT,
        'ISOPenWidth',
        (['out', 'retval'], POINTER(AcISOPenWidth), 'penWidth')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the ISO pen width of an ISO hatch pattern'), 'propput'],
        HRESULT,
        'ISOPenWidth',
        (['in'], AcISOPenWidth, 'penWidth')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Determines whether the hatch pattern is double or not'), 'propget'],
        HRESULT,
        'PatternDouble',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bDouble')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Determines whether the hatch pattern is double or not'), 'propput'],
        HRESULT,
        'PatternDouble',
        (['in'], VARIANT_BOOL, 'bDouble')
    ),
    COMMETHOD(
        [dispid(10), helpstring("Specifies the elevation of the hatch relative to the Z axis of the objects' coordinate system"), 'propget'],
        HRESULT,
        'Elevation',
        (['out', 'retval'], POINTER(c_double), 'Elevation')
    ),
    COMMETHOD(
        [dispid(10), helpstring("Specifies the elevation of the hatch relative to the Z axis of the objects' coordinate system"), 'propput'],
        HRESULT,
        'Elevation',
        (['in'], c_double, 'Elevation')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Determines whether the hatch is associative or not'), 'propget'],
        HRESULT,
        'AssociativeHatch',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fAssoc')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Determines whether the hatch is associative or not'), 'propput'],
        HRESULT,
        'AssociativeHatch',
        (['in'], VARIANT_BOOL, 'fAssoc')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Sets the island display style of the hatch'), 'propget'],
        HRESULT,
        'HatchStyle',
        (['out', 'retval'], POINTER(AcHatchStyle), 'HatchStyle')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Sets the island display style of the hatch'), 'propput'],
        HRESULT,
        'HatchStyle',
        (['in'], AcHatchStyle, 'HatchStyle')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Set Pattern Type and Name of the hatch')],
        HRESULT,
        'SetPattern',
        (['in'], c_int, 'PatternType'),
        (['in'], BSTR, 'PatternName')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Append loops to the hatch')],
        HRESULT,
        'AppendOuterLoop',
        (['in'], VARIANT, 'ObjectArray')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Append loops to the hatch')],
        HRESULT,
        'AppendInnerLoop',
        (['in'], VARIANT, 'ObjectArray')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Insert loops at given index to the hatch')],
        HRESULT,
        'InsertLoopAt',
        (['in'], c_int, 'Index'),
        (['in'], AcLoopType, 'LoopType'),
        (['in'], VARIANT, 'ObjectArray')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Get loops at given index of the hatch')],
        HRESULT,
        'GetLoopAt',
        (['in'], c_int, 'Index'),
        (['out'], POINTER(VARIANT), 'ObjectArray')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Evaluate the hatch')],
        HRESULT,
        'Evaluate',
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the gradient start color.'), 'propget'],
        HRESULT,
        'GradientColor1',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the gradient start color.'), 'propput'],
        HRESULT,
        'GradientColor1',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies the gradient end color.'), 'propget'],
        HRESULT,
        'GradientColor2',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies the gradient end color.'), 'propput'],
        HRESULT,
        'GradientColor2',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies the gradient angle'), 'propget'],
        HRESULT,
        'GradientAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'GradientAngle')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies the gradient angle'), 'propput'],
        HRESULT,
        'GradientAngle',
        (['in'], ACAD_ANGLE, 'GradientAngle')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Determines whether the gradient is centered or not'), 'propget'],
        HRESULT,
        'GradientCentered',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fCentered')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Determines whether the gradient is centered or not'), 'propput'],
        HRESULT,
        'GradientCentered',
        (['in'], VARIANT_BOOL, 'fCentered')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the pattern name of the gradient.'), 'propget'],
        HRESULT,
        'GradientName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the pattern name of the gradient.'), 'propput'],
        HRESULT,
        'GradientName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Sets the type of the hatch.'), 'nonbrowsable', 'propget'],
        HRESULT,
        'HatchObjectType',
        (['out', 'retval'], POINTER(AcHatchObjectType), 'hatchType')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Sets the type of the hatch.'), 'nonbrowsable', 'propput'],
        HRESULT,
        'HatchObjectType',
        (['in'], AcHatchObjectType, 'hatchType')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies the area of the hatch entity'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the origin coordinates for the pattern of the hatch entity'), 'propget'],
        HRESULT,
        'Origin',
        (['out', 'retval'], POINTER(VARIANT), 'Origin')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the origin coordinates for the pattern of the hatch entity'), 'propput'],
        HRESULT,
        'Origin',
        (['in'], VARIANT, 'Origin')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies the background color of the hatch.'), 'propget'],
        HRESULT,
        'BackgroundColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies the background color of the hatch.'), 'propput'],
        HRESULT,
        'BackgroundColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
]

################################################################
# code template for IAcadHatch implementation
# class IAcadHatch_Impl(object):
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NumberOfLoops(self):
#         'Gets the number of loops in the hatch boundary'
#         #return numLoops
#
#     @property
#     def PatternType(self):
#         'Specifies the pattern type of the hatch'
#         #return PatternType
#
#     @property
#     def PatternName(self):
#         'Specifies the pattern name of the hatch'
#         #return bstrName
#
#     def _get(self):
#         'Specifies the pattern angle of the hatch'
#         #return PatternAngle
#     def _set(self, PatternAngle):
#         'Specifies the pattern angle of the hatch'
#     PatternAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the pattern scale of the hatch'
#         #return PatternScale
#     def _set(self, PatternScale):
#         'Specifies the pattern scale of the hatch'
#     PatternScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the pattern space of the hatch'
#         #return PatternSpace
#     def _set(self, PatternSpace):
#         'Specifies the pattern space of the hatch'
#     PatternSpace = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the ISO pen width of an ISO hatch pattern'
#         #return penWidth
#     def _set(self, penWidth):
#         'Specifies the ISO pen width of an ISO hatch pattern'
#     ISOPenWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the hatch pattern is double or not'
#         #return bDouble
#     def _set(self, bDouble):
#         'Determines whether the hatch pattern is double or not'
#     PatternDouble = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies the elevation of the hatch relative to the Z axis of the objects' coordinate system"
#         #return Elevation
#     def _set(self, Elevation):
#         "Specifies the elevation of the hatch relative to the Z axis of the objects' coordinate system"
#     Elevation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the hatch is associative or not'
#         #return fAssoc
#     def _set(self, fAssoc):
#         'Determines whether the hatch is associative or not'
#     AssociativeHatch = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the island display style of the hatch'
#         #return HatchStyle
#     def _set(self, HatchStyle):
#         'Sets the island display style of the hatch'
#     HatchStyle = property(_get, _set, doc = _set.__doc__)
#
#     def SetPattern(self, PatternType, PatternName):
#         'Set Pattern Type and Name of the hatch'
#         #return 
#
#     def AppendOuterLoop(self, ObjectArray):
#         'Append loops to the hatch'
#         #return 
#
#     def AppendInnerLoop(self, ObjectArray):
#         'Append loops to the hatch'
#         #return 
#
#     def InsertLoopAt(self, Index, LoopType, ObjectArray):
#         'Insert loops at given index to the hatch'
#         #return 
#
#     def GetLoopAt(self, Index):
#         'Get loops at given index of the hatch'
#         #return ObjectArray
#
#     def Evaluate(self):
#         'Evaluate the hatch'
#         #return 
#
#     def _get(self):
#         'Specifies the gradient start color.'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the gradient start color.'
#     GradientColor1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the gradient end color.'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the gradient end color.'
#     GradientColor2 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the gradient angle'
#         #return GradientAngle
#     def _set(self, GradientAngle):
#         'Specifies the gradient angle'
#     GradientAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the gradient is centered or not'
#         #return fCentered
#     def _set(self, fCentered):
#         'Determines whether the gradient is centered or not'
#     GradientCentered = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the pattern name of the gradient.'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the pattern name of the gradient.'
#     GradientName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the type of the hatch.'
#         #return hatchType
#     def _set(self, hatchType):
#         'Sets the type of the hatch.'
#     HatchObjectType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Area(self):
#         'Specifies the area of the hatch entity'
#         #return Area
#
#     def _get(self):
#         'Specifies the origin coordinates for the pattern of the hatch entity'
#         #return Origin
#     def _set(self, Origin):
#         'Specifies the origin coordinates for the pattern of the hatch entity'
#     Origin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the background color of the hatch.'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the background color of the hatch.'
#     BackgroundColor = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcInsertUnitsAction'
acInsertUnitsPrompt = 0
acInsertUnitsAutoAssign = 1
AcInsertUnitsAction = c_int  # enum
# values for enumeration 'AcPlotPolicy'
acPolicyNamed = 0
acPolicyLegacy = 1
AcPlotPolicy = c_int  # enum
# values for enumeration 'AcDrawingAreaShortCutMenu'
acNoDrawingAreaShortCutMenu = 0
acUseDefaultDrawingAreaShortCutMenu = 1
AcDrawingAreaShortCutMenu = c_int  # enum


class AcadGeomapImage(CoClass):
    """AutoCAD Geomap Image Object"""
    _reg_clsid_ = GUID('{58B9CE99-3C5A-4E27-A774-5446E5C58D04}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadGeomapImage._com_interfaces_ = [IAcadGeomapImage]

IAcadTolerance._methods_ = [
    COMMETHOD(
        [dispid(80), helpstring('Specifies the direction for the ray, tolerance, or xline through a vector'), 'nonbrowsable', 'propget'],
        HRESULT,
        'DirectionVector',
        (['out', 'retval'], POINTER(VARIANT), 'dirVector')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the direction for the ray, tolerance, or xline through a vector'), 'nonbrowsable', 'propput'],
        HRESULT,
        'DirectionVector',
        (['in'], VARIANT, 'dirVector')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specify the X, Y, Z coordinate for insertion point of the tolerance or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specify the X, Y, Z coordinate for insertion point of the tolerance or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(1542), helpstring('Specifies the style name of the tolerance'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1542), helpstring('Specifies the style name of the tolerance'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1546), helpstring('Specifies the color of the dimension text'), 'propget'],
        HRESULT,
        'TextColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'color')
    ),
    COMMETHOD(
        [dispid(1546), helpstring('Specifies the color of the dimension text'), 'propput'],
        HRESULT,
        'TextColor',
        (['in'], ACAD_COLOR, 'color')
    ),
    COMMETHOD(
        [dispid(1541), helpstring('Specifies the text string of the tolerance'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(1541), helpstring('Specifies the text string of the tolerance'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(1562), helpstring('Specifies the text style of the tolerance'), 'propget'],
        HRESULT,
        'TextStyle',
        (['out', 'retval'], POINTER(BSTR), 'style')
    ),
    COMMETHOD(
        [dispid(1562), helpstring('Specifies the text style of the tolerance'), 'propput'],
        HRESULT,
        'TextStyle',
        (['in'], BSTR, 'style')
    ),
    COMMETHOD(
        [dispid(1563), helpstring('Specifies the text height of the tolerance'), 'propget'],
        HRESULT,
        'TextHeight',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(1563), helpstring('Specifies the text height of the tolerance'), 'propput'],
        HRESULT,
        'TextHeight',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(1553), helpstring('Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor')
    ),
    COMMETHOD(
        [dispid(1553), helpstring('Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'factor')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the color of the dimension lines'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the color of the dimension lines'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
]

################################################################
# code template for IAcadTolerance implementation
# class IAcadTolerance_Impl(object):
#     def _get(self):
#         'Specifies the direction for the ray, tolerance, or xline through a vector'
#         #return dirVector
#     def _set(self, dirVector):
#         'Specifies the direction for the ray, tolerance, or xline through a vector'
#     DirectionVector = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate for insertion point of the tolerance or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specify the X, Y, Z coordinate for insertion point of the tolerance or use the Pick Point button to set X, Y, Z values simultaneously'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style name of the tolerance'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the style name of the tolerance'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the dimension text'
#         #return color
#     def _set(self, color):
#         'Specifies the color of the dimension text'
#     TextColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text string of the tolerance'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the tolerance'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text style of the tolerance'
#         #return style
#     def _set(self, style):
#         'Specifies the text style of the tolerance'
#     TextStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text height of the tolerance'
#         #return Height
#     def _set(self, Height):
#         'Specifies the text height of the tolerance'
#     TextHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'
#         #return factor
#     def _set(self, factor):
#         'Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the dimension lines'
#         #return Type
#     def _set(self, Type):
#         'Specifies the color of the dimension lines'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#


class AcadDimension(CoClass):
    """AcadDimension Class"""
    _reg_clsid_ = GUID('{BF4B87BB-6B58-47B0-80B7-06F08F1FE6FB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDimension._com_interfaces_ = [IAcadDimension]
AcadDimension._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDimAligned(CoClass):
    """AutoCAD Aligned Dimension Object"""
    _reg_clsid_ = GUID('{D66EDBA8-1E41-4287-8DCF-C933EEC98A22}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadDimAligned(IAcadDimension):
    """AutoCAD Aligned Dimension Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{BF401A57-D8A1-4830-8D1E-4E50AADF8B00}')
    _idlflags_ = ['dual', 'oleautomation']


AcadDimAligned._com_interfaces_ = [IAcadDimAligned]
AcadDimAligned._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadPreferencesSelection._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Determines if you select objects before (noun-verb selection) or after you issue a command'), 'propput'],
        HRESULT,
        'PickFirst',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Determines if you select objects before (noun-verb selection) or after you issue a command'), 'propget'],
        HRESULT,
        'PickFirst',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Determines if objects are added to the selection set using the Shift key'), 'propput'],
        HRESULT,
        'PickAdd',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Determines if objects are added to the selection set using the Shift key'), 'propget'],
        HRESULT,
        'PickAdd',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Controls the method of drawing a selection window'), 'propput'],
        HRESULT,
        'PickDrag',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Controls the method of drawing a selection window'), 'propget'],
        HRESULT,
        'PickDrag',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Controls automatic windowing at the Select Objects prompt'), 'propput'],
        HRESULT,
        'PickAuto',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Controls automatic windowing at the Select Objects prompt'), 'propget'],
        HRESULT,
        'PickAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the size of the object selection target'), 'propput'],
        HRESULT,
        'PickBoxSize',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the size of the object selection target'), 'propget'],
        HRESULT,
        'PickBoxSize',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Controls the display of selection set grips for the Stretch, Move, Rotate, Scale, and Mirror grip modes'), 'propput'],
        HRESULT,
        'DisplayGrips',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Controls the display of selection set grips for the Stretch, Move, Rotate, Scale, and Mirror grip modes'), 'propget'],
        HRESULT,
        'DisplayGrips',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Controls the assignment of grips within blocks'), 'propput'],
        HRESULT,
        'DisplayGripsWithinBlocks',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Controls the assignment of grips within blocks'), 'propget'],
        HRESULT,
        'DisplayGripsWithinBlocks',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies the color of selected grips'), 'propput'],
        HRESULT,
        'GripColorSelected',
        (['in'], AcColor, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies the color of selected grips'), 'propget'],
        HRESULT,
        'GripColorSelected',
        (['out', 'retval'], POINTER(AcColor), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the color of unselected grips'), 'propput'],
        HRESULT,
        'GripColorUnselected',
        (['in'], AcColor, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the color of unselected grips'), 'propget'],
        HRESULT,
        'GripColorUnselected',
        (['out', 'retval'], POINTER(AcColor), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the size of grips'), 'propput'],
        HRESULT,
        'GripSize',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the size of grips'), 'propget'],
        HRESULT,
        'GripSize',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Determines if picking a single object in a group selects the entire group'), 'propput'],
        HRESULT,
        'PickGroup',
        (['in'], VARIANT_BOOL, 'pick')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Determines if picking a single object in a group selects the entire group'), 'propget'],
        HRESULT,
        'PickGroup',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pick')
    ),
]

################################################################
# code template for IAcadPreferencesSelection implementation
# class IAcadPreferencesSelection_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Determines if you select objects before (noun-verb selection) or after you issue a command'
#         #return Path
#     def _set(self, Path):
#         'Determines if you select objects before (noun-verb selection) or after you issue a command'
#     PickFirst = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines if objects are added to the selection set using the Shift key'
#         #return Path
#     def _set(self, Path):
#         'Determines if objects are added to the selection set using the Shift key'
#     PickAdd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the method of drawing a selection window'
#         #return Path
#     def _set(self, Path):
#         'Controls the method of drawing a selection window'
#     PickDrag = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls automatic windowing at the Select Objects prompt'
#         #return Path
#     def _set(self, Path):
#         'Controls automatic windowing at the Select Objects prompt'
#     PickAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of the object selection target'
#         #return Path
#     def _set(self, Path):
#         'Specifies the size of the object selection target'
#     PickBoxSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the display of selection set grips for the Stretch, Move, Rotate, Scale, and Mirror grip modes'
#         #return Path
#     def _set(self, Path):
#         'Controls the display of selection set grips for the Stretch, Move, Rotate, Scale, and Mirror grip modes'
#     DisplayGrips = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the assignment of grips within blocks'
#         #return Path
#     def _set(self, Path):
#         'Controls the assignment of grips within blocks'
#     DisplayGripsWithinBlocks = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of selected grips'
#         #return Path
#     def _set(self, Path):
#         'Specifies the color of selected grips'
#     GripColorSelected = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of unselected grips'
#         #return Path
#     def _set(self, Path):
#         'Specifies the color of unselected grips'
#     GripColorUnselected = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of grips'
#         #return Path
#     def _set(self, Path):
#         'Specifies the size of grips'
#     GripSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines if picking a single object in a group selects the entire group'
#         #return pick
#     def _set(self, pick):
#         'Determines if picking a single object in a group selects the entire group'
#     PickGroup = property(_get, _set, doc = _set.__doc__)
#


class AcadOle(CoClass):
    """AutoCAD OLE Object"""
    _reg_clsid_ = GUID('{6633016F-B3BF-482C-9E9B-5C9B40FF03D0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadOle._com_interfaces_ = [IAcadOle]
AcadOle._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDimAngular(CoClass):
    """AutoCAD Angular Dimension Object"""
    _reg_clsid_ = GUID('{B20A3B2D-9661-4204-8CF5-644C82CDF7C1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadDimAngular(IAcadDimension):
    """AutoCAD Angular Dimension Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{5E86D54E-B361-4D27-910C-4D7EA9CE007E}')
    _idlflags_ = ['dual', 'oleautomation']


AcadDimAngular._com_interfaces_ = [IAcadDimAngular]
AcadDimAngular._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDimDiametric(CoClass):
    """AcadDimDiametric Class"""
    _reg_clsid_ = GUID('{28A350DB-367B-4E0F-BAAE-6C8F33D9867F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadDimDiametric(IAcadDimension):
    """IAcadDimDiametric Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{89E4CABE-481C-498A-83A1-E60A97DB1634}')
    _idlflags_ = ['dual', 'oleautomation']


AcadDimDiametric._com_interfaces_ = [IAcadDimDiametric]
AcadDimDiametric._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDimOrdinate(CoClass):
    """AutoCAD Ordinate Dimension Object"""
    _reg_clsid_ = GUID('{7A95551F-09AB-4620-982F-7D1702F52BBB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadDimOrdinate(IAcadDimension):
    """AutoCAD Ordinate Dimension Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{D54B1C6A-02CA-45B7-84D7-D668049259CC}')
    _idlflags_ = ['dual', 'oleautomation']


AcadDimOrdinate._com_interfaces_ = [IAcadDimOrdinate]
AcadDimOrdinate._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcad3DFace(IAcadEntity):
    """AutoCAD 3dFace Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{9B8BE788-0D7C-4E0C-9DD2-FC6F901B55B9}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcad3DPolyline(IAcadEntity):
    """AutoCAD 3dPolyline Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{7DDB8F04-D663-44AE-BA05-A6257593FD11}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadArc(IAcadEntity):
    """AutoCAD Arc Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{87435401-D917-4FAE-9838-2CB7B0CAF3B1}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcAttributeMode'
acAttributeModeNormal = 0
acAttributeModeInvisible = 1
acAttributeModeConstant = 2
acAttributeModeVerify = 4
acAttributeModePreset = 8
acAttributeModeLockPosition = 16
acAttributeModeMultipleLine = 32
AcAttributeMode = c_int  # enum


class IAcadAttribute(IAcadEntity):
    """AutoCAD Attribute Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{47315E42-4126-4102-863E-81C91B925579}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadDimRadial(IAcadDimension):
    """AutoCAD Radial Dimension Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{5AAA0A70-CE46-43EC-A642-0097C50B57CA}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcLeaderType'
acLineNoArrow = 0
acSplineNoArrow = 1
acLineWithArrow = 2
acSplineWithArrow = 3
AcLeaderType = c_int  # enum
# values for enumeration 'AcBlockScaling'
acAny = 0
acUniform = 1
AcBlockScaling = c_int  # enum


class IAcadDimArcLength(IAcadDimension):
    """IAcadDimArcLength Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{669A72CD-B533-4881-8866-040F1E16C05B}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadSection(IAcadEntity):
    """IAcadSection Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{44EFC9AF-C41B-4EA9-905E-694D1F8D3500}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadBlock._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadEntity)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(1536), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(1537), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1537), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1538), helpstring('Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'), 'propget'],
        HRESULT,
        'Origin',
        (['out', 'retval'], POINTER(VARIANT), 'Origin')
    ),
    COMMETHOD(
        [dispid(1538), helpstring('Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'), 'propput'],
        HRESULT,
        'Origin',
        (['in'], VARIANT, 'Origin')
    ),
    COMMETHOD(
        [dispid(1539), helpstring('Creates a Custom object')],
        HRESULT,
        'AddCustomObject',
        (['in'], BSTR, 'ClassName'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObject')
    ),
    COMMETHOD(
        [dispid(1540), helpstring('Creates a 3DFace object given four vertices')],
        HRESULT,
        'Add3DFace',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['in'], VARIANT, 'point3'),
        (['in'], VARIANT, 'Point4'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DFace)), 'pFace3d')
    ),
    COMMETHOD(
        [dispid(1541), helpstring('Creates a free-form 3D mesh, given the number of points in the M and N directions and the coordinates of the points in the M and N directions')],
        HRESULT,
        'Add3DMesh',
        (['in'], c_int, 'M'),
        (['in'], c_int, 'N'),
        (['in'], VARIANT, 'PointsMatrix'),
        (['out', 'retval'], POINTER(POINTER(IAcadPolygonMesh)), 'pMesh3d')
    ),
    COMMETHOD(
        [dispid(1542), helpstring('Creates a 3D polyline from the given array of coordinates')],
        HRESULT,
        'Add3DPoly',
        (['in'], VARIANT, 'PointsArray'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DPolyline)), 'pPoly3d')
    ),
    COMMETHOD(
        [dispid(1543), helpstring('Creates an arc given the center, radius, start angle, and end angle of the arc')],
        HRESULT,
        'AddArc',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'Radius'),
        (['in'], c_double, 'StartAngle'),
        (['in'], c_double, 'EndAngle'),
        (['out', 'retval'], POINTER(POINTER(IAcadArc)), 'pArc')
    ),
    COMMETHOD(
        [dispid(1544), helpstring('Creates an attribute definition at the given location with the specified properties')],
        HRESULT,
        'AddAttribute',
        (['in'], c_double, 'Height'),
        (['in'], AcAttributeMode, 'Mode'),
        (['in'], BSTR, 'Prompt'),
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], BSTR, 'Tag'),
        (['in'], BSTR, 'Value'),
        (['out', 'retval'], POINTER(POINTER(IAcadAttribute)), 'pAttr')
    ),
    COMMETHOD(
        [dispid(1545), helpstring('Creates a 3D solid box with edges parallel to the axes of the WCS')],
        HRESULT,
        'AddBox',
        (['in'], VARIANT, 'Origin'),
        (['in'], c_double, 'Length'),
        (['in'], c_double, 'Width'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pBox')
    ),
    COMMETHOD(
        [dispid(1546), helpstring('Creates a circle given a center point and radius')],
        HRESULT,
        'AddCircle',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'Radius'),
        (['out', 'retval'], POINTER(POINTER(IAcadCircle)), 'pCircle')
    ),
    COMMETHOD(
        [dispid(1547), helpstring('Creates a 3D solid cone with the base on the XY plane of the WCS')],
        HRESULT,
        'AddCone',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'BaseRadius'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pCone')
    ),
    COMMETHOD(
        [dispid(1548), helpstring('Creates a 3D solid cylinder whose base is on the XY plane of the WCS')],
        HRESULT,
        'AddCylinder',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'Radius'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pCyl')
    ),
    COMMETHOD(
        [dispid(1549), helpstring('Creates an aligned dimension object')],
        HRESULT,
        'AddDimAligned',
        (['in'], VARIANT, 'ExtLine1Point'),
        (['in'], VARIANT, 'ExtLine2Point'),
        (['in'], VARIANT, 'TextPosition'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimAligned)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1550), helpstring('Creates an angular dimension for an arc, two lines, or a circle')],
        HRESULT,
        'AddDimAngular',
        (['in'], VARIANT, 'AngleVertex'),
        (['in'], VARIANT, 'FirstEndPoint'),
        (['in'], VARIANT, 'SecondEndPoint'),
        (['in'], VARIANT, 'TextPoint'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimAngular)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1551), helpstring('Creates a diametric dimension for a circle or arc given the two points on the diameter and the length of the leader line')],
        HRESULT,
        'AddDimDiametric',
        (['in'], VARIANT, 'ChordPoint'),
        (['in'], VARIANT, 'FarChordPoint'),
        (['in'], c_double, 'LeaderLength'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimDiametric)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1552), helpstring('Creates a rotated linear dimension')],
        HRESULT,
        'AddDimRotated',
        (['in'], VARIANT, 'ExtLine1Point'),
        (['in'], VARIANT, 'ExtLine2Point'),
        (['in'], VARIANT, 'DimLineLocation'),
        (['in'], c_double, 'RotationAngle'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimRotated)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1553), helpstring('Creates an ordinate dimension given the definition point, and leader endpoint')],
        HRESULT,
        'AddDimOrdinate',
        (['in'], VARIANT, 'DefinitionPoint'),
        (['in'], VARIANT, 'LeaderEndPoint'),
        (['in'], c_int, 'UseXAxis'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimOrdinate)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1554), helpstring('Creates a radial dimension for the selected object at the given location')],
        HRESULT,
        'AddDimRadial',
        (['in'], VARIANT, 'Center'),
        (['in'], VARIANT, 'ChordPoint'),
        (['in'], c_double, 'LeaderLength'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimRadial)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1555), helpstring('Creates an ellipse in the XY plane of the WCS given the center point, a point on the major axis, and the radius ratio')],
        HRESULT,
        'AddEllipse',
        (['in'], VARIANT, 'Center'),
        (['in'], VARIANT, 'MajorAxis'),
        (['in'], c_double, 'RadiusRatio'),
        (['out', 'retval'], POINTER(POINTER(IAcadEllipse)), 'pEllipse')
    ),
    COMMETHOD(
        [dispid(1556), helpstring('Creates a 3D solid elliptical cone on the XY plane of the WCS given the Center, MajorRadius, MinorRadius, and Height')],
        HRESULT,
        'AddEllipticalCone',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'MajorRadius'),
        (['in'], c_double, 'MinorRadius'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pEllipCone')
    ),
    COMMETHOD(
        [dispid(1557), helpstring('Creates a 3D solid elliptical cylinder whose base is on the XY plane of the WCS, given the Center, MajorRadius, MinorRadius, and Height')],
        HRESULT,
        'AddEllipticalCylinder',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'MajorRadius'),
        (['in'], c_double, 'MinorRadius'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pEllipCyl')
    ),
    COMMETHOD(
        [dispid(1558), helpstring('Creates an extruded solid given the Profile, Height, and TaperAngle')],
        HRESULT,
        'AddExtrudedSolid',
        (['in'], POINTER(IAcadRegion), 'Profile'),
        (['in'], c_double, 'Height'),
        (['in'], c_double, 'TaperAngle'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pExtrSolid')
    ),
    COMMETHOD(
        [dispid(1559), helpstring('Creates an extruded solid given the profile and an extrusion path')],
        HRESULT,
        'AddExtrudedSolidAlongPath',
        (['in'], POINTER(IAcadRegion), 'Profile'),
        (['in'], POINTER(IDispatch), 'Path'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pExtrSolid')
    ),
    COMMETHOD(
        [dispid(1560), helpstring('Creates a leader line, given the coordinates of the points')],
        HRESULT,
        'AddLeader',
        (['in'], VARIANT, 'PointsArray'),
        (['in'], POINTER(IAcadEntity), 'Annotation'),
        (['in'], AcLeaderType, 'Type'),
        (['out', 'retval'], POINTER(POINTER(IAcadLeader)), 'pLeader')
    ),
    COMMETHOD(
        [dispid(1561), helpstring('Creates an MText entity in a rectangle defined by the insertion point and width of the bounding box')],
        HRESULT,
        'AddMText',
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], c_double, 'Width'),
        (['in'], BSTR, 'Text'),
        (['out', 'retval'], POINTER(POINTER(IAcadMText)), 'pMtext')
    ),
    COMMETHOD(
        [dispid(1562), helpstring('Creates a Point object at a given location')],
        HRESULT,
        'AddPoint',
        (['in'], VARIANT, 'Point'),
        (['out', 'retval'], POINTER(POINTER(IAcadPoint)), 'pPoint')
    ),
    COMMETHOD(
        [dispid(1563), helpstring('Creates a lightweight polyline from a list of vertices')],
        HRESULT,
        'AddLightWeightPolyline',
        (['in'], VARIANT, 'VerticesList'),
        (['out', 'retval'], POINTER(POINTER(IAcadLWPolyline)), 'pLWPolyline')
    ),
    COMMETHOD(
        [dispid(1564), helpstring('Creates a polyline from a list of vertices')],
        HRESULT,
        'AddPolyline',
        (['in'], VARIANT, 'VerticesList'),
        (['out', 'retval'], POINTER(POINTER(IAcadPolyline)), 'pPolyline')
    ),
    COMMETHOD(
        [dispid(1565), helpstring('Creates a ray passing through two unique points')],
        HRESULT,
        'AddRay',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['out', 'retval'], POINTER(POINTER(IAcadRay)), 'pRay')
    ),
    COMMETHOD(
        [dispid(1566), helpstring('Creates a region from a set of entities. The given entities must form a closed coplanar region')],
        HRESULT,
        'AddRegion',
        (['in'], VARIANT, 'ObjectList'),
        (['out', 'retval'], POINTER(VARIANT), 'pRegions')
    ),
    COMMETHOD(
        [dispid(1567), helpstring('Creates a revolved solid, given the region around an axis')],
        HRESULT,
        'AddRevolvedSolid',
        (['in'], POINTER(IAcadRegion), 'Profile'),
        (['in'], VARIANT, 'AxisPoint'),
        (['in'], VARIANT, 'AxisDir'),
        (['in'], c_double, 'Angle'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pRevolSolid')
    ),
    COMMETHOD(
        [dispid(1568), helpstring('Creates a Shape object based on a template identified by name, at the given insertion point, scale factor, and rotation')],
        HRESULT,
        'AddShape',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], c_double, 'ScaleFactor'),
        (['in'], c_double, 'RotationAngle'),
        (['out', 'retval'], POINTER(POINTER(IAcadShape)), 'pShape')
    ),
    COMMETHOD(
        [dispid(1569), helpstring('Creates a 2D solid polygon')],
        HRESULT,
        'AddSolid',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['in'], VARIANT, 'point3'),
        (['in'], VARIANT, 'Point4'),
        (['out', 'retval'], POINTER(POINTER(IAcadSolid)), 'pSolid')
    ),
    COMMETHOD(
        [dispid(1570), helpstring('Creates a sphere given the center and radius')],
        HRESULT,
        'AddSphere',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'Radius'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pSphere')
    ),
    COMMETHOD(
        [dispid(1571), helpstring('Creates a quadratic or cubic NURBS (nonuniform rational B-spline) curve')],
        HRESULT,
        'AddSpline',
        (['in'], VARIANT, 'PointsArray'),
        (['in'], VARIANT, 'StartTangent'),
        (['in'], VARIANT, 'EndTangent'),
        (['out', 'retval'], POINTER(POINTER(IAcadSpline)), 'pSpline')
    ),
    COMMETHOD(
        [dispid(1572), helpstring('Creates a single line of text')],
        HRESULT,
        'AddText',
        (['in'], BSTR, 'TextString'),
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcadText)), 'pText')
    ),
    COMMETHOD(
        [dispid(1573), helpstring('Creates a tolerance entity')],
        HRESULT,
        'AddTolerance',
        (['in'], BSTR, 'Text'),
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], VARIANT, 'Direction'),
        (['out', 'retval'], POINTER(POINTER(IAcadTolerance)), 'pTolerance')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Creates a torus at the given location')],
        HRESULT,
        'AddTorus',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'TorusRadius'),
        (['in'], c_double, 'TubeRadius'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pTorus')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Creates a Trace object from an array of points')],
        HRESULT,
        'AddTrace',
        (['in'], VARIANT, 'PointsArray'),
        (['out', 'retval'], POINTER(POINTER(IAcadTrace)), 'pTrace')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Creates a wedge with edges parallel to the axes given the length, width, and height')],
        HRESULT,
        'AddWedge',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'Length'),
        (['in'], c_double, 'Width'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pWedge')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Creates an xline (an infinite line) passing through two specified points')],
        HRESULT,
        'AddXline',
        (['in'], VARIANT, 'Point1'),
        (['in'], VARIANT, 'Point2'),
        (['out', 'retval'], POINTER(POINTER(IAcadXline)), 'pXline')
    ),
    COMMETHOD(
        [dispid(1578), helpstring('Inserts a drawing file or a named block that has been defined in the current drawing')],
        HRESULT,
        'InsertBlock',
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Xscale'),
        (['in'], c_double, 'Yscale'),
        (['in'], c_double, 'Zscale'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], VARIANT, 'Password'),
        (['out', 'retval'], POINTER(POINTER(IAcadBlockReference)), 'pBlkRef')
    ),
    COMMETHOD(
        [dispid(1579), helpstring('Creates a Hatch object')],
        HRESULT,
        'AddHatch',
        (['in'], c_int, 'PatternType'),
        (['in'], BSTR, 'PatternName'),
        (['in'], VARIANT_BOOL, 'Associativity'),
        (['in', 'optional'], VARIANT, 'HatchObjectType'),
        (['out', 'retval'], POINTER(POINTER(IAcadHatch)), 'pHatch')
    ),
    COMMETHOD(
        [dispid(1580), helpstring('Creates a new raster image based on an existing image file')],
        HRESULT,
        'AddRaster',
        (['in'], BSTR, 'imageFileName'),
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], c_double, 'ScaleFactor'),
        (['in'], c_double, 'RotationAngle'),
        (['out', 'retval'], POINTER(POINTER(IAcadRasterImage)), 'pRaster')
    ),
    COMMETHOD(
        [dispid(1581), helpstring('Creates a line passing through two points')],
        HRESULT,
        'AddLine',
        (['in'], VARIANT, 'StartPoint'),
        (['in'], VARIANT, 'EndPoint'),
        (['out', 'retval'], POINTER(POINTER(IAcadLine)), 'pLine')
    ),
    COMMETHOD(
        [dispid(1582), helpstring('Determines if the given block is a layout block'), 'propget'],
        HRESULT,
        'IsLayout',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsLayout')
    ),
    COMMETHOD(
        [dispid(1583), helpstring('Specifies the layout associated with the model space, paper space, or block object'), 'propget'],
        HRESULT,
        'Layout',
        (['out', 'retval'], POINTER(POINTER(IAcadLayout)), 'pLayout')
    ),
    COMMETHOD(
        [dispid(1584), helpstring('Determines if the given block is an XRef block'), 'propget'],
        HRESULT,
        'IsXRef',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pIsXRref')
    ),
    COMMETHOD(
        [dispid(1585), helpstring('Inserts an array of blocks')],
        HRESULT,
        'AddMInsertBlock',
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Xscale'),
        (['in'], c_double, 'Yscale'),
        (['in'], c_double, 'Zscale'),
        (['in'], c_double, 'Rotation'),
        (['in'], c_int, 'NumRows'),
        (['in'], c_int, 'NumColumns'),
        (['in'], c_int, 'RowSpacing'),
        (['in'], c_int, 'ColumnSpacing'),
        (['in', 'optional'], VARIANT, 'Password'),
        (['out', 'retval'], POINTER(POINTER(IAcadMInsertBlock)), 'pMInsertBlk')
    ),
    COMMETHOD(
        [dispid(1586), helpstring('Creates a polyface mesh from a list of vertices')],
        HRESULT,
        'AddPolyfaceMesh',
        (['in'], VARIANT, 'VertexList'),
        (['in'], VARIANT, 'FaceList'),
        (['out', 'retval'], POINTER(POINTER(IAcadPolyfaceMesh)), 'pPFMesh')
    ),
    COMMETHOD(
        [dispid(1587), helpstring('Creates a polyface mesh from a list of vertices')],
        HRESULT,
        'AddMLine',
        (['in'], VARIANT, 'VertexList'),
        (['out', 'retval'], POINTER(POINTER(IAcadMLine)), 'pMLine')
    ),
    COMMETHOD(
        [dispid(1588), helpstring('Creates an angular dimension for an arc, two lines, or a circle')],
        HRESULT,
        'AddDim3PointAngular',
        (['in'], VARIANT, 'AngleVertex'),
        (['in'], VARIANT, 'FirstEndPoint'),
        (['in'], VARIANT, 'SecondEndPoint'),
        (['in'], VARIANT, 'TextPoint'),
        (['out', 'retval'], POINTER(POINTER(IAcadDim3PointAngular)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1589), helpstring('Gets the Database object that defines the contents of the block'), 'propget'],
        HRESULT,
        'XRefDatabase',
        (['out', 'retval'], POINTER(POINTER(IAcadDatabase)), 'pDatabase')
    ),
    COMMETHOD(
        [dispid(1590), helpstring('Attaches an external reference (xref) to the drawing')],
        HRESULT,
        'AttachExternalReference',
        (['in'], BSTR, 'PathName'),
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], c_double, 'Xscale'),
        (['in'], c_double, 'Yscale'),
        (['in'], c_double, 'Zscale'),
        (['in'], c_double, 'Rotation'),
        (['in'], VARIANT_BOOL, 'bOverlay'),
        (['in', 'optional'], VARIANT, 'Password'),
        (['out', 'retval'], POINTER(POINTER(IAcadExternalReference)), 'pXRef')
    ),
    COMMETHOD(
        [dispid(1591), helpstring('Unloads the menu group or external reference')],
        HRESULT,
        'Unload',
    ),
    COMMETHOD(
        [dispid(1592), helpstring('Reloads the external reference (xref)')],
        HRESULT,
        'Reload',
    ),
    COMMETHOD(
        [dispid(1593), helpstring('Binds an external reference (xref) to a drawing')],
        HRESULT,
        'Bind',
        (['in'], VARIANT_BOOL, 'bPrefixName')
    ),
    COMMETHOD(
        [dispid(1594), helpstring('Detachs an external reference (xref) from a drawing')],
        HRESULT,
        'Detach',
    ),
    COMMETHOD(
        [dispid(1595), helpstring('Creates a table at the given insertion point, given the number of rows, number of columns, row height and column width')],
        HRESULT,
        'AddTable',
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], c_int, 'NumRows'),
        (['in'], c_int, 'NumColumns'),
        (['in'], c_double, 'RowHeight'),
        (['in'], c_double, 'ColWidth'),
        (['out', 'retval'], POINTER(POINTER(IAcadTable)), 'pTable')
    ),
    COMMETHOD(
        [dispid(1596), helpstring('Specifies the path of the external reference'), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1596), helpstring('Specifies the path of the external reference'), 'propput'],
        HRESULT,
        'Path',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1597), helpstring('Specifies the comments for the block'), 'propget'],
        HRESULT,
        'Comments',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1597), helpstring('Specifies the comments for the block'), 'propput'],
        HRESULT,
        'Comments',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1598), helpstring('Specifies the native units of measure for the block'), 'propget'],
        HRESULT,
        'Units',
        (['out', 'retval'], POINTER(AcInsertUnits), 'pIU')
    ),
    COMMETHOD(
        [dispid(1598), helpstring('Specifies the native units of measure for the block'), 'propput'],
        HRESULT,
        'Units',
        (['in'], AcInsertUnits, 'pIU')
    ),
    COMMETHOD(
        [dispid(1599), helpstring('Specifies whether the block can be exploded'), 'propget'],
        HRESULT,
        'Explodable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bExplodable')
    ),
    COMMETHOD(
        [dispid(1599), helpstring('Specifies whether the block can be exploded'), 'propput'],
        HRESULT,
        'Explodable',
        (['in'], VARIANT_BOOL, 'bExplodable')
    ),
    COMMETHOD(
        [dispid(1600), helpstring('Specifies the allowed scaling for the block'), 'propget'],
        HRESULT,
        'BlockScaling',
        (['out', 'retval'], POINTER(AcBlockScaling), 'pBS')
    ),
    COMMETHOD(
        [dispid(1600), helpstring('Specifies the allowed scaling for the block'), 'propput'],
        HRESULT,
        'BlockScaling',
        (['in'], AcBlockScaling, 'pBS')
    ),
    COMMETHOD(
        [dispid(1601), helpstring('Specifies if this is a dynamic block'), 'propget'],
        HRESULT,
        'IsDynamicBlock',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pDynamicBlock')
    ),
    COMMETHOD(
        [dispid(1602), helpstring('Creates an arc length dimension for an arc')],
        HRESULT,
        'AddDimArc',
        (['in'], VARIANT, 'ArcCenter'),
        (['in'], VARIANT, 'FirstEndPoint'),
        (['in'], VARIANT, 'SecondEndPoint'),
        (['in'], VARIANT, 'ArcPoint'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimArcLength)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1603), helpstring('Creates a jogged radial dimension for an arc, circle, or polyline arc segment')],
        HRESULT,
        'AddDimRadialLarge',
        (['in'], VARIANT, 'Center'),
        (['in'], VARIANT, 'ChordPoint'),
        (['in'], VARIANT, 'OverrideCenter'),
        (['in'], VARIANT, 'JogPoint'),
        (['in'], c_double, 'JogAngle'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimRadialLarge)), 'pDim')
    ),
    COMMETHOD(
        [dispid(1604), helpstring('Creates a section plane')],
        HRESULT,
        'AddSection',
        (['in'], VARIANT, 'FromPoint'),
        (['in'], VARIANT, 'ToPoint'),
        (['in'], VARIANT, 'planeVector'),
        (['out', 'retval'], POINTER(POINTER(IAcadSection)), 'ppSecPlane')
    ),
    COMMETHOD(
        [dispid(1605), helpstring('Creates a multileader')],
        HRESULT,
        'AddMLeader',
        (['in'], VARIANT, 'PointsArray'),
        (['out'], POINTER(c_int), 'leaderLineIndex'),
        (['out', 'retval'], POINTER(POINTER(IAcadMLeader)), 'pMLeader')
    ),
]

################################################################
# code template for IAcadBlock implementation
# class IAcadBlock_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pVal
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'
#         #return Origin
#     def _set(self, Origin):
#         'Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'
#     Origin = property(_get, _set, doc = _set.__doc__)
#
#     def AddCustomObject(self, ClassName):
#         'Creates a Custom object'
#         #return pObject
#
#     def Add3DFace(self, Point1, Point2, point3, Point4):
#         'Creates a 3DFace object given four vertices'
#         #return pFace3d
#
#     def Add3DMesh(self, M, N, PointsMatrix):
#         'Creates a free-form 3D mesh, given the number of points in the M and N directions and the coordinates of the points in the M and N directions'
#         #return pMesh3d
#
#     def Add3DPoly(self, PointsArray):
#         'Creates a 3D polyline from the given array of coordinates'
#         #return pPoly3d
#
#     def AddArc(self, Center, Radius, StartAngle, EndAngle):
#         'Creates an arc given the center, radius, start angle, and end angle of the arc'
#         #return pArc
#
#     def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
#         'Creates an attribute definition at the given location with the specified properties'
#         #return pAttr
#
#     def AddBox(self, Origin, Length, Width, Height):
#         'Creates a 3D solid box with edges parallel to the axes of the WCS'
#         #return pBox
#
#     def AddCircle(self, Center, Radius):
#         'Creates a circle given a center point and radius'
#         #return pCircle
#
#     def AddCone(self, Center, BaseRadius, Height):
#         'Creates a 3D solid cone with the base on the XY plane of the WCS'
#         #return pCone
#
#     def AddCylinder(self, Center, Radius, Height):
#         'Creates a 3D solid cylinder whose base is on the XY plane of the WCS'
#         #return pCyl
#
#     def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
#         'Creates an aligned dimension object'
#         #return pDim
#
#     def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
#         'Creates an angular dimension for an arc, two lines, or a circle'
#         #return pDim
#
#     def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
#         'Creates a diametric dimension for a circle or arc given the two points on the diameter and the length of the leader line'
#         #return pDim
#
#     def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
#         'Creates a rotated linear dimension'
#         #return pDim
#
#     def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
#         'Creates an ordinate dimension given the definition point, and leader endpoint'
#         #return pDim
#
#     def AddDimRadial(self, Center, ChordPoint, LeaderLength):
#         'Creates a radial dimension for the selected object at the given location'
#         #return pDim
#
#     def AddEllipse(self, Center, MajorAxis, RadiusRatio):
#         'Creates an ellipse in the XY plane of the WCS given the center point, a point on the major axis, and the radius ratio'
#         #return pEllipse
#
#     def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
#         'Creates a 3D solid elliptical cone on the XY plane of the WCS given the Center, MajorRadius, MinorRadius, and Height'
#         #return pEllipCone
#
#     def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
#         'Creates a 3D solid elliptical cylinder whose base is on the XY plane of the WCS, given the Center, MajorRadius, MinorRadius, and Height'
#         #return pEllipCyl
#
#     def AddExtrudedSolid(self, Profile, Height, TaperAngle):
#         'Creates an extruded solid given the Profile, Height, and TaperAngle'
#         #return pExtrSolid
#
#     def AddExtrudedSolidAlongPath(self, Profile, Path):
#         'Creates an extruded solid given the profile and an extrusion path'
#         #return pExtrSolid
#
#     def AddLeader(self, PointsArray, Annotation, Type):
#         'Creates a leader line, given the coordinates of the points'
#         #return pLeader
#
#     def AddMText(self, InsertionPoint, Width, Text):
#         'Creates an MText entity in a rectangle defined by the insertion point and width of the bounding box'
#         #return pMtext
#
#     def AddPoint(self, Point):
#         'Creates a Point object at a given location'
#         #return pPoint
#
#     def AddLightWeightPolyline(self, VerticesList):
#         'Creates a lightweight polyline from a list of vertices'
#         #return pLWPolyline
#
#     def AddPolyline(self, VerticesList):
#         'Creates a polyline from a list of vertices'
#         #return pPolyline
#
#     def AddRay(self, Point1, Point2):
#         'Creates a ray passing through two unique points'
#         #return pRay
#
#     def AddRegion(self, ObjectList):
#         'Creates a region from a set of entities. The given entities must form a closed coplanar region'
#         #return pRegions
#
#     def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
#         'Creates a revolved solid, given the region around an axis'
#         #return pRevolSolid
#
#     def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
#         'Creates a Shape object based on a template identified by name, at the given insertion point, scale factor, and rotation'
#         #return pShape
#
#     def AddSolid(self, Point1, Point2, point3, Point4):
#         'Creates a 2D solid polygon'
#         #return pSolid
#
#     def AddSphere(self, Center, Radius):
#         'Creates a sphere given the center and radius'
#         #return pSphere
#
#     def AddSpline(self, PointsArray, StartTangent, EndTangent):
#         'Creates a quadratic or cubic NURBS (nonuniform rational B-spline) curve'
#         #return pSpline
#
#     def AddText(self, TextString, InsertionPoint, Height):
#         'Creates a single line of text'
#         #return pText
#
#     def AddTolerance(self, Text, InsertionPoint, Direction):
#         'Creates a tolerance entity'
#         #return pTolerance
#
#     def AddTorus(self, Center, TorusRadius, TubeRadius):
#         'Creates a torus at the given location'
#         #return pTorus
#
#     def AddTrace(self, PointsArray):
#         'Creates a Trace object from an array of points'
#         #return pTrace
#
#     def AddWedge(self, Center, Length, Width, Height):
#         'Creates a wedge with edges parallel to the axes given the length, width, and height'
#         #return pWedge
#
#     def AddXline(self, Point1, Point2):
#         'Creates an xline (an infinite line) passing through two specified points'
#         #return pXline
#
#     def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
#         'Inserts a drawing file or a named block that has been defined in the current drawing'
#         #return pBlkRef
#
#     def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
#         'Creates a Hatch object'
#         #return pHatch
#
#     def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
#         'Creates a new raster image based on an existing image file'
#         #return pRaster
#
#     def AddLine(self, StartPoint, EndPoint):
#         'Creates a line passing through two points'
#         #return pLine
#
#     @property
#     def IsLayout(self):
#         'Determines if the given block is a layout block'
#         #return bIsLayout
#
#     @property
#     def Layout(self):
#         'Specifies the layout associated with the model space, paper space, or block object'
#         #return pLayout
#
#     @property
#     def IsXRef(self):
#         'Determines if the given block is an XRef block'
#         #return pIsXRref
#
#     def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
#         'Inserts an array of blocks'
#         #return pMInsertBlk
#
#     def AddPolyfaceMesh(self, VertexList, FaceList):
#         'Creates a polyface mesh from a list of vertices'
#         #return pPFMesh
#
#     def AddMLine(self, VertexList):
#         'Creates a polyface mesh from a list of vertices'
#         #return pMLine
#
#     def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
#         'Creates an angular dimension for an arc, two lines, or a circle'
#         #return pDim
#
#     @property
#     def XRefDatabase(self):
#         'Gets the Database object that defines the contents of the block'
#         #return pDatabase
#
#     def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
#         'Attaches an external reference (xref) to the drawing'
#         #return pXRef
#
#     def Unload(self):
#         'Unloads the menu group or external reference'
#         #return 
#
#     def Reload(self):
#         'Reloads the external reference (xref)'
#         #return 
#
#     def Bind(self, bPrefixName):
#         'Binds an external reference (xref) to a drawing'
#         #return 
#
#     def Detach(self):
#         'Detachs an external reference (xref) from a drawing'
#         #return 
#
#     def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
#         'Creates a table at the given insertion point, given the number of rows, number of columns, row height and column width'
#         #return pTable
#
#     def _get(self):
#         'Specifies the path of the external reference'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the path of the external reference'
#     Path = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the comments for the block'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the comments for the block'
#     Comments = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the native units of measure for the block'
#         #return pIU
#     def _set(self, pIU):
#         'Specifies the native units of measure for the block'
#     Units = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether the block can be exploded'
#         #return bExplodable
#     def _set(self, bExplodable):
#         'Specifies whether the block can be exploded'
#     Explodable = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the allowed scaling for the block'
#         #return pBS
#     def _set(self, pBS):
#         'Specifies the allowed scaling for the block'
#     BlockScaling = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def IsDynamicBlock(self):
#         'Specifies if this is a dynamic block'
#         #return pDynamicBlock
#
#     def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
#         'Creates an arc length dimension for an arc'
#         #return pDim
#
#     def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
#         'Creates a jogged radial dimension for an arc, circle, or polyline arc segment'
#         #return pDim
#
#     def AddSection(self, FromPoint, ToPoint, planeVector):
#         'Creates a section plane'
#         #return ppSecPlane
#
#     def AddMLeader(self, PointsArray):
#         'Creates a multileader'
#         #return leaderLineIndex, pMLeader
#

IAcadPaperSpace._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Adds a paper space viewport, given the center, height, and width')],
        HRESULT,
        'AddPViewport',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'Width'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(POINTER(IAcadPViewport)), 'pPViewport')
    ),
]

################################################################
# code template for IAcadPaperSpace implementation
# class IAcadPaperSpace_Impl(object):
#     def AddPViewport(self, Center, Width, Height):
#         'Adds a paper space viewport, given the center, height, and width'
#         #return pPViewport
#


class AcadDimRadial(CoClass):
    """AutoCAD Radial Dimension Object"""
    _reg_clsid_ = GUID('{5FA953A5-CCEA-462B-9E47-1316DB19D57C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDimRadial._com_interfaces_ = [IAcadDimRadial]
AcadDimRadial._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDimRotated(CoClass):
    """AutoCAD Rotated Dimension Object"""
    _reg_clsid_ = GUID('{CA6599F0-DAD2-4798-92AE-90D5D3571E31}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDimRotated._com_interfaces_ = [IAcadDimRotated]
AcadDimRotated._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadLayerStateManager(CoClass):
    """AcadLayerStateManager Class"""
    _reg_clsid_ = GUID('{BCB968EE-5A0B-4972-929F-57CE8E45CCF1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLayerStateManager._com_interfaces_ = [IAcadLayerStateManager]


class _DAcadApplicationEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """Event interface for AcadApplication"""
    _case_insensitive_ = True
    _iid_ = GUID('{8E5EE0A0-E6A1-4922-B29C-C289A72F16E2}')
    _idlflags_ = ['hidden']
    _methods_ = []


_DAcadApplicationEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1), helpstring('Triggered when the value of a system variable is changed')],
        HRESULT,
        'SysVarChanged',
        (['in'], BSTR, 'SysvarName'),
        (['in'], VARIANT, 'newVal')
    ),
    DISPMETHOD(
        [dispid(2), helpstring('Triggered just before a new drawing is created')],
        HRESULT,
        'NewDrawing',
    ),
    DISPMETHOD(
        [dispid(3), helpstring('Triggered just before the main application window is activated')],
        HRESULT,
        'AppActivate',
    ),
    DISPMETHOD(
        [dispid(4), helpstring('Triggered just before the main application window is deactivated')],
        HRESULT,
        'AppDeactivate',
    ),
    DISPMETHOD(
        [dispid(5), helpstring('Happens when the main frame window is moved or resized')],
        HRESULT,
        'WindowMovedOrResized',
        (['in'], c_int, 'HWNDFrame'),
        (['in'], VARIANT_BOOL, 'bMoved')
    ),
    DISPMETHOD(
        [dispid(6), helpstring('Triggered just before a modal dialog is displayed')],
        HRESULT,
        'BeginModal',
    ),
    DISPMETHOD(
        [dispid(7), helpstring('Triggered just after a modal dialog is dismissed')],
        HRESULT,
        'EndModal',
    ),
    DISPMETHOD(
        [dispid(8), helpstring('Triggered just before an AutoCAD session ends or a document closes')],
        HRESULT,
        'BeginQuit',
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    DISPMETHOD(
        [dispid(10), helpstring('Triggered when a file is dropped on the main application window')],
        HRESULT,
        'BeginFileDrop',
        (['in'], BSTR, 'FileName'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    DISPMETHOD(
        [dispid(11), helpstring('Triggered when an ObjectARX application has been loaded')],
        HRESULT,
        'ARXLoaded',
        (['in'], BSTR, 'AppName')
    ),
    DISPMETHOD(
        [dispid(12), helpstring('Triggered when an ObjectARX application has been unloaded')],
        HRESULT,
        'ARXUnloaded',
        (['in'], BSTR, 'AppName')
    ),
    DISPMETHOD(
        [dispid(13), helpstring('Triggered immediately after AutoCAD receives a request to print a drawing')],
        HRESULT,
        'BeginPlot',
        (['in'], BSTR, 'DrawingName')
    ),
    DISPMETHOD(
        [dispid(14), helpstring('Triggered after a document has been sent to the printer')],
        HRESULT,
        'EndPlot',
        (['in'], BSTR, 'DrawingName')
    ),
    DISPMETHOD(
        [dispid(19), helpstring('Triggered immediately after AutoCAD receives a request to save the drawing')],
        HRESULT,
        'BeginSave',
        (['in'], BSTR, 'FileName')
    ),
    DISPMETHOD(
        [dispid(20), helpstring('Triggered when AutoCAD has finished saving the drawing')],
        HRESULT,
        'EndSave',
        (['in'], BSTR, 'FileName')
    ),
    DISPMETHOD(
        [dispid(21), helpstring('Triggered immediately after AutoCAD receives a request to open an existing drawing')],
        HRESULT,
        'BeginOpen',
        (['in', 'out'], POINTER(BSTR), 'FileName')
    ),
    DISPMETHOD(
        [dispid(22), helpstring('Triggered immediately after AutoCAD finishes opening an existing drawing')],
        HRESULT,
        'EndOpen',
        (['in'], BSTR, 'FileName')
    ),
    DISPMETHOD(
        [dispid(17), helpstring('Triggered immediately after a command is issued, but before it completes')],
        HRESULT,
        'BeginCommand',
        (['in'], BSTR, 'CommandName')
    ),
    DISPMETHOD(
        [dispid(18), helpstring('Triggered immediately after a command completes')],
        HRESULT,
        'EndCommand',
        (['in'], BSTR, 'CommandName')
    ),
    DISPMETHOD(
        [dispid(15), helpstring('Triggered immediately after AutoCAD receives a request to evaluate a LISP expression')],
        HRESULT,
        'BeginLisp',
        (['in'], BSTR, 'FirstLine')
    ),
    DISPMETHOD(
        [dispid(16), helpstring('Triggered upon completion of evaluating a LISP expression')],
        HRESULT,
        'EndLisp',
    ),
    DISPMETHOD(
        [dispid(24), helpstring('Triggered when the evaluation of a LISP expression is cancelled')],
        HRESULT,
        'LispCancelled',
    ),
    DISPMETHOD(
        [dispid(25), helpstring('Triggered when there is a change to the application or document windows')],
        HRESULT,
        'WindowChanged',
        (['in'], AcWindowState, 'WindowState')
    ),
]


class AcadDim3PointAngular(CoClass):
    """AutoCAD 3PointAngular Dimension Object"""
    _reg_clsid_ = GUID('{8506092F-B2E4-461C-A87C-E70A0931D06D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDim3PointAngular._com_interfaces_ = [IAcadDim3PointAngular]
AcadDim3PointAngular._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDimArcLength(CoClass):
    """AutoCAD Arc Length Dimension Object"""
    _reg_clsid_ = GUID('{9C041F1C-56FC-40FE-82B3-F7D6DA78175D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDimArcLength._com_interfaces_ = [IAcadDimArcLength]
AcadDimArcLength._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadMenuBar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A collection of PopupMenu objects representing the current AutoCAD menu bar"""
    _case_insensitive_ = True
    _iid_ = GUID('{A704FE5B-8BA2-484E-90FD-7AC8AF48A380}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadMenuBar._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenu)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pEnumVariant')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pParent')
    ),
]

################################################################
# code template for IAcadMenuBar implementation
# class IAcadMenuBar_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pEnumVariant
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return Count
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#

IAcadSectionTypeSettings2._methods_ = [
    COMMETHOD(
        [dispid(50), helpstring('Specifies the visibility of intersection boundary'), 'propget'],
        HRESULT,
        'IntersectionBoundaryVisible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Specifies the visibility of intersection boundary'), 'propput'],
        HRESULT,
        'IntersectionBoundaryVisible',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
]

################################################################
# code template for IAcadSectionTypeSettings2 implementation
# class IAcadSectionTypeSettings2_Impl(object):
#     def _get(self):
#         'Specifies the visibility of intersection boundary'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the visibility of intersection boundary'
#     IntersectionBoundaryVisible = property(_get, _set, doc = _set.__doc__)
#

IAcadPViewport._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for the center of the viewport or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'Center',
        (['out', 'retval'], POINTER(VARIANT), 'CenterPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate for the center of the viewport or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'Center',
        (['in'], VARIANT, 'CenterPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the viewing direction for a 3D visualization of the drawing'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Direction',
        (['out', 'retval'], POINTER(VARIANT), 'dirVector')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the viewing direction for a 3D visualization of the drawing'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Direction',
        (['in'], VARIANT, 'dirVector')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the status of the viewport grid'), 'nonbrowsable', 'propget'],
        HRESULT,
        'GridOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bGridOn')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the status of the viewport grid'), 'nonbrowsable', 'propput'],
        HRESULT,
        'GridOn',
        (['in'], VARIANT_BOOL, 'bGridOn')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the height of the viewport'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the height of the viewport'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width of the viewport'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width of the viewport'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Determines whether the viewport is On or Off'), 'propget'],
        HRESULT,
        'ViewportOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bOn')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Determines whether the viewport is On or Off'), 'propput'],
        HRESULT,
        'ViewportOn',
        (['in'], VARIANT_BOOL, 'bOn')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies that standard viewport border is replaced with user defined boundary'), 'propget'],
        HRESULT,
        'Clipped',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bClipped')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Determines whether viewport is in locked state or not'), 'propget'],
        HRESULT,
        'DisplayLocked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bLocked')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Determines whether viewport is in locked state or not'), 'propput'],
        HRESULT,
        'DisplayLocked',
        (['in'], VARIANT_BOOL, 'bLocked')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the standard scale for the viewport'), 'propget'],
        HRESULT,
        'StandardScale',
        (['out', 'retval'], POINTER(AcViewportScale), 'scale')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the standard scale for the viewport'), 'propput'],
        HRESULT,
        'StandardScale',
        (['in'], AcViewportScale, 'scale')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the custom scale for the viewport'), 'propget'],
        HRESULT,
        'CustomScale',
        (['out', 'retval'], POINTER(c_double), 'scale')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the custom scale for the viewport'), 'propput'],
        HRESULT,
        'CustomScale',
        (['in'], c_double, 'scale')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Returns the style sheet to use'), 'hidden', 'propget'],
        HRESULT,
        'StyleSheet',
        (['out', 'retval'], POINTER(BSTR), 'pName')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Returns the style sheet to use'), 'hidden', 'propput'],
        HRESULT,
        'StyleSheet',
        (['in'], BSTR, 'pName')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Determines whether the UCS is saved with the viewport or not'), 'propget'],
        HRESULT,
        'UCSPerViewport',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'UCSSaved')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Determines whether the UCS is saved with the viewport or not'), 'propput'],
        HRESULT,
        'UCSPerViewport',
        (['in'], VARIANT_BOOL, 'UCSSaved')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the snap base point for the viewport'), 'nonbrowsable', 'propget'],
        HRESULT,
        'SnapBasePoint',
        (['out', 'retval'], POINTER(VARIANT), 'lowLeft')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the snap base point for the viewport'), 'nonbrowsable', 'propput'],
        HRESULT,
        'SnapBasePoint',
        (['in'], VARIANT, 'lowLeft')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the status of snap'), 'nonbrowsable', 'propget'],
        HRESULT,
        'SnapOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSnapOn')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the status of snap'), 'nonbrowsable', 'propput'],
        HRESULT,
        'SnapOn',
        (['in'], VARIANT_BOOL, 'bSnapOn')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the snap rotation angle of the viewport relative to the current UCS'), 'nonbrowsable', 'propget'],
        HRESULT,
        'SnapRotationAngle',
        (['out', 'retval'], POINTER(c_double), 'Angle')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the snap rotation angle of the viewport relative to the current UCS'), 'nonbrowsable', 'propput'],
        HRESULT,
        'SnapRotationAngle',
        (['in'], c_double, 'Angle')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies if the UCS icon is on'), 'nonbrowsable', 'propget'],
        HRESULT,
        'UCSIconOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconOn')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies if the UCS icon is on'), 'nonbrowsable', 'propput'],
        HRESULT,
        'UCSIconOn',
        (['in'], VARIANT_BOOL, 'bIconOn')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies if the UCS icon is displayed at the origin'), 'nonbrowsable', 'propget'],
        HRESULT,
        'UCSIconAtOrigin',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconAtOrigin')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies if the UCS icon is displayed at the origin'), 'nonbrowsable', 'propput'],
        HRESULT,
        'UCSIconAtOrigin',
        (['in'], VARIANT_BOOL, 'bIconAtOrigin')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the grid spacing for the viewport')],
        HRESULT,
        'GetGridSpacing',
        (['out'], POINTER(c_double), 'XSpacing'),
        (['out'], POINTER(c_double), 'YSpacing')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets the grid spacing for the viewport')],
        HRESULT,
        'SetGridSpacing',
        (['in'], c_double, 'XSpacing'),
        (['in'], c_double, 'YSpacing')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies the snap spacing for the viewport')],
        HRESULT,
        'GetSnapSpacing',
        (['out'], POINTER(c_double), 'XSpacing'),
        (['out'], POINTER(c_double), 'YSpacing')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Sets the snap spacing for the viewport')],
        HRESULT,
        'SetSnapSpacing',
        (['in'], c_double, 'XSpacing'),
        (['in'], c_double, 'YSpacing')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Determines whether viewport is On or Off')],
        HRESULT,
        'Display',
        (['in'], VARIANT_BOOL, 'bStatus')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the twist angle for the viewport'), 'nonbrowsable', 'propget'],
        HRESULT,
        'TwistAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the twist angle for the viewport'), 'nonbrowsable', 'propput'],
        HRESULT,
        'TwistAngle',
        (['in'], ACAD_ANGLE, 'Angle')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the lens length used in perspective viewing'), 'nonbrowsable', 'propget'],
        HRESULT,
        'LensLength',
        (['out', 'retval'], POINTER(c_double), 'Length')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the lens length used in perspective viewing'), 'nonbrowsable', 'propput'],
        HRESULT,
        'LensLength',
        (['in'], c_double, 'Length')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Determines whether hidden line removal is On or Off'), 'hidden', 'propget'],
        HRESULT,
        'RemoveHiddenLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bRemoval')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Determines whether hidden line removal is On or Off'), 'hidden', 'propput'],
        HRESULT,
        'RemoveHiddenLines',
        (['in'], VARIANT_BOOL, 'bRemoval')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the target point for the view or viewport'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Target',
        (['out', 'retval'], POINTER(VARIANT), 'targetPoint')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Specifies the target point for the view or viewport'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Target',
        (['in'], VARIANT, 'targetPoint')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies the smoothness of circles, arcs, and ellipses'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ArcSmoothness',
        (['out', 'retval'], POINTER(c_int), 'arcSmooth')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Specifies the smoothness of circles, arcs, and ellipses'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ArcSmoothness',
        (['in'], c_int, 'arcSmooth')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Specifies the visual style of the viewport'), 'propget'],
        HRESULT,
        'VisualStyle',
        (['out', 'retval'], POINTER(c_int), 'pVisualStyleIndex')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Specifies the visual style of the viewport'), 'propput'],
        HRESULT,
        'VisualStyle',
        (['in'], c_int, 'pVisualStyleIndex')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Specifies the shade plot mode of the viewport'), 'propget'],
        HRESULT,
        'ShadePlot',
        (['out', 'retval'], POINTER(c_int), 'pShadePlotIndex')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Specifies the shade plot mode of the viewport'), 'propput'],
        HRESULT,
        'ShadePlot',
        (['in'], c_int, 'pShadePlotIndex')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Returns and sets the model view associated with the viewport.'), 'propget'],
        HRESULT,
        'ModelView',
        (['out', 'retval'], POINTER(POINTER(IAcadView)), 'View')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Returns and sets the model view associated with the viewport.'), 'propput'],
        HRESULT,
        'ModelView',
        (['in'], POINTER(IAcadView), 'View')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Returns and sets the sheet view associated with the viewport.'), 'propget'],
        HRESULT,
        'SheetView',
        (['out', 'retval'], POINTER(POINTER(IAcadView)), 'View')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Returns and sets the sheet view associated with the viewport.'), 'propput'],
        HRESULT,
        'SheetView',
        (['in'], POINTER(IAcadView), 'View')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Returns and sets the label block id associated with the viewport.'), 'propget'],
        HRESULT,
        'LabelBlockId',
        (['out', 'retval'], POINTER(LONG_PTR), 'ObjectID')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Returns and sets the label block id associated with the viewport.'), 'propput'],
        HRESULT,
        'LabelBlockId',
        (['in'], POINTER(LONG_PTR), 'ObjectID')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies whether the viewport is linked to a corresponding sheet view'), 'propget'],
        HRESULT,
        'HasSheetView',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSheetView')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Updates the viewport parameters with the parameters in the associated model view.')],
        HRESULT,
        'SyncModelView',
    ),
    COMMETHOD(
        [dispid(39), helpstring('Specifies the standard scale for the viewport'), 'propget'],
        HRESULT,
        'StandardScale2',
        (['out', 'retval'], POINTER(c_int), 'scale')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Specifies the standard scale for the viewport'), 'propput'],
        HRESULT,
        'StandardScale2',
        (['in'], c_int, 'scale')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Specifies whether the viewport has layer property overrides.'), 'propget'],
        HRESULT,
        'LayerPropertyOverrides',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bOverrides')
    ),
]

################################################################
# code template for IAcadPViewport implementation
# class IAcadPViewport_Impl(object):
#     def _get(self):
#         'Specify the X, Y, Z coordinate for the center of the viewport or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return CenterPoint
#     def _set(self, CenterPoint):
#         'Specify the X, Y, Z coordinate for the center of the viewport or use the Pick Point button to set X, Y, Z values simultaneously'
#     Center = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the viewing direction for a 3D visualization of the drawing'
#         #return dirVector
#     def _set(self, dirVector):
#         'Specifies the viewing direction for a 3D visualization of the drawing'
#     Direction = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the status of the viewport grid'
#         #return bGridOn
#     def _set(self, bGridOn):
#         'Specifies the status of the viewport grid'
#     GridOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the viewport'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the viewport'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the viewport'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the viewport'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the viewport is On or Off'
#         #return bOn
#     def _set(self, bOn):
#         'Determines whether the viewport is On or Off'
#     ViewportOn = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Clipped(self):
#         'Specifies that standard viewport border is replaced with user defined boundary'
#         #return bClipped
#
#     def _get(self):
#         'Determines whether viewport is in locked state or not'
#         #return bLocked
#     def _set(self, bLocked):
#         'Determines whether viewport is in locked state or not'
#     DisplayLocked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the standard scale for the viewport'
#         #return scale
#     def _set(self, scale):
#         'Specifies the standard scale for the viewport'
#     StandardScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the custom scale for the viewport'
#         #return scale
#     def _set(self, scale):
#         'Specifies the custom scale for the viewport'
#     CustomScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns the style sheet to use'
#         #return pName
#     def _set(self, pName):
#         'Returns the style sheet to use'
#     StyleSheet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the UCS is saved with the viewport or not'
#         #return UCSSaved
#     def _set(self, UCSSaved):
#         'Determines whether the UCS is saved with the viewport or not'
#     UCSPerViewport = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the snap base point for the viewport'
#         #return lowLeft
#     def _set(self, lowLeft):
#         'Specifies the snap base point for the viewport'
#     SnapBasePoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the status of snap'
#         #return bSnapOn
#     def _set(self, bSnapOn):
#         'Specifies the status of snap'
#     SnapOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the snap rotation angle of the viewport relative to the current UCS'
#         #return Angle
#     def _set(self, Angle):
#         'Specifies the snap rotation angle of the viewport relative to the current UCS'
#     SnapRotationAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the UCS icon is on'
#         #return bIconOn
#     def _set(self, bIconOn):
#         'Specifies if the UCS icon is on'
#     UCSIconOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the UCS icon is displayed at the origin'
#         #return bIconAtOrigin
#     def _set(self, bIconAtOrigin):
#         'Specifies if the UCS icon is displayed at the origin'
#     UCSIconAtOrigin = property(_get, _set, doc = _set.__doc__)
#
#     def GetGridSpacing(self):
#         'Specifies the grid spacing for the viewport'
#         #return XSpacing, YSpacing
#
#     def SetGridSpacing(self, XSpacing, YSpacing):
#         'Sets the grid spacing for the viewport'
#         #return 
#
#     def GetSnapSpacing(self):
#         'Specifies the snap spacing for the viewport'
#         #return XSpacing, YSpacing
#
#     def SetSnapSpacing(self, XSpacing, YSpacing):
#         'Sets the snap spacing for the viewport'
#         #return 
#
#     def Display(self, bStatus):
#         'Determines whether viewport is On or Off'
#         #return 
#
#     def _get(self):
#         'Specifies the twist angle for the viewport'
#         #return Angle
#     def _set(self, Angle):
#         'Specifies the twist angle for the viewport'
#     TwistAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the lens length used in perspective viewing'
#         #return Length
#     def _set(self, Length):
#         'Specifies the lens length used in perspective viewing'
#     LensLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether hidden line removal is On or Off'
#         #return bRemoval
#     def _set(self, bRemoval):
#         'Determines whether hidden line removal is On or Off'
#     RemoveHiddenLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the target point for the view or viewport'
#         #return targetPoint
#     def _set(self, targetPoint):
#         'Specifies the target point for the view or viewport'
#     Target = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the smoothness of circles, arcs, and ellipses'
#         #return arcSmooth
#     def _set(self, arcSmooth):
#         'Specifies the smoothness of circles, arcs, and ellipses'
#     ArcSmoothness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the visual style of the viewport'
#         #return pVisualStyleIndex
#     def _set(self, pVisualStyleIndex):
#         'Specifies the visual style of the viewport'
#     VisualStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the shade plot mode of the viewport'
#         #return pShadePlotIndex
#     def _set(self, pShadePlotIndex):
#         'Specifies the shade plot mode of the viewport'
#     ShadePlot = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the model view associated with the viewport.'
#         #return View
#     def _set(self, View):
#         'Returns and sets the model view associated with the viewport.'
#     ModelView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the sheet view associated with the viewport.'
#         #return View
#     def _set(self, View):
#         'Returns and sets the sheet view associated with the viewport.'
#     SheetView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the label block id associated with the viewport.'
#         #return ObjectID
#     def _set(self, ObjectID):
#         'Returns and sets the label block id associated with the viewport.'
#     LabelBlockId = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasSheetView(self):
#         'Specifies whether the viewport is linked to a corresponding sheet view'
#         #return bSheetView
#
#     def SyncModelView(self):
#         'Updates the viewport parameters with the parameters in the associated model view.'
#         #return 
#
#     def _get(self):
#         'Specifies the standard scale for the viewport'
#         #return scale
#     def _set(self, scale):
#         'Specifies the standard scale for the viewport'
#     StandardScale2 = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LayerPropertyOverrides(self):
#         'Specifies whether the viewport has layer property overrides.'
#         #return bOverrides
#


class IAcadHyperlink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A URL and URL description"""
    _case_insensitive_ = True
    _iid_ = GUID('{842D073F-0DEE-4B16-8932-9633BA72B6A5}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadHyperlinks._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadHyperlink)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Description'),
        (['in', 'optional'], VARIANT, 'NamedLocation'),
        (['out', 'retval'], POINTER(POINTER(IAcadHyperlink)), 'pHyperlink')
    ),
]

################################################################
# code template for IAcadHyperlinks implementation
# class IAcadHyperlinks_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pVal
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return ApplicationObject
#
#     def Add(self, Name, Description, NamedLocation):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pHyperlink
#


class IAcadXRecord(IAcadObject):
    """XRecord objects are used to store and manage arbitrary data"""
    _case_insensitive_ = True
    _iid_ = GUID('{C90BD975-4088-47A3-AA1B-D7DBC1907548}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadXRecord._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the extended record data (XRecordData) associated with a dictionary')],
        HRESULT,
        'GetXRecordData',
        (['out'], POINTER(VARIANT), 'XRecordDataType'),
        (['out'], POINTER(VARIANT), 'XRecordDataValue')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets the extended record data (XRecordData) associated with a dictionary')],
        HRESULT,
        'SetXRecordData',
        (['in'], VARIANT, 'XRecordDataType'),
        (['in'], VARIANT, 'XRecordDataValue')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the translation of any contained object IDs during deepClone or wblockClone operations'), 'propget'],
        HRESULT,
        'TranslateIDs',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'xlateIds')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the translation of any contained object IDs during deepClone or wblockClone operations'), 'propput'],
        HRESULT,
        'TranslateIDs',
        (['in'], VARIANT_BOOL, 'xlateIds')
    ),
]

################################################################
# code template for IAcadXRecord implementation
# class IAcadXRecord_Impl(object):
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def GetXRecordData(self):
#         'Gets the extended record data (XRecordData) associated with a dictionary'
#         #return XRecordDataType, XRecordDataValue
#
#     def SetXRecordData(self, XRecordDataType, XRecordDataValue):
#         'Sets the extended record data (XRecordData) associated with a dictionary'
#         #return 
#
#     def _get(self):
#         'Specifies the translation of any contained object IDs during deepClone or wblockClone operations'
#         #return xlateIds
#     def _set(self, xlateIds):
#         'Specifies the translation of any contained object IDs during deepClone or wblockClone operations'
#     TranslateIDs = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcPlotPaperUnits'
acInches = 0
acMillimeters = 1
acPixels = 2
AcPlotPaperUnits = c_int  # enum

IAcadUtility._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Converts an angle as a string to a real (double) value')],
        HRESULT,
        'AngleToReal',
        (['in'], BSTR, 'Angle'),
        (['in'], AcAngleUnits, 'Unit'),
        (['out', 'retval'], POINTER(c_double), 'Value')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Converts an angle from a real (double) value to a string')],
        HRESULT,
        'AngleToString',
        (['in'], c_double, 'Angle'),
        (['in'], AcAngleUnits, 'Unit'),
        (['in'], c_int, 'precision'),
        (['out', 'retval'], POINTER(BSTR), 'bstrValue')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Converts a distance from a string to a real (double) value')],
        HRESULT,
        'DistanceToReal',
        (['in'], BSTR, 'Distance'),
        (['in'], AcUnits, 'Unit'),
        (['out', 'retval'], POINTER(c_double), 'Value')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Converts a real (double) value to a string')],
        HRESULT,
        'RealToString',
        (['in'], c_double, 'Value'),
        (['in'], AcUnits, 'Unit'),
        (['in'], c_int, 'precision'),
        (['out', 'retval'], POINTER(BSTR), 'bstrValue')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Translates a point from one coordinate system to another coordinate system')],
        HRESULT,
        'TranslateCoordinates',
        (['in'], VARIANT, 'Point'),
        (['in'], AcCoordinateSystem, 'FromCoordSystem'),
        (['in'], AcCoordinateSystem, 'ToCoordSystem'),
        (['in'], c_int, 'Displacement'),
        (['in', 'optional'], VARIANT, 'OCSNormal'),
        (['out', 'retval'], POINTER(VARIANT), 'transPt')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Initializes the GetKeyword method')],
        HRESULT,
        'InitializeUserInput',
        (['in'], c_int, 'Bits'),
        (['in', 'optional'], VARIANT, 'KeyWordList')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Gets an integer value from the user')],
        HRESULT,
        'GetInteger',
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(c_int), 'Value')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Gets a real (double) value from the user')],
        HRESULT,
        'GetReal',
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(c_double), 'Value')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Converts an input string from the user into a keyword index')],
        HRESULT,
        'GetInput',
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Gets a keyword string from the user')],
        HRESULT,
        'GetKeyword',
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(BSTR), 'bstrKeyword')
    ),
    COMMETHOD(
        [dispid(1610743818), helpstring('Gets a string from the user')],
        HRESULT,
        'GetString',
        (['in'], c_int, 'HasSpaces'),
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(BSTR), 'bstrValue')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Gets the angle specified. Considers the setting of the ANGBASE system variable')],
        HRESULT,
        'GetAngle',
        (['in', 'optional'], VARIANT, 'Point'),
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(c_double), 'Angle')
    ),
    COMMETHOD(
        [dispid(1610743820), helpstring('Gets the angle of a line from the X axis')],
        HRESULT,
        'AngleFromXAxis',
        (['in'], VARIANT, 'StartPoint'),
        (['in'], VARIANT, 'EndPoint'),
        (['out', 'retval'], POINTER(c_double), 'Angle')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Gets a corner of a rectangle')],
        HRESULT,
        'GetCorner',
        (['in'], VARIANT, 'Point'),
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(VARIANT), 'corner')
    ),
    COMMETHOD(
        [dispid(1610743822), helpstring('Gets the distance from the prompt line or a selected set of points on the screen')],
        HRESULT,
        'GetDistance',
        (['in', 'optional'], VARIANT, 'Point'),
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(c_double), 'dist')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Gets the angle specified. Ignores the setting of the ANGBASE system variable')],
        HRESULT,
        'GetOrientation',
        (['in', 'optional'], VARIANT, 'Point'),
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(c_double), 'Angle')
    ),
    COMMETHOD(
        [dispid(1610743824), helpstring('Gets the point selected in AutoCAD')],
        HRESULT,
        'GetPoint',
        (['in', 'optional'], VARIANT, 'Point'),
        (['in', 'optional'], VARIANT, 'Prompt'),
        (['out', 'retval'], POINTER(VARIANT), 'inputPoint')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Gets the point at a specified angle and distance from a given point')],
        HRESULT,
        'PolarPoint',
        (['in'], VARIANT, 'Point'),
        (['in'], c_double, 'Angle'),
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'inputPoint')
    ),
    COMMETHOD(
        [dispid(1610743826), helpstring('Creates a variant that contains an array of typed arguments')],
        HRESULT,
        'CreateTypedArray',
        (['out'], POINTER(VARIANT), 'varArr'),
        (['in'], c_int, 'Type'),
        (['in'], _midlSAFEARRAY(VARIANT), 'inArgs')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Gets an object interactively')],
        HRESULT,
        'GetEntity',
        (['out'], POINTER(POINTER(IDispatch)), 'Object'),
        (['out'], POINTER(VARIANT), 'PickedPoint'),
        (['in', 'optional'], VARIANT, 'Prompt')
    ),
    COMMETHOD(
        [dispid(1610743828), helpstring('Posts a prompt to the command line')],
        HRESULT,
        'Prompt',
        (['in'], BSTR, 'Message')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Gets an object or subentity interactively')],
        HRESULT,
        'GetSubEntity',
        (['out'], POINTER(POINTER(IDispatch)), 'Object'),
        (['out'], POINTER(VARIANT), 'PickedPoint'),
        (['out'], POINTER(VARIANT), 'transMatrix'),
        (['out'], POINTER(VARIANT), 'ContextData'),
        (['in', 'optional'], VARIANT, 'Prompt')
    ),
    COMMETHOD(
        [dispid(1610743830), helpstring('Validates a given URL')],
        HRESULT,
        'IsURL',
        (['in'], BSTR, 'URL'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsValidURL')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Downloads the file specified by a URL')],
        HRESULT,
        'GetRemoteFile',
        (['in'], BSTR, 'URL'),
        (['out'], POINTER(BSTR), 'LocalFile'),
        (['in'], VARIANT_BOOL, 'IgnoreCache')
    ),
    COMMETHOD(
        [dispid(1610743832), helpstring('Uploads a file to a remote location specified by a URL')],
        HRESULT,
        'PutRemoteFile',
        (['in'], BSTR, 'URL'),
        (['in'], BSTR, 'LocalFile')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Returns the URL that a remote file was downloaded from')],
        HRESULT,
        'IsRemoteFile',
        (['in'], BSTR, 'LocalFile'),
        (['out'], POINTER(BSTR), 'URL'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsDownloadedFile')
    ),
    COMMETHOD(
        [dispid(1610743834), helpstring('Launches the Web Browser dialog that allows the user to navigate to any URL and select a URL')],
        HRESULT,
        'LaunchBrowserDialog',
        (['out'], POINTER(BSTR), 'SelectedURL'),
        (['in'], BSTR, 'DialogTitle'),
        (['in'], BSTR, 'OpenButtonCaption'),
        (['in'], BSTR, 'StartPageURL'),
        (['in'], BSTR, 'RegistryRootKey'),
        (['in'], VARIANT_BOOL, 'OpenButtonAlwaysEnabled'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'success')
    ),
    COMMETHOD(
        [dispid(1610743835), helpstring('Indicates a modeless operation will start.')],
        HRESULT,
        'SendModelessOperationStart',
        ([], BSTR, 'Context')
    ),
    COMMETHOD(
        [dispid(1610743836), helpstring('Indicates a modeless operation has ended.')],
        HRESULT,
        'SendModelessOperationEnded',
        ([], BSTR, 'Context')
    ),
    COMMETHOD(
        [dispid(1610743837)],
        HRESULT,
        'GetObjectIdString',
        (['in'], POINTER(IDispatch), 'Object'),
        (['in'], VARIANT_BOOL, 'bHex'),
        (['out', 'retval'], POINTER(BSTR), 'ObjectIdString')
    ),
]

################################################################
# code template for IAcadUtility implementation
# class IAcadUtility_Impl(object):
#     def AngleToReal(self, Angle, Unit):
#         'Converts an angle as a string to a real (double) value'
#         #return Value
#
#     def AngleToString(self, Angle, Unit, precision):
#         'Converts an angle from a real (double) value to a string'
#         #return bstrValue
#
#     def DistanceToReal(self, Distance, Unit):
#         'Converts a distance from a string to a real (double) value'
#         #return Value
#
#     def RealToString(self, Value, Unit, precision):
#         'Converts a real (double) value to a string'
#         #return bstrValue
#
#     def TranslateCoordinates(self, Point, FromCoordSystem, ToCoordSystem, Displacement, OCSNormal):
#         'Translates a point from one coordinate system to another coordinate system'
#         #return transPt
#
#     def InitializeUserInput(self, Bits, KeyWordList):
#         'Initializes the GetKeyword method'
#         #return 
#
#     def GetInteger(self, Prompt):
#         'Gets an integer value from the user'
#         #return Value
#
#     def GetReal(self, Prompt):
#         'Gets a real (double) value from the user'
#         #return Value
#
#     def GetInput(self):
#         'Converts an input string from the user into a keyword index'
#         #return Value
#
#     def GetKeyword(self, Prompt):
#         'Gets a keyword string from the user'
#         #return bstrKeyword
#
#     def GetString(self, HasSpaces, Prompt):
#         'Gets a string from the user'
#         #return bstrValue
#
#     def GetAngle(self, Point, Prompt):
#         'Gets the angle specified. Considers the setting of the ANGBASE system variable'
#         #return Angle
#
#     def AngleFromXAxis(self, StartPoint, EndPoint):
#         'Gets the angle of a line from the X axis'
#         #return Angle
#
#     def GetCorner(self, Point, Prompt):
#         'Gets a corner of a rectangle'
#         #return corner
#
#     def GetDistance(self, Point, Prompt):
#         'Gets the distance from the prompt line or a selected set of points on the screen'
#         #return dist
#
#     def GetOrientation(self, Point, Prompt):
#         'Gets the angle specified. Ignores the setting of the ANGBASE system variable'
#         #return Angle
#
#     def GetPoint(self, Point, Prompt):
#         'Gets the point selected in AutoCAD'
#         #return inputPoint
#
#     def PolarPoint(self, Point, Angle, Distance):
#         'Gets the point at a specified angle and distance from a given point'
#         #return inputPoint
#
#     def CreateTypedArray(self, Type, inArgs):
#         'Creates a variant that contains an array of typed arguments'
#         #return varArr
#
#     def GetEntity(self, Prompt):
#         'Gets an object interactively'
#         #return Object, PickedPoint
#
#     def Prompt(self, Message):
#         'Posts a prompt to the command line'
#         #return 
#
#     def GetSubEntity(self, Prompt):
#         'Gets an object or subentity interactively'
#         #return Object, PickedPoint, transMatrix, ContextData
#
#     def IsURL(self, URL):
#         'Validates a given URL'
#         #return IsValidURL
#
#     def GetRemoteFile(self, URL, IgnoreCache):
#         'Downloads the file specified by a URL'
#         #return LocalFile
#
#     def PutRemoteFile(self, URL, LocalFile):
#         'Uploads a file to a remote location specified by a URL'
#         #return 
#
#     def IsRemoteFile(self, LocalFile):
#         'Returns the URL that a remote file was downloaded from'
#         #return URL, IsDownloadedFile
#
#     def LaunchBrowserDialog(self, DialogTitle, OpenButtonCaption, StartPageURL, RegistryRootKey, OpenButtonAlwaysEnabled):
#         'Launches the Web Browser dialog that allows the user to navigate to any URL and select a URL'
#         #return SelectedURL, success
#
#     def SendModelessOperationStart(self, Context):
#         'Indicates a modeless operation will start.'
#         #return 
#
#     def SendModelessOperationEnded(self, Context):
#         'Indicates a modeless operation has ended.'
#         #return 
#
#     def GetObjectIdString(self, Object, bHex):
#         '-no docstring-'
#         #return ObjectIdString
#
# values for enumeration 'AcShadePlot'
acShadePlotAsDisplayed = 0
acShadePlotWireframe = 1
acShadePlotHidden = 2
acShadePlotRendered = 3
AcShadePlot = c_int  # enum
# values for enumeration 'AcDimArcLengthSymbol'
acSymInFront = 0
acSymAbove = 1
acSymNone = 2
AcDimArcLengthSymbol = c_int  # enum

IAcadDimArcLength._methods_ = [
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propget'],
        HRESULT,
        'AltUnits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propput'],
        HRESULT,
        'AltUnits',
        (['in'], VARIANT_BOOL, 'bAlternate')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propget'],
        HRESULT,
        'AltUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propput'],
        HRESULT,
        'AltUnitsPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propget'],
        HRESULT,
        'AltUnitsScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propput'],
        HRESULT,
        'AltUnitsScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propget'],
        HRESULT,
        'AltRoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propput'],
        HRESULT,
        'AltRoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propget'],
        HRESULT,
        'AltTolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propput'],
        HRESULT,
        'AltTolerancePrecision',
        (['in'], AcDimPrecision, 'Distance')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propget'],
        HRESULT,
        'AltUnitsFormat',
        (['out', 'retval'], POINTER(AcDimUnits), 'Units')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propput'],
        HRESULT,
        'AltUnitsFormat',
        (['in'], AcDimUnits, 'Units')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextSuffix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propget'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Prec')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propput'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['in'], AcDimPrecision, 'Prec')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'), 'propget'],
        HRESULT,
        'DimensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'), 'propput'],
        HRESULT,
        'DimensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propget'],
        HRESULT,
        'FractionFormat',
        (['out', 'retval'], POINTER(AcDimFractionType), 'Type')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propput'],
        HRESULT,
        'FractionFormat',
        (['in'], AcDimFractionType, 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propget'],
        HRESULT,
        'HorizontalTextPosition',
        (['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propput'],
        HRESULT,
        'HorizontalTextPosition',
        (['in'], AcDimHorizontalJustification, 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propget'],
        HRESULT,
        'LinearScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propput'],
        HRESULT,
        'LinearScaleFactor',
        (['in'], ACAD_NOUNITS, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propget'],
        HRESULT,
        'UnitsFormat',
        (['out', 'retval'], POINTER(AcDimLUnits), 'format')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propput'],
        HRESULT,
        'UnitsFormat',
        (['in'], AcDimLUnits, 'format')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'lweight')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propget'],
        HRESULT,
        'RoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propput'],
        HRESULT,
        'RoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propget'],
        HRESULT,
        'DimLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propput'],
        HRESULT,
        'DimLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propget'],
        HRESULT,
        'DimLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propput'],
        HRESULT,
        'DimLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propget'],
        HRESULT,
        'DimLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propput'],
        HRESULT,
        'DimLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineOffset',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineOffset',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead1Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead1Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead2Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead2Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(c_double), 'bVal')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead1Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead1Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead2Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead2Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Specifies a point on the arc'), 'propget'],
        HRESULT,
        'ArcPoint',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Specifies a point on the arc'), 'propput'],
        HRESULT,
        'ArcPoint',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(69), helpstring('Specifies the origin of extension line 1'), 'propget'],
        HRESULT,
        'ExtLine1Point',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(69), helpstring('Specifies the origin of extension line 1'), 'propput'],
        HRESULT,
        'ExtLine1Point',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(70), helpstring('Specifies the origin of extension line 2'), 'propget'],
        HRESULT,
        'ExtLine2Point',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(70), helpstring('Specifies the origin of extension line 2'), 'propput'],
        HRESULT,
        'ExtLine2Point',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Specifies the center of the arc'), 'propget'],
        HRESULT,
        'CenterPoint',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Specifies the center of the arc'), 'propput'],
        HRESULT,
        'CenterPoint',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Specifies the origin of leader 1'), 'propget'],
        HRESULT,
        'Leader1Point',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Specifies the origin of leader 1'), 'propput'],
        HRESULT,
        'Leader1Point',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(73), helpstring('Specifies the origin of leader 2'), 'propget'],
        HRESULT,
        'Leader2Point',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(73), helpstring('Specifies the origin of leader 2'), 'propput'],
        HRESULT,
        'Leader2Point',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(74), helpstring('Specifies whether the dimension is for a partial arc'), 'propget'],
        HRESULT,
        'IsPartial',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(74), helpstring('Specifies whether the dimension is for a partial arc'), 'propput'],
        HRESULT,
        'IsPartial',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(75), helpstring('Specifies the start parameter of the arc'), 'propget'],
        HRESULT,
        'ArcStartParam',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(75), helpstring('Specifies the start parameter of the arc'), 'propput'],
        HRESULT,
        'ArcStartParam',
        (['in'], c_double, 'pVal')
    ),
    COMMETHOD(
        [dispid(76), helpstring('Specifies the end parameter of the arc'), 'propget'],
        HRESULT,
        'ArcEndParam',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(76), helpstring('Specifies the end parameter of the arc'), 'propput'],
        HRESULT,
        'ArcEndParam',
        (['in'], c_double, 'pVal')
    ),
    COMMETHOD(
        [dispid(77), helpstring('Specifies the whether the dimension has leader'), 'propget'],
        HRESULT,
        'HasLeader',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(77), helpstring('Specifies the whether the dimension has leader'), 'propput'],
        HRESULT,
        'HasLeader',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(67), helpstring('Specifies placement of the arc length dimension symbol (DIMARCSYM system variable)'), 'propget'],
        HRESULT,
        'SymbolPosition',
        (['out', 'retval'], POINTER(AcDimArcLengthSymbol), 'Position')
    ),
    COMMETHOD(
        [dispid(67), helpstring('Specifies placement of the arc length dimension symbol (DIMARCSYM system variable)'), 'propput'],
        HRESULT,
        'SymbolPosition',
        (['in'], AcDimArcLengthSymbol, 'Position')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['in'], VARIANT_BOOL, 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLen',
        (['out', 'retval'], POINTER(c_double), 'FixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLen',
        (['in'], c_double, 'FixedLen')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propget'],
        HRESULT,
        'SubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propput'],
        HRESULT,
        'SubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'SubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'SubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propget'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propput'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'AltSubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'AltSubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
]

################################################################
# code template for IAcadDimArcLength implementation
# class IAcadDimArcLength_Impl(object):
#     def _get(self):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#         #return bAlternate
#     def _set(self, bAlternate):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#     AltUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#     AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#     AltUnitsScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#     AltRoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#     AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#         #return Units
#     def _set(self, Units):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#     AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#     ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#         #return Prec
#     def _set(self, Prec):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#     PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'
#     DimensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#     ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fraction type (DIMFRAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Sets fraction type (DIMFRAC system variable)'
#     FractionFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#     HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#     LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#     UnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#         #return lweight
#     def _set(self, lweight):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#     ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value (DIMRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value (DIMRND system variable)'
#     RoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#     DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#     DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#     ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#     ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#     DimLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#     ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#     Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#     Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#     Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#     Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies a point on the arc'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies a point on the arc'
#     ArcPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin of extension line 1'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the origin of extension line 1'
#     ExtLine1Point = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin of extension line 2'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the origin of extension line 2'
#     ExtLine2Point = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the center of the arc'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the center of the arc'
#     CenterPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin of leader 1'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the origin of leader 1'
#     Leader1Point = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin of leader 2'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the origin of leader 2'
#     Leader2Point = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether the dimension is for a partial arc'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies whether the dimension is for a partial arc'
#     IsPartial = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the start parameter of the arc'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the start parameter of the arc'
#     ArcStartParam = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the end parameter of the arc'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the end parameter of the arc'
#     ArcEndParam = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the whether the dimension has leader'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the whether the dimension has leader'
#     HasLeader = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies placement of the arc length dimension symbol (DIMARCSYM system variable)'
#         #return Position
#     def _set(self, Position):
#         'Specifies placement of the arc length dimension symbol (DIMARCSYM system variable)'
#     SymbolPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#     ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#     ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#         #return bFixedLen
#     def _set(self, bFixedLen):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#     ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Set extension line fixed length (DIMFXL system variable)'
#         #return FixedLen
#     def _set(self, FixedLen):
#         'Set extension line fixed length (DIMFXL system variable)'
#     ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#     SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#     SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#     AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#     AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#

IAcadHyperlink._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the URL for the Hyperlink object'), 'propput'],
        HRESULT,
        'URL',
        (['in'], BSTR, 'URLPath')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the URL for the Hyperlink object'), 'propget'],
        HRESULT,
        'URL',
        (['out', 'retval'], POINTER(BSTR), 'URLPath')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the URL description for the Hyperlink object'), 'propput'],
        HRESULT,
        'URLDescription',
        (['in'], BSTR, 'Description')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the URL description for the Hyperlink object'), 'propget'],
        HRESULT,
        'URLDescription',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Deletes a specified object')],
        HRESULT,
        'Delete',
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the named location for the Hyperlink object'), 'propput'],
        HRESULT,
        'URLNamedLocation',
        (['in'], BSTR, 'Location')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the named location for the Hyperlink object'), 'propget'],
        HRESULT,
        'URLNamedLocation',
        (['out', 'retval'], POINTER(BSTR), 'Location')
    ),
]

################################################################
# code template for IAcadHyperlink implementation
# class IAcadHyperlink_Impl(object):
#     def _get(self):
#         'Specifies the URL for the Hyperlink object'
#         #return URLPath
#     def _set(self, URLPath):
#         'Specifies the URL for the Hyperlink object'
#     URL = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the URL description for the Hyperlink object'
#         #return Description
#     def _set(self, Description):
#         'Specifies the URL description for the Hyperlink object'
#     URLDescription = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return ApplicationObject
#
#     def Delete(self):
#         'Deletes a specified object'
#         #return 
#
#     def _get(self):
#         'Specifies the named location for the Hyperlink object'
#         #return Location
#     def _set(self, Location):
#         'Specifies the named location for the Hyperlink object'
#     URLNamedLocation = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcPlotRotation'
ac0degrees = 0
ac90degrees = 1
ac180degrees = 2
ac270degrees = 3
AcPlotRotation = c_int  # enum


class AcadHelix(CoClass):
    """AutoCAD Helix Object"""
    _reg_clsid_ = GUID('{CE19F9C3-6987-4FA7-91FC-C1D7A9B9040C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadHelix._com_interfaces_ = [IAcadHelix]
AcadHelix._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadPlaneSurface(IAcadSurface):
    """IAcadPlaneSurface Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{D7E669B3-B7F6-4F09-8AC8-0C2F6BFE9E39}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPlaneSurface._methods_ = [
]

################################################################
# code template for IAcadPlaneSurface implementation
# class IAcadPlaneSurface_Impl(object):

IAcadDimOrdinate._methods_ = [
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propget'],
        HRESULT,
        'AltUnits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propput'],
        HRESULT,
        'AltUnits',
        (['in'], VARIANT_BOOL, 'bAlternate')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propget'],
        HRESULT,
        'AltUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propput'],
        HRESULT,
        'AltUnitsPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propget'],
        HRESULT,
        'AltUnitsScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propput'],
        HRESULT,
        'AltUnitsScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propget'],
        HRESULT,
        'AltRoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propput'],
        HRESULT,
        'AltRoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propget'],
        HRESULT,
        'AltTolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propput'],
        HRESULT,
        'AltTolerancePrecision',
        (['in'], AcDimPrecision, 'Distance')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propget'],
        HRESULT,
        'AltUnitsFormat',
        (['out', 'retval'], POINTER(AcDimUnits), 'Units')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propput'],
        HRESULT,
        'AltUnitsFormat',
        (['in'], AcDimUnits, 'Units')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextSuffix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propget'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Prec')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propput'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['in'], AcDimPrecision, 'Prec')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propget'],
        HRESULT,
        'FractionFormat',
        (['out', 'retval'], POINTER(AcDimFractionType), 'Type')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propput'],
        HRESULT,
        'FractionFormat',
        (['in'], AcDimFractionType, 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propget'],
        HRESULT,
        'LinearScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propput'],
        HRESULT,
        'LinearScaleFactor',
        (['in'], ACAD_NOUNITS, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propget'],
        HRESULT,
        'UnitsFormat',
        (['out', 'retval'], POINTER(AcDimLUnits), 'format')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propput'],
        HRESULT,
        'UnitsFormat',
        (['in'], AcDimLUnits, 'format')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'lweight')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propget'],
        HRESULT,
        'RoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propput'],
        HRESULT,
        'RoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineOffset',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineOffset',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(c_double), 'bVal')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['in'], VARIANT_BOOL, 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLen',
        (['out', 'retval'], POINTER(c_double), 'FixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLen',
        (['in'], c_double, 'FixedLen')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propget'],
        HRESULT,
        'SubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propput'],
        HRESULT,
        'SubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'SubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'SubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propget'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propput'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'AltSubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'AltSubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
]

################################################################
# code template for IAcadDimOrdinate implementation
# class IAcadDimOrdinate_Impl(object):
#     def _get(self):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#         #return bAlternate
#     def _set(self, bAlternate):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#     AltUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#     AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#     AltUnitsScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#     AltRoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#     AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#         #return Units
#     def _set(self, Units):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#     AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#     ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#         #return Prec
#     def _set(self, Prec):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#     PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fraction type (DIMFRAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Sets fraction type (DIMFRAC system variable)'
#     FractionFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#     LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#     UnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#         #return lweight
#     def _set(self, lweight):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#     ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value (DIMRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value (DIMRND system variable)'
#     RoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#     ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#         #return bFixedLen
#     def _set(self, bFixedLen):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#     ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Set extension line fixed length (DIMFXL system variable)'
#         #return FixedLen
#     def _set(self, FixedLen):
#         'Set extension line fixed length (DIMFXL system variable)'
#     ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#     SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#     SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#     AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#     AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#

IAcadDimAligned._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the origin of extension line 1'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine1Point',
        (['out', 'retval'], POINTER(VARIANT), 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the origin of extension line 1'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine1Point',
        (['in'], VARIANT, 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the origin of extension line 1'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine2Point',
        (['out', 'retval'], POINTER(VARIANT), 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the origin of extension line 1'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine2Point',
        (['in'], VARIANT, 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets alternate units dimensioning On or Off (DIMALT system variable)'), 'propget'],
        HRESULT,
        'AltUnits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets alternate units dimensioning On or Off (DIMALT system variable)'), 'propput'],
        HRESULT,
        'AltUnits',
        (['in'], VARIANT_BOOL, 'bAlternate')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propget'],
        HRESULT,
        'AltUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propput'],
        HRESULT,
        'AltUnitsPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propget'],
        HRESULT,
        'AltUnitsScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propput'],
        HRESULT,
        'AltUnitsScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propget'],
        HRESULT,
        'AltRoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propput'],
        HRESULT,
        'AltRoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propget'],
        HRESULT,
        'AltTolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propput'],
        HRESULT,
        'AltTolerancePrecision',
        (['in'], AcDimPrecision, 'Distance')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propget'],
        HRESULT,
        'AltUnitsFormat',
        (['out', 'retval'], POINTER(AcDimUnits), 'Units')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propput'],
        HRESULT,
        'AltUnitsFormat',
        (['in'], AcDimUnits, 'Units')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'color')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'color')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'color')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineColor',
        (['in'], ACAD_COLOR, 'color')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propget'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Prec')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propput'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['in'], AcDimPrecision, 'Prec')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'), 'propget'],
        HRESULT,
        'DimensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'), 'propput'],
        HRESULT,
        'DimensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend the extension line beyond the dimension line (DIMEXE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend the extension line beyond the dimension line (DIMEXE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propget'],
        HRESULT,
        'FractionFormat',
        (['out', 'retval'], POINTER(AcDimFractionType), 'Type')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propput'],
        HRESULT,
        'FractionFormat',
        (['in'], AcDimFractionType, 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propget'],
        HRESULT,
        'HorizontalTextPosition',
        (['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propput'],
        HRESULT,
        'HorizontalTextPosition',
        (['in'], AcDimHorizontalJustification, 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propget'],
        HRESULT,
        'LinearScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propput'],
        HRESULT,
        'LinearScaleFactor',
        (['in'], ACAD_NOUNITS, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propget'],
        HRESULT,
        'UnitsFormat',
        (['out', 'retval'], POINTER(AcDimLUnits), 'format')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propput'],
        HRESULT,
        'UnitsFormat',
        (['in'], AcDimLUnits, 'format')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'lweight')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propget'],
        HRESULT,
        'RoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propput'],
        HRESULT,
        'RoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of the first dimension line On or Off (DIMSD1 system variable)'), 'propget'],
        HRESULT,
        'DimLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of the first dimension line On or Off (DIMSD1 system variable)'), 'propput'],
        HRESULT,
        'DimLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of the second dimension line On or Off (DIMSD2 system variable)'), 'propget'],
        HRESULT,
        'DimLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of the second dimension line On or Off (DIMSD2 system variable)'), 'propput'],
        HRESULT,
        'DimLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of the first extension line On or Off (DIMSE1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of the first extension line On or Off (DIMSE1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of the second extension line On or Off (DIMSE2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of the second extension line On or Off (DIMSE2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propget'],
        HRESULT,
        'DimLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propput'],
        HRESULT,
        'DimLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside the extension lines On or Off (DIMTXT system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside the extension lines On or Off (DIMTXT system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing a dimension line between extension lines even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing a dimension line between extension lines even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineOffset',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineOffset',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies the lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies the lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies the size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies the size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies the type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead1Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies the type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead1Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies the type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead2Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies the type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead2Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(c_double), 'bVal')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead1Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead1Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead2Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead2Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['in'], VARIANT_BOOL, 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLen',
        (['out', 'retval'], POINTER(c_double), 'FixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLen',
        (['in'], c_double, 'FixedLen')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propget'],
        HRESULT,
        'DimConstrForm',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propput'],
        HRESULT,
        'DimConstrForm',
        (['in'], VARIANT_BOOL, 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propget'],
        HRESULT,
        'DimConstrReference',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propput'],
        HRESULT,
        'DimConstrReference',
        (['in'], VARIANT_BOOL, 'bIsReference')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propget'],
        HRESULT,
        'DimConstrName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propput'],
        HRESULT,
        'DimConstrName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrExpression',
        (['out', 'retval'], POINTER(BSTR), 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrExpression',
        (['in'], BSTR, 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrValue',
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrValue',
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propget'],
        HRESULT,
        'DimConstrDesc',
        (['out', 'retval'], POINTER(BSTR), 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propput'],
        HRESULT,
        'DimConstrDesc',
        (['in'], BSTR, 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propget'],
        HRESULT,
        'SubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1574), helpstring('Specifies the text suffix for all applicable linear dimension when change to sub-units'), 'propput'],
        HRESULT,
        'SubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'SubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1575), helpstring('Specifies the sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'SubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propget'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['out', 'retval'], POINTER(BSTR), 'suffix')
    ),
    COMMETHOD(
        [dispid(1576), helpstring('Specifies the text suffix for the alternate dimension when change to alternate sub-units'), 'propput'],
        HRESULT,
        'AltSubUnitsSuffix',
        (['in'], BSTR, 'suffix')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propget'],
        HRESULT,
        'AltSubUnitsFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(1577), helpstring('Specifies the alternate sub-units scale factor for all applicable linear dimension'), 'propput'],
        HRESULT,
        'AltSubUnitsFactor',
        (['in'], c_double, 'factor')
    ),
]

################################################################
# code template for IAcadDimAligned implementation
# class IAcadDimAligned_Impl(object):
#     def _get(self):
#         'Specifies the origin of extension line 1'
#         #return xLine1Point
#     def _set(self, xLine1Point):
#         'Specifies the origin of extension line 1'
#     ExtLine1Point = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin of extension line 1'
#         #return xLine2Point
#     def _set(self, xLine2Point):
#         'Specifies the origin of extension line 1'
#     ExtLine2Point = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets alternate units dimensioning On or Off (DIMALT system variable)'
#         #return bAlternate
#     def _set(self, bAlternate):
#         'Sets alternate units dimensioning On or Off (DIMALT system variable)'
#     AltUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#     AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#     AltUnitsScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#     AltRoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#     AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#         #return Units
#     def _set(self, Units):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#     AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#         #return color
#     def _set(self, color):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#         #return color
#     def _set(self, color):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#     ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#         #return Prec
#     def _set(self, Prec):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#     PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend dimension lines beyond the extension line (DIMDLE system variable)'
#     DimensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend the extension line beyond the dimension line (DIMEXE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend the extension line beyond the dimension line (DIMEXE system variable)'
#     ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fraction type (DIMFRAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Sets fraction type (DIMFRAC system variable)'
#     FractionFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#     HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#     LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#     UnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#         #return lweight
#     def _set(self, lweight):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#     ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value (DIMRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value (DIMRND system variable)'
#     RoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of the first dimension line On or Off (DIMSD1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of the first dimension line On or Off (DIMSD1 system variable)'
#     DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of the second dimension line On or Off (DIMSD2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of the second dimension line On or Off (DIMSD2 system variable)'
#     DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of the first extension line On or Off (DIMSE1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of the first extension line On or Off (DIMSE1 system variable)'
#     ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of the second extension line On or Off (DIMSE2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of the second extension line On or Off (DIMSE2 system variable)'
#     ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#     DimLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside the extension lines On or Off (DIMTXT system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside the extension lines On or Off (DIMTXT system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing a dimension line between extension lines even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing a dimension line between extension lines even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#     ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTTZ system variable)'
#     AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies the lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies the size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of the first dimension arrowhead (DIMBLK1 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies the type of the first dimension arrowhead (DIMBLK1 system variable)'
#     Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of the second dimension arrowhead (DIMBLK2 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies the type of the second dimension arrowhead (DIMBLK2 system variable)'
#     Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#     Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#     Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#     ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#     ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#         #return bFixedLen
#     def _set(self, bFixedLen):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#     ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Set extension line fixed length (DIMFXL system variable)'
#         #return FixedLen
#     def _set(self, FixedLen):
#         'Set extension line fixed length (DIMFXL system variable)'
#     ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the constraint type - Dynamic or Annotational'
#         #return bIsDynamic
#     def _set(self, bIsDynamic):
#         'Specifies the constraint type - Dynamic or Annotational'
#     DimConstrForm = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#         #return bIsReference
#     def _set(self, bIsReference):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#     DimConstrReference = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#     DimConstrName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the expression or the value of the constraint'
#         #return bstrExpression
#     def _set(self, bstrExpression):
#         'Specifies the expression or the value of the constraint'
#     DimConstrExpression = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the value of the constraint'
#         #return Value
#     def _set(self, Value):
#         'Specifies the value of the constraint'
#     DimConstrValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies description for constraint'
#         #return bstrDescription
#     def _set(self, bstrDescription):
#         'Specifies description for constraint'
#     DimConstrDesc = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for all applicable linear dimension when change to sub-units'
#     SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the sub-units scale factor for all applicable linear dimension'
#     SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#         #return suffix
#     def _set(self, suffix):
#         'Specifies the text suffix for the alternate dimension when change to alternate sub-units'
#     AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#         #return factor
#     def _set(self, factor):
#         'Specifies the alternate sub-units scale factor for all applicable linear dimension'
#     AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcPlotType'
acDisplay = 0
acExtents = 1
acLimits = 2
acView = 3
acWindow = 4
acLayout = 5
AcPlotType = c_int  # enum


class IAcadPreferencesOpenSave(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the Open and Save tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{D2E64B8C-E8C7-4453-8EC8-6B03E275309C}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPreferencesOpenSave._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies if BMP preview images are saved with the drawing'), 'propput'],
        HRESULT,
        'SavePreviewThumbnail',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies if BMP preview images are saved with the drawing'), 'propget'],
        HRESULT,
        'SavePreviewThumbnail',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies the percentage of wasted space allowed in a drawing file'), 'propput'],
        HRESULT,
        'IncrementalSavePercent',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies the percentage of wasted space allowed in a drawing file'), 'propget'],
        HRESULT,
        'IncrementalSavePercent',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies an automatic save interval in minutes'), 'propput'],
        HRESULT,
        'AutoSaveInterval',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies an automatic save interval in minutes'), 'propget'],
        HRESULT,
        'AutoSaveInterval',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Specifies the use of a backup file'), 'propput'],
        HRESULT,
        'CreateBackup',
        (['in'], VARIANT_BOOL, 'CreateBackup')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Specifies the use of a backup file'), 'propget'],
        HRESULT,
        'CreateBackup',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'CreateBackup')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies if a cyclic redundancy check (CRC) should be performed each time an object is read into the drawing'), 'propput'],
        HRESULT,
        'FullCRCValidation',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies if a cyclic redundancy check (CRC) should be performed each time an object is read into the drawing'), 'propget'],
        HRESULT,
        'FullCRCValidation',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies if the contents of the text window are written to a log file'), 'propput'],
        HRESULT,
        'LogFileOn',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies if the contents of the text window are written to a log file'), 'propget'],
        HRESULT,
        'LogFileOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the extension for temporary files'), 'propput'],
        HRESULT,
        'TempFileExtension',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the extension for temporary files'), 'propget'],
        HRESULT,
        'TempFileExtension',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies demand loading of external references'), 'propput'],
        HRESULT,
        'XrefDemandLoad',
        (['in'], AcXRefDemandLoad, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies demand loading of external references'), 'propget'],
        HRESULT,
        'XrefDemandLoad',
        (['out', 'retval'], POINTER(AcXRefDemandLoad), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies if and when AutoCAD demand loads a third-party application if a drawing contains custom objects created in that application'), 'propput'],
        HRESULT,
        'DemandLoadARXApp',
        (['in'], AcARXDemandLoad, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies if and when AutoCAD demand loads a third-party application if a drawing contains custom objects created in that application'), 'propget'],
        HRESULT,
        'DemandLoadARXApp',
        (['out', 'retval'], POINTER(AcARXDemandLoad), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Controls the display of objects in a drawing that were created in a third-party application'), 'propput'],
        HRESULT,
        'ProxyImage',
        (['in'], AcProxyImage, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Controls the display of objects in a drawing that were created in a third-party application'), 'propget'],
        HRESULT,
        'ProxyImage',
        (['out', 'retval'], POINTER(AcProxyImage), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies if AutoCAD displays a warning message when you open a drawing that contains custom objects'), 'propput'],
        HRESULT,
        'ShowProxyDialogBox',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies if AutoCAD displays a warning message when you open a drawing that contains custom objects'), 'propget'],
        HRESULT,
        'ShowProxyDialogBox',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Specifies if AutoCAD should perform an audit after you render a DXFIN or DXBIN interchange command'), 'propput'],
        HRESULT,
        'AutoAudit',
        (['in'], VARIANT_BOOL, 'bAudit')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Specifies if AutoCAD should perform an audit after you render a DXFIN or DXBIN interchange command'), 'propget'],
        HRESULT,
        'AutoAudit',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAudit')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Specifies the drawing type to save the drawing as'), 'propput'],
        HRESULT,
        'SaveAsType',
        (['in'], AcSaveAsType, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Specifies the drawing type to save the drawing as'), 'propget'],
        HRESULT,
        'SaveAsType',
        (['out', 'retval'], POINTER(AcSaveAsType), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743835), helpstring('Specifies the number of most recently used files that appear in the File menu'), 'propget'],
        HRESULT,
        'MRUNumber',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
]

################################################################
# code template for IAcadPreferencesOpenSave implementation
# class IAcadPreferencesOpenSave_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Specifies if BMP preview images are saved with the drawing'
#         #return Path
#     def _set(self, Path):
#         'Specifies if BMP preview images are saved with the drawing'
#     SavePreviewThumbnail = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the percentage of wasted space allowed in a drawing file'
#         #return Path
#     def _set(self, Path):
#         'Specifies the percentage of wasted space allowed in a drawing file'
#     IncrementalSavePercent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies an automatic save interval in minutes'
#         #return Path
#     def _set(self, Path):
#         'Specifies an automatic save interval in minutes'
#     AutoSaveInterval = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the use of a backup file'
#         #return CreateBackup
#     def _set(self, CreateBackup):
#         'Specifies the use of a backup file'
#     CreateBackup = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if a cyclic redundancy check (CRC) should be performed each time an object is read into the drawing'
#         #return Path
#     def _set(self, Path):
#         'Specifies if a cyclic redundancy check (CRC) should be performed each time an object is read into the drawing'
#     FullCRCValidation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the contents of the text window are written to a log file'
#         #return Path
#     def _set(self, Path):
#         'Specifies if the contents of the text window are written to a log file'
#     LogFileOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the extension for temporary files'
#         #return Path
#     def _set(self, Path):
#         'Specifies the extension for temporary files'
#     TempFileExtension = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies demand loading of external references'
#         #return Path
#     def _set(self, Path):
#         'Specifies demand loading of external references'
#     XrefDemandLoad = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if and when AutoCAD demand loads a third-party application if a drawing contains custom objects created in that application'
#         #return Path
#     def _set(self, Path):
#         'Specifies if and when AutoCAD demand loads a third-party application if a drawing contains custom objects created in that application'
#     DemandLoadARXApp = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the display of objects in a drawing that were created in a third-party application'
#         #return Path
#     def _set(self, Path):
#         'Controls the display of objects in a drawing that were created in a third-party application'
#     ProxyImage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if AutoCAD displays a warning message when you open a drawing that contains custom objects'
#         #return Path
#     def _set(self, Path):
#         'Specifies if AutoCAD displays a warning message when you open a drawing that contains custom objects'
#     ShowProxyDialogBox = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if AutoCAD should perform an audit after you render a DXFIN or DXBIN interchange command'
#         #return bAudit
#     def _set(self, bAudit):
#         'Specifies if AutoCAD should perform an audit after you render a DXFIN or DXBIN interchange command'
#     AutoAudit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the drawing type to save the drawing as'
#         #return Path
#     def _set(self, Path):
#         'Specifies the drawing type to save the drawing as'
#     SaveAsType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MRUNumber(self):
#         'Specifies the number of most recently used files that appear in the File menu'
#         #return Path
#
# values for enumeration 'AcGradientPatternType'
acPreDefinedGradient = 0
acUserDefinedGradient = 1
AcGradientPatternType = c_int  # enum

IAcadTextStyles._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadTextStyle)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadTextStyle)), 'pTextStyle')
    ),
]

################################################################
# code template for IAcadTextStyles implementation
# class IAcadTextStyles_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pTextStyle
#


class IAcadPreferencesDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the Display tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{0B1F1007-6232-4774-9989-5F4EC003AC4F}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPreferencesDisplay._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Toggles the display of margins in layouts'), 'propput'],
        HRESULT,
        'LayoutDisplayMargins',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Toggles the display of margins in layouts'), 'propget'],
        HRESULT,
        'LayoutDisplayMargins',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Toggles the display of the paper background in layouts'), 'propput'],
        HRESULT,
        'LayoutDisplayPaper',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Toggles the display of the paper background in layouts'), 'propget'],
        HRESULT,
        'LayoutDisplayPaper',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Toggles the display of the paper background shadow in layouts'), 'propput'],
        HRESULT,
        'LayoutDisplayPaperShadow',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Toggles the display of the paper background shadow in layouts'), 'propget'],
        HRESULT,
        'LayoutDisplayPaperShadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Toggles the display of the Plot Setup dialog when a new layout is created'), 'propput'],
        HRESULT,
        'LayoutShowPlotSetup',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Toggles the display of the Plot Setup dialog when a new layout is created'), 'propget'],
        HRESULT,
        'LayoutShowPlotSetup',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Toggles the automatic creation of a viewport for new layouts'), 'propput'],
        HRESULT,
        'LayoutCreateViewport',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Toggles the automatic creation of a viewport for new layouts'), 'propget'],
        HRESULT,
        'LayoutCreateViewport',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies whether to display scroll bars at the bottom and right sides of the drawing window'), 'propput'],
        HRESULT,
        'DisplayScrollBars',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies whether to display scroll bars at the bottom and right sides of the drawing window'), 'propget'],
        HRESULT,
        'DisplayScrollBars',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies whether to display the screen menu on the right side of the drawing window'), 'propput'],
        HRESULT,
        'DisplayScreenMenu',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies whether to display the screen menu on the right side of the drawing window'), 'propget'],
        HRESULT,
        'DisplayScreenMenu',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies the crosshairs size as a percentage of the screen size'), 'propput'],
        HRESULT,
        'CursorSize',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies the crosshairs size as a percentage of the screen size'), 'propget'],
        HRESULT,
        'CursorSize',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the number of lines of text to display in the command window'), 'propput'],
        HRESULT,
        'DockedVisibleLines',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the number of lines of text to display in the command window'), 'propget'],
        HRESULT,
        'DockedVisibleLines',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Controls the display of raster images during real time pan and zooms'), 'propput'],
        HRESULT,
        'ShowRasterImage',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Controls the display of raster images during real time pan and zooms'), 'propget'],
        HRESULT,
        'ShowRasterImage',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies the background color for the model space window'), 'propput'],
        HRESULT,
        'GraphicsWinModelBackgrndColor',
        (
            ['in'],
            comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR,
            'color',
        )
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies the background color for the model space window'), 'propget'],
        HRESULT,
        'GraphicsWinModelBackgrndColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR),
            'color',
        )
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Specifies the color of the crosshairs and text for model space'), 'propput'],
        HRESULT,
        'ModelCrosshairColor',
        (
            ['in'],
            comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR,
            'crossHairColor',
        )
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Specifies the color of the crosshairs and text for model space'), 'propget'],
        HRESULT,
        'ModelCrosshairColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR),
            'crossHairColor',
        )
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Specifies the background color for the paper space layouts'), 'propput'],
        HRESULT,
        'GraphicsWinLayoutBackgrndColor',
        (
            ['in'],
            comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR,
            'color',
        )
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Specifies the background color for the paper space layouts'), 'propget'],
        HRESULT,
        'GraphicsWinLayoutBackgrndColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR),
            'color',
        )
    ),
    COMMETHOD(
        [dispid(1610743835), helpstring('Specifies the background color for the text window'), 'propput'],
        HRESULT,
        'TextWinBackgrndColor',
        (
            ['in'],
            comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR,
            'Path',
        )
    ),
    COMMETHOD(
        [dispid(1610743835), helpstring('Specifies the background color for the text window'), 'propget'],
        HRESULT,
        'TextWinBackgrndColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR),
            'Path',
        )
    ),
    COMMETHOD(
        [dispid(1610743837), helpstring('Specifies the text color for the text window'), 'propput'],
        HRESULT,
        'TextWinTextColor',
        (
            ['in'],
            comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR,
            'Path',
        )
    ),
    COMMETHOD(
        [dispid(1610743837), helpstring('Specifies the text color for the text window'), 'propget'],
        HRESULT,
        'TextWinTextColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR),
            'Path',
        )
    ),
    COMMETHOD(
        [dispid(1610743839), helpstring('Specifies the color of the crosshairs and text for paper space layouts'), 'propput'],
        HRESULT,
        'LayoutCrosshairColor',
        (
            ['in'],
            comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR,
            'crossHairColor',
        )
    ),
    COMMETHOD(
        [dispid(1610743839), helpstring('Specifies the color of the crosshairs and text for paper space layouts'), 'propget'],
        HRESULT,
        'LayoutCrosshairColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR),
            'crossHairColor',
        )
    ),
    COMMETHOD(
        [dispid(1610743841), helpstring('Specifies the color of the auto tracking vector'), 'propput'],
        HRESULT,
        'AutoTrackingVecColor',
        (
            ['in'],
            comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR,
            'AutoTrackingVecColor',
        )
    ),
    COMMETHOD(
        [dispid(1610743841), helpstring('Specifies the color of the auto tracking vector'), 'propget'],
        HRESULT,
        'AutoTrackingVecColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR),
            'AutoTrackingVecColor',
        )
    ),
    COMMETHOD(
        [dispid(1610743843), helpstring('Specifies the font for new text'), 'propput'],
        HRESULT,
        'TextFont',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743843), helpstring('Specifies the font for new text'), 'propget'],
        HRESULT,
        'TextFont',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743845), helpstring('Specifies the font style for new text'), 'propput'],
        HRESULT,
        'TextFontStyle',
        (['in'], AcTextFontStyle, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743845), helpstring('Specifies the font style for new text'), 'propget'],
        HRESULT,
        'TextFontStyle',
        (['out', 'retval'], POINTER(AcTextFontStyle), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743847), helpstring('Specifies the font size for new text'), 'propput'],
        HRESULT,
        'TextFontSize',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743847), helpstring('Specifies the font size for new text'), 'propget'],
        HRESULT,
        'TextFontSize',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743849), helpstring('Specifies the number of lines of text in the text window to keep in memory'), 'propput'],
        HRESULT,
        'HistoryLines',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743849), helpstring('Specifies the number of lines of text in the text window to keep in memory'), 'propget'],
        HRESULT,
        'HistoryLines',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743851), helpstring('Specifies if AutoCAD should fill the entire screen area when you start'), 'propput'],
        HRESULT,
        'MaxAutoCADWindow',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743851), helpstring('Specifies if AutoCAD should fill the entire screen area when you start'), 'propget'],
        HRESULT,
        'MaxAutoCADWindow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743853), helpstring('Specifies whether to display the Model and Layout tabs in the drawing editor'), 'propput'],
        HRESULT,
        'DisplayLayoutTabs',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743853), helpstring('Specifies whether to display the Model and Layout tabs in the drawing editor'), 'propget'],
        HRESULT,
        'DisplayLayoutTabs',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743855), helpstring('Controls the display of raster images during selection'), 'propput'],
        HRESULT,
        'ImageFrameHighlight',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743855), helpstring('Controls the display of raster images during selection'), 'propget'],
        HRESULT,
        'ImageFrameHighlight',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743857), helpstring('Determines if raster and render images are displayed at true color or palletized color'), 'propput'],
        HRESULT,
        'TrueColorImages',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743857), helpstring('Determines if raster and render images are displayed at true color or palletized color'), 'propget'],
        HRESULT,
        'TrueColorImages',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743859), helpstring('Controls the dimming intensity for XRefs'), 'propput'],
        HRESULT,
        'XRefFadeIntensity',
        (['in'], c_int, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743859), helpstring('Controls the dimming intensity for XRefs'), 'propget'],
        HRESULT,
        'XRefFadeIntensity',
        (['out', 'retval'], POINTER(c_int), 'Path')
    ),
]

################################################################
# code template for IAcadPreferencesDisplay implementation
# class IAcadPreferencesDisplay_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Toggles the display of margins in layouts'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of margins in layouts'
#     LayoutDisplayMargins = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of the paper background in layouts'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of the paper background in layouts'
#     LayoutDisplayPaper = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of the paper background shadow in layouts'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of the paper background shadow in layouts'
#     LayoutDisplayPaperShadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the display of the Plot Setup dialog when a new layout is created'
#         #return Path
#     def _set(self, Path):
#         'Toggles the display of the Plot Setup dialog when a new layout is created'
#     LayoutShowPlotSetup = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles the automatic creation of a viewport for new layouts'
#         #return Path
#     def _set(self, Path):
#         'Toggles the automatic creation of a viewport for new layouts'
#     LayoutCreateViewport = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether to display scroll bars at the bottom and right sides of the drawing window'
#         #return Path
#     def _set(self, Path):
#         'Specifies whether to display scroll bars at the bottom and right sides of the drawing window'
#     DisplayScrollBars = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether to display the screen menu on the right side of the drawing window'
#         #return Path
#     def _set(self, Path):
#         'Specifies whether to display the screen menu on the right side of the drawing window'
#     DisplayScreenMenu = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the crosshairs size as a percentage of the screen size'
#         #return Path
#     def _set(self, Path):
#         'Specifies the crosshairs size as a percentage of the screen size'
#     CursorSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the number of lines of text to display in the command window'
#         #return Path
#     def _set(self, Path):
#         'Specifies the number of lines of text to display in the command window'
#     DockedVisibleLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the display of raster images during real time pan and zooms'
#         #return Path
#     def _set(self, Path):
#         'Controls the display of raster images during real time pan and zooms'
#     ShowRasterImage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the background color for the model space window'
#         #return color
#     def _set(self, color):
#         'Specifies the background color for the model space window'
#     GraphicsWinModelBackgrndColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the crosshairs and text for model space'
#         #return crossHairColor
#     def _set(self, crossHairColor):
#         'Specifies the color of the crosshairs and text for model space'
#     ModelCrosshairColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the background color for the paper space layouts'
#         #return color
#     def _set(self, color):
#         'Specifies the background color for the paper space layouts'
#     GraphicsWinLayoutBackgrndColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the background color for the text window'
#         #return Path
#     def _set(self, Path):
#         'Specifies the background color for the text window'
#     TextWinBackgrndColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text color for the text window'
#         #return Path
#     def _set(self, Path):
#         'Specifies the text color for the text window'
#     TextWinTextColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the crosshairs and text for paper space layouts'
#         #return crossHairColor
#     def _set(self, crossHairColor):
#         'Specifies the color of the crosshairs and text for paper space layouts'
#     LayoutCrosshairColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the auto tracking vector'
#         #return AutoTrackingVecColor
#     def _set(self, AutoTrackingVecColor):
#         'Specifies the color of the auto tracking vector'
#     AutoTrackingVecColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the font for new text'
#         #return Path
#     def _set(self, Path):
#         'Specifies the font for new text'
#     TextFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the font style for new text'
#         #return Path
#     def _set(self, Path):
#         'Specifies the font style for new text'
#     TextFontStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the font size for new text'
#         #return Path
#     def _set(self, Path):
#         'Specifies the font size for new text'
#     TextFontSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the number of lines of text in the text window to keep in memory'
#         #return Path
#     def _set(self, Path):
#         'Specifies the number of lines of text in the text window to keep in memory'
#     HistoryLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if AutoCAD should fill the entire screen area when you start'
#         #return Path
#     def _set(self, Path):
#         'Specifies if AutoCAD should fill the entire screen area when you start'
#     MaxAutoCADWindow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether to display the Model and Layout tabs in the drawing editor'
#         #return Path
#     def _set(self, Path):
#         'Specifies whether to display the Model and Layout tabs in the drawing editor'
#     DisplayLayoutTabs = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the display of raster images during selection'
#         #return Path
#     def _set(self, Path):
#         'Controls the display of raster images during selection'
#     ImageFrameHighlight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines if raster and render images are displayed at true color or palletized color'
#         #return Path
#     def _set(self, Path):
#         'Determines if raster and render images are displayed at true color or palletized color'
#     TrueColorImages = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Controls the dimming intensity for XRefs'
#         #return Path
#     def _set(self, Path):
#         'Controls the dimming intensity for XRefs'
#     XRefFadeIntensity = property(_get, _set, doc = _set.__doc__)
#


class Library(object):
    """AutoCAD 2021 Type Library"""
    name = 'AutoCAD'
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


IAcadPlot._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Toggles the quiet error mode for plot error reporting'), 'propget'],
        HRESULT,
        'QuietErrorMode',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bErrorMode')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Toggles the quiet error mode for plot error reporting'), 'propput'],
        HRESULT,
        'QuietErrorMode',
        (['in'], VARIANT_BOOL, 'bErrorMode')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies the number of copies to plot'), 'propget'],
        HRESULT,
        'NumberOfCopies',
        (['out', 'retval'], POINTER(c_int), 'numCopies')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies the number of copies to plot'), 'propput'],
        HRESULT,
        'NumberOfCopies',
        (['in'], c_int, 'numCopies')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Gets the current status of the batch plot, or terminates the batch plot'), 'propget'],
        HRESULT,
        'BatchPlotProgress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bProgressStatus')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Gets the current status of the batch plot, or terminates the batch plot'), 'propput'],
        HRESULT,
        'BatchPlotProgress',
        (['in'], VARIANT_BOOL, 'bProgressStatus')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Displays the Plot Preview dialog box with the specified partial or full view preview')],
        HRESULT,
        'DisplayPlotPreview',
        (['in'], AcPreviewMode, 'Preview')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Plots a layout to the specified file')],
        HRESULT,
        'PlotToFile',
        (['in'], BSTR, 'plotFile'),
        (['in', 'optional'], VARIANT, 'plotConfig'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'success')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Plots a layout to a device')],
        HRESULT,
        'PlotToDevice',
        (['in', 'optional'], VARIANT, 'plotConfig'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'success')
    ),
    COMMETHOD(
        [dispid(1610743818), helpstring('Specifies the layout or layouts to plot')],
        HRESULT,
        'SetLayoutsToPlot',
        (['in'], VARIANT, 'layoutList')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Invokes batchmode printing')],
        HRESULT,
        'StartBatchMode',
        (['in'], c_int, 'entryCount')
    ),
]

################################################################
# code template for IAcadPlot implementation
# class IAcadPlot_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Toggles the quiet error mode for plot error reporting'
#         #return bErrorMode
#     def _set(self, bErrorMode):
#         'Toggles the quiet error mode for plot error reporting'
#     QuietErrorMode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the number of copies to plot'
#         #return numCopies
#     def _set(self, numCopies):
#         'Specifies the number of copies to plot'
#     NumberOfCopies = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Gets the current status of the batch plot, or terminates the batch plot'
#         #return bProgressStatus
#     def _set(self, bProgressStatus):
#         'Gets the current status of the batch plot, or terminates the batch plot'
#     BatchPlotProgress = property(_get, _set, doc = _set.__doc__)
#
#     def DisplayPlotPreview(self, Preview):
#         'Displays the Plot Preview dialog box with the specified partial or full view preview'
#         #return 
#
#     def PlotToFile(self, plotFile, plotConfig):
#         'Plots a layout to the specified file'
#         #return success
#
#     def PlotToDevice(self, plotConfig):
#         'Plots a layout to a device'
#         #return success
#
#     def SetLayoutsToPlot(self, layoutList):
#         'Specifies the layout or layouts to plot'
#         #return 
#
#     def StartBatchMode(self, entryCount):
#         'Invokes batchmode printing'
#         #return 
#


class IAcadRegisteredApplication(IAcadObject):
    """An external application that has been added to the drawing"""
    _case_insensitive_ = True
    _iid_ = GUID('{C50B91F6-35CF-4693-8E2D-2FC1B5B2CDF1}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadRegisteredApplication._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
]

################################################################
# code template for IAcadRegisteredApplication implementation
# class IAcadRegisteredApplication_Impl(object):
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcPlotScale'
acScaleToFit = 0
ac1_128in_1ft = 1
ac1_64in_1ft = 2
ac1_32in_1ft = 3
ac1_16in_1ft = 4
ac3_32in_1ft = 5
ac1_8in_1ft = 6
ac3_16in_1ft = 7
ac1_4in_1ft = 8
ac3_8in_1ft = 9
ac1_2in_1ft = 10
ac3_4in_1ft = 11
ac1in_1ft = 12
ac3in_1ft = 13
ac6in_1ft = 14
ac1ft_1ft = 15
ac1_1 = 16
ac1_2 = 17
ac1_4 = 18
ac1_5 = 19
ac1_8 = 20
ac1_10 = 21
ac1_16 = 22
ac1_20 = 23
ac1_30 = 24
ac1_40 = 25
ac1_50 = 26
ac1_100 = 27
ac2_1 = 28
ac4_1 = 29
ac8_1 = 30
ac10_1 = 31
ac100_1 = 32
AcPlotScale = c_int  # enum
# values for enumeration 'AcOnOff'
acOff = 0
acOn = 1
AcOnOff = c_int  # enum

IAcadDimStyle._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Copies the dimension style data from a source object')],
        HRESULT,
        'CopyFrom',
        (['in'], POINTER(IDispatch), 'StyleSource')
    ),
]

################################################################
# code template for IAcadDimStyle implementation
# class IAcadDimStyle_Impl(object):
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def CopyFrom(self, StyleSource):
#         'Copies the dimension style data from a source object'
#         #return 
#


class IAcadPreferences(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object specifies the current AutoCAD settings"""
    _case_insensitive_ = True
    _iid_ = GUID('{C2A67E24-E163-4972-836A-490B41127A35}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadApplication._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the visibility of an object or the application'), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Visible')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the visibility of an object or the application'), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'Visible')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pAppName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Gets the text that the user sees displayed for the application or a menu item'), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'bstrCaption')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the active document (drawing file)'), 'propget'],
        HRESULT,
        'ActiveDocument',
        (['out', 'retval'], POINTER(POINTER(IAcadDocument)), 'pActiveDoc')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the active document (drawing file)'), 'propput'],
        HRESULT,
        'ActiveDocument',
        (['in'], POINTER(IAcadDocument), 'pActiveDoc')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Gets the name of the application or document, including the path'), 'propget'],
        HRESULT,
        'FullName',
        (['out', 'retval'], POINTER(BSTR), 'FullName')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'Height')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'Height')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the left edge of the application window'), 'propget'],
        HRESULT,
        'WindowLeft',
        (['out', 'retval'], POINTER(c_int), 'left')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the left edge of the application window'), 'propput'],
        HRESULT,
        'WindowLeft',
        (['in'], c_int, 'left')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Gets the path of the document, application, or external reference'), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'bstrPath')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Gets the locale ID of the current AutoCAD session'), 'propget'],
        HRESULT,
        'LocaleId',
        (['out', 'retval'], POINTER(c_int), 'lcid')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the top edge of the application window'), 'propget'],
        HRESULT,
        'WindowTop',
        (['out', 'retval'], POINTER(c_int), 'top')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the top edge of the application window'), 'propput'],
        HRESULT,
        'WindowTop',
        (['in'], c_int, 'top')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Gets the version of the AutoCAD application you are using'), 'propget'],
        HRESULT,
        'Version',
        (['out', 'retval'], POINTER(BSTR), 'bstrVer')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'Width')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'Width')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Gets the Preferences object'), 'propget'],
        HRESULT,
        'Preferences',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferences)), 'pPreferences')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Gets the current active status of the viewport'), 'propget'],
        HRESULT,
        'StatusId',
        (['in'], POINTER(IDispatch), 'VportObj'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bStatus')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Gets the currently loaded AutoCAD ARX applications')],
        HRESULT,
        'ListArx',
        (['out', 'retval'], POINTER(VARIANT), 'pVarListArray')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Loads the specified AutoCAD ARX application')],
        HRESULT,
        'LoadArx',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Accepts a program ID and attempts to load it into AutoCAD as an in-process server')],
        HRESULT,
        'GetInterfaceObject',
        (['in'], BSTR, 'ProgID'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObj')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Unloads the specified AutoCAD ARX application')],
        HRESULT,
        'UnloadArx',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Updates the object to the drawing screen')],
        HRESULT,
        'Update',
    ),
    COMMETHOD(
        [dispid(25), helpstring('Closes the drawing file and exits the AutoCAD application')],
        HRESULT,
        'Quit',
    ),
    COMMETHOD(
        [dispid(26), helpstring('Zoom '), 'hidden'],
        HRESULT,
        'Zoom',
        (['in'], c_int, 'Type'),
        (['in'], POINTER(VARIANT), 'vParams')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the VBAIDE extensibility object'), 'propget'],
        HRESULT,
        'VBE',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pDispVBE')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Gets the MenuGroups collection for the session'), 'propget'],
        HRESULT,
        'MenuGroups',
        (['out', 'retval'], POINTER(POINTER(IAcadMenuGroups)), 'pMenuGroups')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Gets the MenuBar object for the session'), 'propget'],
        HRESULT,
        'MenuBar',
        (['out', 'retval'], POINTER(POINTER(IAcadMenuBar)), 'pMenuBar')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Loads the specified AutoCAD VBA project file')],
        HRESULT,
        'LoadDVB',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Unloads the specified AutoCAD VBA project file')],
        HRESULT,
        'UnloadDVB',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Returns the documents collection.'), 'propget'],
        HRESULT,
        'Documents',
        (['out', 'retval'], POINTER(POINTER(IAcadDocuments)), 'pDocuments')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Evaluates an expression in VBA')],
        HRESULT,
        'Eval',
        (['in'], BSTR, 'Expression')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Specifies the state of the application or document window'), 'propget'],
        HRESULT,
        'WindowState',
        (['out', 'retval'], POINTER(AcWindowState), 'eWinState')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Specifies the state of the application or document window'), 'propput'],
        HRESULT,
        'WindowState',
        (['in'], AcWindowState, 'eWinState')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Runs a VBA macro from the Application object')],
        HRESULT,
        'RunMacro',
        (['in'], BSTR, 'MacroPath')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Zooms the current viewport to the drawing extents')],
        HRESULT,
        'ZoomExtents',
    ),
    COMMETHOD(
        [dispid(37), helpstring('Zooms the current viewport to display the entire drawing')],
        HRESULT,
        'ZoomAll',
    ),
    COMMETHOD(
        [dispid(38), helpstring('Zooms the current viewport to a specified center point and magnification')],
        HRESULT,
        'ZoomCenter',
        (['in'], VARIANT, 'Center'),
        (['in'], c_double, 'Magnify')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Zooms the current viewport to given scale factor')],
        HRESULT,
        'ZoomScaled',
        (['in'], c_double, 'scale'),
        (['in'], AcZoomScaleType, 'ScaleType')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Zooms the current viewport to the area specified by two opposite corners of a rectangle')],
        HRESULT,
        'ZoomWindow',
        (['in'], VARIANT, 'LowerLeft'),
        (['in'], VARIANT, 'UpperRight')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Zooms the current viewport to a window defined by points picked on the screen')],
        HRESULT,
        'ZoomPickWindow',
    ),
    COMMETHOD(
        [dispid(42), helpstring('Retrieves an AcadState object.')],
        HRESULT,
        'GetAcadState',
        (['out', 'retval'], POINTER(POINTER(IAcadState)), 'pVal')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Zooms the current viewport to its previous extents')],
        HRESULT,
        'ZoomPrevious',
    ),
    COMMETHOD(
        [dispid(44), helpstring('Gets the window handle of the application window frame'), 'propget'],
        HRESULT,
        'HWND',
        (['out', 'retval'], POINTER(LONG_PTR), 'HWND')
    ),
]

################################################################
# code template for IAcadApplication implementation
# class IAcadApplication_Impl(object):
#     def _get(self):
#         'Specifies the visibility of an object or the application'
#         #return Visible
#     def _set(self, Visible):
#         'Specifies the visibility of an object or the application'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         'Specifies the name of the object'
#         #return pAppName
#
#     @property
#     def Caption(self):
#         'Gets the text that the user sees displayed for the application or a menu item'
#         #return bstrCaption
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Specifies the active document (drawing file)'
#         #return pActiveDoc
#     def _set(self, pActiveDoc):
#         'Specifies the active document (drawing file)'
#     ActiveDocument = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def FullName(self):
#         'Gets the name of the application or document, including the path'
#         #return FullName
#
#     def _get(self):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#         #return Height
#     def _set(self, Height):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the left edge of the application window'
#         #return left
#     def _set(self, left):
#         'Specifies the left edge of the application window'
#     WindowLeft = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Path(self):
#         'Gets the path of the document, application, or external reference'
#         #return bstrPath
#
#     @property
#     def LocaleId(self):
#         'Gets the locale ID of the current AutoCAD session'
#         #return lcid
#
#     def _get(self):
#         'Specifies the top edge of the application window'
#         #return top
#     def _set(self, top):
#         'Specifies the top edge of the application window'
#     WindowTop = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Version(self):
#         'Gets the version of the AutoCAD application you are using'
#         #return bstrVer
#
#     def _get(self):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Preferences(self):
#         'Gets the Preferences object'
#         #return pPreferences
#
#     @property
#     def StatusId(self, VportObj):
#         'Gets the current active status of the viewport'
#         #return bStatus
#
#     def ListArx(self):
#         'Gets the currently loaded AutoCAD ARX applications'
#         #return pVarListArray
#
#     def LoadArx(self, Name):
#         'Loads the specified AutoCAD ARX application'
#         #return 
#
#     def GetInterfaceObject(self, ProgID):
#         'Accepts a program ID and attempts to load it into AutoCAD as an in-process server'
#         #return pObj
#
#     def UnloadArx(self, Name):
#         'Unloads the specified AutoCAD ARX application'
#         #return 
#
#     def Update(self):
#         'Updates the object to the drawing screen'
#         #return 
#
#     def Quit(self):
#         'Closes the drawing file and exits the AutoCAD application'
#         #return 
#
#     def Zoom(self, Type, vParams):
#         'Zoom '
#         #return 
#
#     @property
#     def VBE(self):
#         'Gets the VBAIDE extensibility object'
#         #return pDispVBE
#
#     @property
#     def MenuGroups(self):
#         'Gets the MenuGroups collection for the session'
#         #return pMenuGroups
#
#     @property
#     def MenuBar(self):
#         'Gets the MenuBar object for the session'
#         #return pMenuBar
#
#     def LoadDVB(self, Name):
#         'Loads the specified AutoCAD VBA project file'
#         #return 
#
#     def UnloadDVB(self, Name):
#         'Unloads the specified AutoCAD VBA project file'
#         #return 
#
#     @property
#     def Documents(self):
#         'Returns the documents collection.'
#         #return pDocuments
#
#     def Eval(self, Expression):
#         'Evaluates an expression in VBA'
#         #return 
#
#     def _get(self):
#         'Specifies the state of the application or document window'
#         #return eWinState
#     def _set(self, eWinState):
#         'Specifies the state of the application or document window'
#     WindowState = property(_get, _set, doc = _set.__doc__)
#
#     def RunMacro(self, MacroPath):
#         'Runs a VBA macro from the Application object'
#         #return 
#
#     def ZoomExtents(self):
#         'Zooms the current viewport to the drawing extents'
#         #return 
#
#     def ZoomAll(self):
#         'Zooms the current viewport to display the entire drawing'
#         #return 
#
#     def ZoomCenter(self, Center, Magnify):
#         'Zooms the current viewport to a specified center point and magnification'
#         #return 
#
#     def ZoomScaled(self, scale, ScaleType):
#         'Zooms the current viewport to given scale factor'
#         #return 
#
#     def ZoomWindow(self, LowerLeft, UpperRight):
#         'Zooms the current viewport to the area specified by two opposite corners of a rectangle'
#         #return 
#
#     def ZoomPickWindow(self):
#         'Zooms the current viewport to a window defined by points picked on the screen'
#         #return 
#
#     def GetAcadState(self):
#         'Retrieves an AcadState object.'
#         #return pVal
#
#     def ZoomPrevious(self):
#         'Zooms the current viewport to its previous extents'
#         #return 
#
#     @property
#     def HWND(self):
#         'Gets the window handle of the application window frame'
#         #return HWND
#

IAcadMaterials._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadMaterial)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadMaterial)), 'pDimStyle')
    ),
]

################################################################
# code template for IAcadMaterials implementation
# class IAcadMaterials_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pDimStyle
#

IAcadPreferencesProfiles._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies the active profile for the AutoCAD session'), 'propput'],
        HRESULT,
        'ActiveProfile',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies the active profile for the AutoCAD session'), 'propget'],
        HRESULT,
        'ActiveProfile',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Imports a profile created by another user')],
        HRESULT,
        'ImportProfile',
        (['in'], BSTR, 'ProfileName'),
        (['in'], BSTR, 'RegFile'),
        (['in'], VARIANT_BOOL, 'IncludePathInfo')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Exports the active profile so it can be shared with other users')],
        HRESULT,
        'ExportProfile',
        (['in'], BSTR, 'ProfileName'),
        (['in'], BSTR, 'RegFile')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Deletes the specified profile')],
        HRESULT,
        'DeleteProfile',
        (['in'], BSTR, 'ProfileName')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Resets the value in the specified profile to its default values')],
        HRESULT,
        'ResetProfile',
        (['in'], BSTR, 'Profile')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Renames the specified profile')],
        HRESULT,
        'RenameProfile',
        (['in'], BSTR, 'origProfileName'),
        (['in'], BSTR, 'newProfileName')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Copies the specified profile')],
        HRESULT,
        'CopyProfile',
        (['in'], BSTR, 'oldProfileName'),
        (['in'], BSTR, 'newProfileName')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Gets all available profiles for the system')],
        HRESULT,
        'GetAllProfileNames',
        (['out'], POINTER(VARIANT), 'pNames')
    ),
]

################################################################
# code template for IAcadPreferencesProfiles implementation
# class IAcadPreferencesProfiles_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Specifies the active profile for the AutoCAD session'
#         #return Path
#     def _set(self, Path):
#         'Specifies the active profile for the AutoCAD session'
#     ActiveProfile = property(_get, _set, doc = _set.__doc__)
#
#     def ImportProfile(self, ProfileName, RegFile, IncludePathInfo):
#         'Imports a profile created by another user'
#         #return 
#
#     def ExportProfile(self, ProfileName, RegFile):
#         'Exports the active profile so it can be shared with other users'
#         #return 
#
#     def DeleteProfile(self, ProfileName):
#         'Deletes the specified profile'
#         #return 
#
#     def ResetProfile(self, Profile):
#         'Resets the value in the specified profile to its default values'
#         #return 
#
#     def RenameProfile(self, origProfileName, newProfileName):
#         'Renames the specified profile'
#         #return 
#
#     def CopyProfile(self, oldProfileName, newProfileName):
#         'Copies the specified profile'
#         #return 
#
#     def GetAllProfileNames(self):
#         'Gets all available profiles for the system'
#         #return pNames
#

IAcadSectionManager._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Returns an item in the collection.')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadSection)), 'pSection')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of sections in the database'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Gets the section whose live section is currently active')],
        HRESULT,
        'GetLiveSection',
        (['out', 'retval'], POINTER(POINTER(IAcadSection)), 'pSection')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Finds an unique name for secion')],
        HRESULT,
        'GetUniqueSectionName',
        (['in'], BSTR, 'pBaseName'),
        (['out', 'retval'], POINTER(BSTR), 'ppUniqueName')
    ),
]

################################################################
# code template for IAcadSectionManager implementation
# class IAcadSectionManager_Impl(object):
#     def Item(self, Index):
#         'Returns an item in the collection.'
#         #return pSection
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def Count(self):
#         'Gets the number of sections in the database'
#         #return pVal
#
#     def GetLiveSection(self):
#         'Gets the section whose live section is currently active'
#         #return pSection
#
#     def GetUniqueSectionName(self, pBaseName):
#         'Finds an unique name for secion'
#         #return ppUniqueName
#
# values for enumeration 'AcBoolean'
acFalse = 0
acTrue = 1
AcBoolean = c_int  # enum


class AcadPopupMenus(CoClass):
    """A collection of PopupMenu objects representing all the popup menus loaded in the MenuGroup"""
    _reg_clsid_ = GUID('{ECCE89E0-1CF9-4D8F-B3EA-3E82E673EE6F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPopupMenus(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A collection of PopupMenu objects representing all the popup menus loaded in the MenuGroup"""
    _case_insensitive_ = True
    _iid_ = GUID('{A14874CE-740A-4A1B-BB70-17D578F41913}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPopupMenus._com_interfaces_ = [IAcadPopupMenus]


class AcadPopupMenuItem(CoClass):
    """A single menu item on an AutoCAD pull-down menu"""
    _reg_clsid_ = GUID('{03FCD8AD-66AC-4B84-A563-FE19F8BC31AF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


class IAcadPopupMenuItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """A single menu item on an AutoCAD pull-down menu"""
    _case_insensitive_ = True
    _iid_ = GUID('{BCAD59F8-0E34-4B8D-9AEC-09589AC2EE80}')
    _idlflags_ = ['dual', 'oleautomation']


AcadPopupMenuItem._com_interfaces_ = [IAcadPopupMenuItem]
# values for enumeration 'AcDimCenterType'
acCenterMark = 0
acCenterLine = 1
acCenterNone = 2
AcDimCenterType = c_int  # enum

IAcadDimRadialLarge._methods_ = [
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propget'],
        HRESULT,
        'AltUnits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propput'],
        HRESULT,
        'AltUnits',
        (['in'], VARIANT_BOOL, 'bAlternate')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propget'],
        HRESULT,
        'AltUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propput'],
        HRESULT,
        'AltUnitsPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propget'],
        HRESULT,
        'AltUnitsScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propput'],
        HRESULT,
        'AltUnitsScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propget'],
        HRESULT,
        'AltRoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propput'],
        HRESULT,
        'AltRoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propget'],
        HRESULT,
        'AltTolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propput'],
        HRESULT,
        'AltTolerancePrecision',
        (['in'], AcDimPrecision, 'Distance')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propget'],
        HRESULT,
        'AltUnitsFormat',
        (['out', 'retval'], POINTER(AcDimUnits), 'Units')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propput'],
        HRESULT,
        'AltUnitsFormat',
        (['in'], AcDimUnits, 'Units')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextSuffix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Specifies type of center mark on the dimension (DIMCEN system variable)'), 'propget'],
        HRESULT,
        'CenterType',
        (['out', 'retval'], POINTER(AcDimCenterType), 'Type')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Specifies type of center mark on the dimension (DIMCEN system variable)'), 'propput'],
        HRESULT,
        'CenterType',
        (['in'], AcDimCenterType, 'Type')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Specifies size of the center mark on the dimension (DIMCEN system variable)'), 'propget'],
        HRESULT,
        'CenterMarkSize',
        (['out', 'retval'], POINTER(c_double), 'Type')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Specifies size of the center mark on the dimension (DIMCEN system variable)'), 'propput'],
        HRESULT,
        'CenterMarkSize',
        (['in'], c_double, 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propget'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Prec')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propput'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['in'], AcDimPrecision, 'Prec')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propget'],
        HRESULT,
        'FractionFormat',
        (['out', 'retval'], POINTER(AcDimFractionType), 'Type')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propput'],
        HRESULT,
        'FractionFormat',
        (['in'], AcDimFractionType, 'Type')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propget'],
        HRESULT,
        'LinearScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propput'],
        HRESULT,
        'LinearScaleFactor',
        (['in'], ACAD_NOUNITS, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propget'],
        HRESULT,
        'UnitsFormat',
        (['out', 'retval'], POINTER(AcDimLUnits), 'format')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propput'],
        HRESULT,
        'UnitsFormat',
        (['in'], AcDimLUnits, 'format')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propget'],
        HRESULT,
        'RoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propput'],
        HRESULT,
        'RoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets the suppression of the second dimension line On or Off (DIMSD2)'), 'propget'],
        HRESULT,
        'DimLineSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets the suppression of the second dimension line On or Off (DIMSD2)'), 'propput'],
        HRESULT,
        'DimLineSuppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the dimension arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadType',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the dimension arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadType',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(c_double), 'bVal')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for a radial dimension or leader line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ArrowheadBlock',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for a radial dimension or leader line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ArrowheadBlock',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Specifies the override center location or pick point'), 'propget'],
        HRESULT,
        'OverrideCenter',
        (['out', 'retval'], POINTER(VARIANT), 'overrideCenterPos')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Specifies the override center location or pick point'), 'propput'],
        HRESULT,
        'OverrideCenter',
        (['in'], VARIANT, 'overrideCenterPos')
    ),
    COMMETHOD(
        [dispid(69), helpstring('Specifies the jog location or pick point'), 'propget'],
        HRESULT,
        'JogLocation',
        (['out', 'retval'], POINTER(VARIANT), 'jogPos')
    ),
    COMMETHOD(
        [dispid(69), helpstring('Specifies the jog location or pick point'), 'propput'],
        HRESULT,
        'JogLocation',
        (['in'], VARIANT, 'jogPos')
    ),
    COMMETHOD(
        [dispid(70), helpstring('Specifies the jog angle (DIMJOGANG system variable)'), 'propget'],
        HRESULT,
        'JogAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'JogAngle')
    ),
    COMMETHOD(
        [dispid(70), helpstring('Specifies the jog angle (DIMJOGANG system variable)'), 'propput'],
        HRESULT,
        'JogAngle',
        (['in'], ACAD_ANGLE, 'JogAngle')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Specifies the center of the arc'), 'propget'],
        HRESULT,
        'Center',
        (['out', 'retval'], POINTER(VARIANT), 'pVar')
    ),
    COMMETHOD(
        [dispid(71), helpstring('Specifies the center of the arc'), 'propput'],
        HRESULT,
        'Center',
        (['in'], VARIANT, 'pVar')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Specifies the chord point for the arc'), 'propget'],
        HRESULT,
        'ChordPoint',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(72), helpstring('Specifies the chord point for the arc'), 'propput'],
        HRESULT,
        'ChordPoint',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
]

################################################################
# code template for IAcadDimRadialLarge implementation
# class IAcadDimRadialLarge_Impl(object):
#     def _get(self):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#         #return bAlternate
#     def _set(self, bAlternate):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#     AltUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#     AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#     AltUnitsScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#     AltRoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#     AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#         #return Units
#     def _set(self, Units):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#     AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of center mark on the dimension (DIMCEN system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of center mark on the dimension (DIMCEN system variable)'
#     CenterType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the center mark on the dimension (DIMCEN system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies size of the center mark on the dimension (DIMCEN system variable)'
#     CenterMarkSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#         #return Prec
#     def _set(self, Prec):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#     PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fraction type (DIMFRAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Sets fraction type (DIMFRAC system variable)'
#     FractionFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#     LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#     UnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value (DIMRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value (DIMRND system variable)'
#     RoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the suppression of the second dimension line On or Off (DIMSD2)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets the suppression of the second dimension line On or Off (DIMSD2)'
#     DimLineSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the dimension arrowhead'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the dimension arrowhead'
#     ArrowheadType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for a radial dimension or leader line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for a radial dimension or leader line'
#     ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the override center location or pick point'
#         #return overrideCenterPos
#     def _set(self, overrideCenterPos):
#         'Specifies the override center location or pick point'
#     OverrideCenter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the jog location or pick point'
#         #return jogPos
#     def _set(self, jogPos):
#         'Specifies the jog location or pick point'
#     JogLocation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the jog angle (DIMJOGANG system variable)'
#         #return JogAngle
#     def _set(self, JogAngle):
#         'Specifies the jog angle (DIMJOGANG system variable)'
#     JogAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the center of the arc'
#         #return pVar
#     def _set(self, pVar):
#         'Specifies the center of the arc'
#     Center = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the chord point for the arc'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the chord point for the arc'
#     ChordPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#


class AcadSurface(CoClass):
    """AutoCAD Surface Object"""
    _reg_clsid_ = GUID('{E3FED59C-85E2-4AE7-B477-D7BCC01F7963}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSurface._com_interfaces_ = [IAcadSurface]
AcadSurface._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadExtrudedSurface(IAcadSurface):
    """IAcadExtrudedSurface Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{C9CE2A9F-AA7A-4D4B-A712-3A911F1933CF}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadExtrudedSurface._methods_ = [
    COMMETHOD(
        [dispid(2), helpstring('Specifies the height of the extrusion'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the height of the extrusion'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the taper angle of the extrusion'), 'propget'],
        HRESULT,
        'TaperAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'TaperAngle')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the taper angle of the extrusion'), 'propput'],
        HRESULT,
        'TaperAngle',
        (['in'], ACAD_ANGLE, 'TaperAngle')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Displays the extrusion direction'), 'propget'],
        HRESULT,
        'Direction',
        (['out', 'retval'], POINTER(VARIANT), 'Direction')
    ),
]

################################################################
# code template for IAcadExtrudedSurface implementation
# class IAcadExtrudedSurface_Impl(object):
#     def _get(self):
#         'Specifies the height of the extrusion'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the extrusion'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the taper angle of the extrusion'
#         #return TaperAngle
#     def _set(self, TaperAngle):
#         'Specifies the taper angle of the extrusion'
#     TaperAngle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Direction(self):
#         'Displays the extrusion direction'
#         #return Direction
#

IAcadLineTypes._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadLineType)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadLineType)), 'pLinetype')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Loads a menu group from a menu file or the definition of a linetype from a library (LIN) file')],
        HRESULT,
        'Load',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FileName')
    ),
]

################################################################
# code template for IAcadLineTypes implementation
# class IAcadLineTypes_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pLinetype
#
#     def Load(self, Name, FileName):
#         'Loads a menu group from a menu file or the definition of a linetype from a library (LIN) file'
#         #return 
#


class AcadPlaneSurface(CoClass):
    """AutoCAD Plane Surface Object"""
    _reg_clsid_ = GUID('{56E6D9EA-2CD2-4CC1-9EDA-A1C75B601C99}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPlaneSurface._com_interfaces_ = [IAcadPlaneSurface]
AcadPlaneSurface._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadRevolvedSurface(IAcadSurface):
    """IAcadRevolvedSurface Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{4CFA1519-2BDA-414D-BDEA-CD0653BE5F5B}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadRevolvedSurface._methods_ = [
    COMMETHOD(
        [dispid(2), helpstring('Specifies the angle of revolution'), 'propget'],
        HRESULT,
        'RevolutionAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'revAngle')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the angle of revolution'), 'propput'],
        HRESULT,
        'RevolutionAngle',
        (['in'], ACAD_ANGLE, 'revAngle')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the start point of the axis of revolution'), 'propget'],
        HRESULT,
        'AxisPosition',
        (['out', 'retval'], POINTER(VARIANT), 'AxisPosition')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the start point of the axis of revolution'), 'propput'],
        HRESULT,
        'AxisPosition',
        (['in'], VARIANT, 'AxisPosition')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Displays the direction of the axis of revolution'), 'propget'],
        HRESULT,
        'AxisDirection',
        (['out', 'retval'], POINTER(VARIANT), 'AxisDirection')
    ),
]

################################################################
# code template for IAcadRevolvedSurface implementation
# class IAcadRevolvedSurface_Impl(object):
#     def _get(self):
#         'Specifies the angle of revolution'
#         #return revAngle
#     def _set(self, revAngle):
#         'Specifies the angle of revolution'
#     RevolutionAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the start point of the axis of revolution'
#         #return AxisPosition
#     def _set(self, AxisPosition):
#         'Specifies the start point of the axis of revolution'
#     AxisPosition = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def AxisDirection(self):
#         'Displays the direction of the axis of revolution'
#         #return AxisDirection
#

IAcadLayers._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadLayer)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadLayer)), 'pLayer')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Generates layer usage data. See also Used property of Layer.')],
        HRESULT,
        'GenerateUsageData',
    ),
]

################################################################
# code template for IAcadLayers implementation
# class IAcadLayers_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pLayer
#
#     def GenerateUsageData(self):
#         'Generates layer usage data. See also Used property of Layer.'
#         #return 
#

IAcadDimDiametric._methods_ = [
    COMMETHOD(
        [dispid(42), helpstring('Specifies the length of the leader on the diameter or radius dimension'), 'nonbrowsable', 'propput'],
        HRESULT,
        'LeaderLength',
        (['in'], c_double, 'rhs')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets alternate units dimensioning On or Off (DIMALT system variable)'), 'propget'],
        HRESULT,
        'AltUnits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets alternate units dimensioning On or Off (DIMALT system variable)'), 'propput'],
        HRESULT,
        'AltUnits',
        (['in'], VARIANT_BOOL, 'bAlternate')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propget'],
        HRESULT,
        'AltUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propput'],
        HRESULT,
        'AltUnitsPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propget'],
        HRESULT,
        'AltUnitsScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propput'],
        HRESULT,
        'AltUnitsScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propget'],
        HRESULT,
        'AltRoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propput'],
        HRESULT,
        'AltRoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propget'],
        HRESULT,
        'AltTolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propput'],
        HRESULT,
        'AltTolerancePrecision',
        (['in'], AcDimPrecision, 'Distance')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propget'],
        HRESULT,
        'AltUnitsFormat',
        (['out', 'retval'], POINTER(AcDimUnits), 'Units')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propput'],
        HRESULT,
        'AltUnitsFormat',
        (['in'], AcDimUnits, 'Units')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextSuffix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propget'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Prec')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propput'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['in'], AcDimPrecision, 'Prec')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propget'],
        HRESULT,
        'FractionFormat',
        (['out', 'retval'], POINTER(AcDimFractionType), 'Type')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propput'],
        HRESULT,
        'FractionFormat',
        (['in'], AcDimFractionType, 'Type')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propget'],
        HRESULT,
        'LinearScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propput'],
        HRESULT,
        'LinearScaleFactor',
        (['in'], ACAD_NOUNITS, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propget'],
        HRESULT,
        'UnitsFormat',
        (['out', 'retval'], POINTER(AcDimLUnits), 'format')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propput'],
        HRESULT,
        'UnitsFormat',
        (['in'], AcDimLUnits, 'format')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propget'],
        HRESULT,
        'RoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propput'],
        HRESULT,
        'RoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propget'],
        HRESULT,
        'DimLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propput'],
        HRESULT,
        'DimLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propget'],
        HRESULT,
        'DimLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propput'],
        HRESULT,
        'DimLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Specifies type of center mark on the dimension (DIMCEN system variable)'), 'propget'],
        HRESULT,
        'CenterType',
        (['out', 'retval'], POINTER(AcDimCenterType), 'Type')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Specifies type of center mark on the dimension (DIMCEN system variable)'), 'propput'],
        HRESULT,
        'CenterType',
        (['in'], AcDimCenterType, 'Type')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Specifies size of the center mark on the dimension (DIMCEN system variable)'), 'propget'],
        HRESULT,
        'CenterMarkSize',
        (['out', 'retval'], POINTER(c_double), 'Type')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Specifies size of the center mark on the dimension (DIMCEN system variable)'), 'propput'],
        HRESULT,
        'CenterMarkSize',
        (['in'], c_double, 'Type')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead1Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead1Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead2Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead2Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(c_double), 'bVal')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead1Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead1Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead2Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead2Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propget'],
        HRESULT,
        'DimConstrForm',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propput'],
        HRESULT,
        'DimConstrForm',
        (['in'], VARIANT_BOOL, 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propget'],
        HRESULT,
        'DimConstrReference',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propput'],
        HRESULT,
        'DimConstrReference',
        (['in'], VARIANT_BOOL, 'bIsReference')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propget'],
        HRESULT,
        'DimConstrName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propput'],
        HRESULT,
        'DimConstrName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrExpression',
        (['out', 'retval'], POINTER(BSTR), 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrExpression',
        (['in'], BSTR, 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrValue',
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrValue',
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propget'],
        HRESULT,
        'DimConstrDesc',
        (['out', 'retval'], POINTER(BSTR), 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propput'],
        HRESULT,
        'DimConstrDesc',
        (['in'], BSTR, 'bstrDescription')
    ),
]

################################################################
# code template for IAcadDimDiametric implementation
# class IAcadDimDiametric_Impl(object):
#     def _set(self, rhs):
#         'Specifies the length of the leader on the diameter or radius dimension'
#     LeaderLength = property(fset = _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets alternate units dimensioning On or Off (DIMALT system variable)'
#         #return bAlternate
#     def _set(self, bAlternate):
#         'Sets alternate units dimensioning On or Off (DIMALT system variable)'
#     AltUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#     AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#     AltUnitsScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#     AltRoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#     AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#         #return Units
#     def _set(self, Units):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#     AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#         #return Prec
#     def _set(self, Prec):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#     PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fraction type (DIMFRAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Sets fraction type (DIMFRAC system variable)'
#     FractionFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#     LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#     UnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value (DIMRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value (DIMRND system variable)'
#     RoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#     DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#     DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of center mark on the dimension (DIMCEN system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of center mark on the dimension (DIMCEN system variable)'
#     CenterType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the center mark on the dimension (DIMCEN system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies size of the center mark on the dimension (DIMCEN system variable)'
#     CenterMarkSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#     Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#     Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#     Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#     Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the constraint type - Dynamic or Annotational'
#         #return bIsDynamic
#     def _set(self, bIsDynamic):
#         'Specifies the constraint type - Dynamic or Annotational'
#     DimConstrForm = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#         #return bIsReference
#     def _set(self, bIsReference):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#     DimConstrReference = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#     DimConstrName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the expression or the value of the constraint'
#         #return bstrExpression
#     def _set(self, bstrExpression):
#         'Specifies the expression or the value of the constraint'
#     DimConstrExpression = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the value of the constraint'
#         #return Value
#     def _set(self, Value):
#         'Specifies the value of the constraint'
#     DimConstrValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies description for constraint'
#         #return bstrDescription
#     def _set(self, bstrDescription):
#         'Specifies description for constraint'
#     DimConstrDesc = property(_get, _set, doc = _set.__doc__)
#

IAcadTextStyle._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the big font file associated with the text or attribute'), 'propget'],
        HRESULT,
        'BigFontFile',
        (['out', 'retval'], POINTER(BSTR), 'fontFile')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the big font file associated with the text or attribute'), 'propput'],
        HRESULT,
        'BigFontFile',
        (['in'], BSTR, 'fontFile')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the primary font file path and name'), 'propget'],
        HRESULT,
        'fontFile',
        (['out', 'retval'], POINTER(BSTR), 'fontFile')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the primary font file path and name'), 'propput'],
        HRESULT,
        'fontFile',
        (['in'], BSTR, 'fontFile')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the last text height used'), 'propget'],
        HRESULT,
        'LastHeight',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the last text height used'), 'propput'],
        HRESULT,
        'LastHeight',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the oblique angle of the object'), 'propget'],
        HRESULT,
        'ObliqueAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the oblique angle of the object'), 'propput'],
        HRESULT,
        'ObliqueAngle',
        (['in'], ACAD_ANGLE, 'obliAngle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the attribute text generation flag'), 'propget'],
        HRESULT,
        'TextGenerationFlag',
        (['out', 'retval'], POINTER(c_int), 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the attribute text generation flag'), 'propput'],
        HRESULT,
        'TextGenerationFlag',
        (['in'], c_int, 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Gets the definition data of the font for the TextStyle')],
        HRESULT,
        'GetFont',
        (['out'], POINTER(BSTR), 'TypeFace'),
        (['out'], POINTER(VARIANT_BOOL), 'Bold'),
        (['out'], POINTER(VARIANT_BOOL), 'Italic'),
        (['out'], POINTER(c_int), 'Charset'),
        (['out'], POINTER(c_int), 'PitchAndFamily')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Sets the definition data of the font for the TextStyle')],
        HRESULT,
        'SetFont',
        (['in'], BSTR, 'TypeFace'),
        (['in'], VARIANT_BOOL, 'Bold'),
        (['in'], VARIANT_BOOL, 'Italic'),
        (['in'], c_int, 'Charset'),
        (['in'], c_int, 'PitchAndFamily')
    ),
]

################################################################
# code template for IAcadTextStyle implementation
# class IAcadTextStyle_Impl(object):
#     def _get(self):
#         'Specifies the name of the big font file associated with the text or attribute'
#         #return fontFile
#     def _set(self, fontFile):
#         'Specifies the name of the big font file associated with the text or attribute'
#     BigFontFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the primary font file path and name'
#         #return fontFile
#     def _set(self, fontFile):
#         'Specifies the primary font file path and name'
#     fontFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#         #return Height
#     def _set(self, Height):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the last text height used'
#         #return Height
#     def _set(self, Height):
#         'Specifies the last text height used'
#     LastHeight = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         'Specifies the name of the object'
#         #return bstrName
#
#     def _get(self):
#         'Specifies the oblique angle of the object'
#         #return obliAngle
#     def _set(self, obliAngle):
#         'Specifies the oblique angle of the object'
#     ObliqueAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the attribute text generation flag'
#         #return textGenFlag
#     def _set(self, textGenFlag):
#         'Specifies the attribute text generation flag'
#     TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def GetFont(self):
#         'Gets the definition data of the font for the TextStyle'
#         #return TypeFace, Bold, Italic, Charset, PitchAndFamily
#
#     def SetFont(self, TypeFace, Bold, Italic, Charset, PitchAndFamily):
#         'Sets the definition data of the font for the TextStyle'
#         #return 
#
# values for enumeration 'AcDynamicBlockReferencePropertyUnitsType'
acNoUnits = 0
acAngular = 1
acDistance = 2
acArea = 3
AcDynamicBlockReferencePropertyUnitsType = c_int  # enum

IAcadLayer._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the color of an entity or layer'), 'hidden', 'propget'],
        HRESULT,
        'color',
        (['out', 'retval'], POINTER(AcColor), 'color')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the color of an entity or layer'), 'hidden', 'propput'],
        HRESULT,
        'color',
        (['in'], AcColor, 'color')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the color of an entity or layer'), 'propget'],
        HRESULT,
        'TrueColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the color of an entity or layer'), 'propput'],
        HRESULT,
        'TrueColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the freeze status of a layer'), 'propget'],
        HRESULT,
        'Freeze',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFreeze')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the freeze status of a layer'), 'propput'],
        HRESULT,
        'Freeze',
        (['in'], VARIANT_BOOL, 'bFreeze')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the state of a layer'), 'propget'],
        HRESULT,
        'LayerOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bOn')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the state of a layer'), 'propput'],
        HRESULT,
        'LayerOn',
        (['in'], VARIANT_BOOL, 'bOn')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the linetype of an entity'), 'propget'],
        HRESULT,
        'Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the linetype of an entity'), 'propput'],
        HRESULT,
        'Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Locks or unlocks a layer'), 'propget'],
        HRESULT,
        'Lock',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Block')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Locks or unlocks a layer'), 'propput'],
        HRESULT,
        'Lock',
        (['in'], VARIANT_BOOL, 'Block')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies wether the layer is plottable.'), 'propget'],
        HRESULT,
        'Plottable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bPlottable')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies wether the layer is plottable.'), 'propput'],
        HRESULT,
        'Plottable',
        (['in'], VARIANT_BOOL, 'bPlottable')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies if the layer is to be frozen in new viewports'), 'propget'],
        HRESULT,
        'ViewportDefault',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bDefault')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies if the layer is to be frozen in new viewports'), 'propput'],
        HRESULT,
        'ViewportDefault',
        (['in'], VARIANT_BOOL, 'bDefault')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the plotstyle name for the object'), 'propget'],
        HRESULT,
        'PlotStyleName',
        (['out', 'retval'], POINTER(BSTR), 'plotStyle')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the plotstyle name for the object'), 'propput'],
        HRESULT,
        'PlotStyleName',
        (['in'], BSTR, 'plotStyle')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the lineweight for the object'), 'propget'],
        HRESULT,
        'Lineweight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the lineweight for the object'), 'propput'],
        HRESULT,
        'Lineweight',
        (['in'], ACAD_LWEIGHT, 'Lineweight')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Returns and sets the description of the layer.'), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Returns and sets the description of the layer.'), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'Description')
    ),
    COMMETHOD(
        [dispid(13), helpstring('returns whether the layer is in use. See GenerateUsageData.'), 'propget'],
        HRESULT,
        'Used',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bUsed')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the material'), 'propget'],
        HRESULT,
        'Material',
        (['out', 'retval'], POINTER(BSTR), 'Material')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the material'), 'propput'],
        HRESULT,
        'Material',
        (['in'], BSTR, 'Material')
    ),
]

################################################################
# code template for IAcadLayer implementation
# class IAcadLayer_Impl(object):
#     def _get(self):
#         'Specifies the color of an entity or layer'
#         #return color
#     def _set(self, color):
#         'Specifies the color of an entity or layer'
#     color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of an entity or layer'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies the color of an entity or layer'
#     TrueColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the freeze status of a layer'
#         #return bFreeze
#     def _set(self, bFreeze):
#         'Specifies the freeze status of a layer'
#     Freeze = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the state of a layer'
#         #return bOn
#     def _set(self, bOn):
#         'Specifies the state of a layer'
#     LayerOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of an entity'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of an entity'
#     Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Locks or unlocks a layer'
#         #return Block
#     def _set(self, Block):
#         'Locks or unlocks a layer'
#     Lock = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies wether the layer is plottable.'
#         #return bPlottable
#     def _set(self, bPlottable):
#         'Specifies wether the layer is plottable.'
#     Plottable = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the layer is to be frozen in new viewports'
#         #return bDefault
#     def _set(self, bDefault):
#         'Specifies if the layer is to be frozen in new viewports'
#     ViewportDefault = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plotstyle name for the object'
#         #return plotStyle
#     def _set(self, plotStyle):
#         'Specifies the plotstyle name for the object'
#     PlotStyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the lineweight for the object'
#         #return Lineweight
#     def _set(self, Lineweight):
#         'Specifies the lineweight for the object'
#     Lineweight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the description of the layer.'
#         #return Description
#     def _set(self, Description):
#         'Returns and sets the description of the layer.'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Used(self):
#         'returns whether the layer is in use. See GenerateUsageData.'
#         #return bUsed
#
#     def _get(self):
#         'Specifies the material'
#         #return Material
#     def _set(self, Material):
#         'Specifies the material'
#     Material = property(_get, _set, doc = _set.__doc__)
#


class AcadExtrudedSurface(CoClass):
    """AutoCAD Extruded Surface Object"""
    _reg_clsid_ = GUID('{FAD3A1C3-5FCB-4BE6-AA91-A843AE5CC3F6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadExtrudedSurface._com_interfaces_ = [IAcadExtrudedSurface]
AcadExtrudedSurface._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadSweptSurface(IAcadSurface):
    """IAcadSweptSurface Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{8907E3ED-865C-4866-B749-084866188561}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSweptSurface._methods_ = [
    COMMETHOD(
        [dispid(2), helpstring('Specifies the rotation of the sweep profile'), 'propget'],
        HRESULT,
        'ProfileRotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'profileRotationAngle')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the rotation of the sweep profile'), 'propput'],
        HRESULT,
        'ProfileRotation',
        (['in'], ACAD_ANGLE, 'profileRotationAngle')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies whether or not the profile curve twists and rotates along a 3D path'), 'propget'],
        HRESULT,
        'Bank',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bBank')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies whether or not the profile curve twists and rotates along a 3D path'), 'propput'],
        HRESULT,
        'Bank',
        (['in'], VARIANT_BOOL, 'bBank')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the amount of rotation along the entire length of the sweep path'), 'propget'],
        HRESULT,
        'Twist',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'TwistAngle')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the amount of rotation along the entire length of the sweep path'), 'propput'],
        HRESULT,
        'Twist',
        (['in'], ACAD_ANGLE, 'TwistAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the scale factor from start to the end of the sweep path'), 'propget'],
        HRESULT,
        'scale',
        (['out', 'retval'], POINTER(c_double), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the scale factor from start to the end of the sweep path'), 'propput'],
        HRESULT,
        'scale',
        (['in'], c_double, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the length of the sweep path'), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_double), 'Length')
    ),
]

################################################################
# code template for IAcadSweptSurface implementation
# class IAcadSweptSurface_Impl(object):
#     def _get(self):
#         'Specifies the rotation of the sweep profile'
#         #return profileRotationAngle
#     def _set(self, profileRotationAngle):
#         'Specifies the rotation of the sweep profile'
#     ProfileRotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether or not the profile curve twists and rotates along a 3D path'
#         #return bBank
#     def _set(self, bBank):
#         'Specifies whether or not the profile curve twists and rotates along a 3D path'
#     Bank = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the amount of rotation along the entire length of the sweep path'
#         #return TwistAngle
#     def _set(self, TwistAngle):
#         'Specifies the amount of rotation along the entire length of the sweep path'
#     Twist = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the scale factor from start to the end of the sweep path'
#         #return scale
#     def _set(self, scale):
#         'Specifies the scale factor from start to the end of the sweep path'
#     scale = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Length(self):
#         'Specifies the length of the sweep path'
#         #return Length
#
# values for enumeration 'AcSectionState'
acSectionStatePlane = 1
acSectionStateBoundary = 2
acSectionStateVolume = 4
AcSectionState = c_int  # enum
# values for enumeration 'AcSectionState2'
acSectionState2Plane = 1
acSectionState2Slice = 2
acSectionState2Boundary = 4
acSectionState2Volume = 8
AcSectionState2 = c_int  # enum

IAcadPopupMenuItem._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenu)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Specifies the content and formatting of menu items as they appear to the user'), 'propget'],
        HRESULT,
        'Label',
        (['out', 'retval'], POINTER(BSTR), 'bstrLabel')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Specifies the content and formatting of menu items as they appear to the user'), 'propput'],
        HRESULT,
        'Label',
        (['in'], BSTR, 'bstrLabel')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Specifies the tag string of the object'), 'propget'],
        HRESULT,
        'TagString',
        (['out', 'retval'], POINTER(BSTR), 'bstrTag')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Specifies the tag string of the object'), 'propput'],
        HRESULT,
        'TagString',
        (['in'], BSTR, 'bstrTag')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Enables the popup menu or toolbar item'), 'propget'],
        HRESULT,
        'Enable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Enables the popup menu or toolbar item'), 'propput'],
        HRESULT,
        'Enable',
        (['in'], VARIANT_BOOL, 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Specifies the check status for the popup menu item'), 'propget'],
        HRESULT,
        'Check',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Specifies the check status for the popup menu item'), 'propput'],
        HRESULT,
        'Check',
        (['in'], VARIANT_BOOL, 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743818), helpstring('Specifies type of a Leader, MenuGroup, PopupMenuItem, ToolbarItem, Polyline, or PolygonMesh object'), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(AcMenuItemType), 'itemType')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Gets the popup menu associated with a sub menu'), 'propget'],
        HRESULT,
        'SubMenu',
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenu)), 'pMenu')
    ),
    COMMETHOD(
        [dispid(1610743820), helpstring('Specifies the macro for the menu or toolbar item'), 'propget'],
        HRESULT,
        'Macro',
        (['out', 'retval'], POINTER(BSTR), 'bstrMacro')
    ),
    COMMETHOD(
        [dispid(1610743820), helpstring('Specifies the macro for the menu or toolbar item'), 'propput'],
        HRESULT,
        'Macro',
        (['in'], BSTR, 'bstrMacro')
    ),
    COMMETHOD(
        [dispid(1610743822), helpstring('Specifies the index of the menu or toolbar item'), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'nIndex')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Gets the text that the user sees displayed for the application or a menu item'), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'bstrCaption')
    ),
    COMMETHOD(
        [dispid(1610743824), helpstring('Specifies the help string for the toolbar, toolbar item, or menu item'), 'propget'],
        HRESULT,
        'HelpString',
        (['out', 'retval'], POINTER(BSTR), 'bstrHelp')
    ),
    COMMETHOD(
        [dispid(1610743824), helpstring('Specifies the help string for the toolbar, toolbar item, or menu item'), 'propput'],
        HRESULT,
        'HelpString',
        (['in'], BSTR, 'bstrHelp')
    ),
    COMMETHOD(
        [dispid(1610743826), helpstring('Deletes a specified object')],
        HRESULT,
        'Delete',
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the submenu level for the menu item'), 'propget'],
        HRESULT,
        'EndSubMenuLevel',
        (['out', 'retval'], POINTER(c_int), 'level')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the submenu level for the menu item'), 'propput'],
        HRESULT,
        'EndSubMenuLevel',
        (['in'], c_int, 'level')
    ),
]

################################################################
# code template for IAcadPopupMenuItem implementation
# class IAcadPopupMenuItem_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     def _get(self):
#         'Specifies the content and formatting of menu items as they appear to the user'
#         #return bstrLabel
#     def _set(self, bstrLabel):
#         'Specifies the content and formatting of menu items as they appear to the user'
#     Label = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the tag string of the object'
#         #return bstrTag
#     def _set(self, bstrTag):
#         'Specifies the tag string of the object'
#     TagString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Enables the popup menu or toolbar item'
#         #return bFlag
#     def _set(self, bFlag):
#         'Enables the popup menu or toolbar item'
#     Enable = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the check status for the popup menu item'
#         #return bFlag
#     def _set(self, bFlag):
#         'Specifies the check status for the popup menu item'
#     Check = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         'Specifies type of a Leader, MenuGroup, PopupMenuItem, ToolbarItem, Polyline, or PolygonMesh object'
#         #return itemType
#
#     @property
#     def SubMenu(self):
#         'Gets the popup menu associated with a sub menu'
#         #return pMenu
#
#     def _get(self):
#         'Specifies the macro for the menu or toolbar item'
#         #return bstrMacro
#     def _set(self, bstrMacro):
#         'Specifies the macro for the menu or toolbar item'
#     Macro = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Index(self):
#         'Specifies the index of the menu or toolbar item'
#         #return nIndex
#
#     @property
#     def Caption(self):
#         'Gets the text that the user sees displayed for the application or a menu item'
#         #return bstrCaption
#
#     def _get(self):
#         'Specifies the help string for the toolbar, toolbar item, or menu item'
#         #return bstrHelp
#     def _set(self, bstrHelp):
#         'Specifies the help string for the toolbar, toolbar item, or menu item'
#     HelpString = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         'Deletes a specified object'
#         #return 
#
#     def _get(self):
#         'Specifies the submenu level for the menu item'
#         #return level
#     def _set(self, level):
#         'Specifies the submenu level for the menu item'
#     EndSubMenuLevel = property(_get, _set, doc = _set.__doc__)
#


class IAcadDynamicBlockReferenceProperty(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """AutoCAD Dynamic Block Property Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{D309405C-6772-4C7E-88D2-DC6471A1A678}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadDynamicBlockReferenceProperty._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name for the property.'), 'propget'],
        HRESULT,
        'PropertyName',
        (['out', 'retval'], POINTER(BSTR), 'PropertyName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies whether the property is read-only.'), 'propget'],
        HRESULT,
        'ReadOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'ReadOnly')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies whether the property is showin in the user interface.'), 'propget'],
        HRESULT,
        'show',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'show')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the description for the property.'), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the allowed values for the property.'), 'propget'],
        HRESULT,
        'AllowedValues',
        (['out', 'retval'], POINTER(VARIANT), 'AllowedValues')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the current value for the property.'), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'Value')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the current value for the property.'), 'propput'],
        HRESULT,
        'Value',
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the current display units type for the property.'), 'propget'],
        HRESULT,
        'UnitsType',
        (
            ['out', 'retval'],
            POINTER(AcDynamicBlockReferencePropertyUnitsType),
            'Units',
        )
    ),
]

################################################################
# code template for IAcadDynamicBlockReferenceProperty implementation
# class IAcadDynamicBlockReferenceProperty_Impl(object):
#     @property
#     def PropertyName(self):
#         'Specifies the name for the property.'
#         #return PropertyName
#
#     @property
#     def ReadOnly(self):
#         'Specifies whether the property is read-only.'
#         #return ReadOnly
#
#     @property
#     def show(self):
#         'Specifies whether the property is showin in the user interface.'
#         #return show
#
#     @property
#     def Description(self):
#         'Specifies the description for the property.'
#         #return Description
#
#     @property
#     def AllowedValues(self):
#         'Specifies the allowed values for the property.'
#         #return AllowedValues
#
#     def _get(self):
#         'Specifies the current value for the property.'
#         #return Value
#     def _set(self, Value):
#         'Specifies the current value for the property.'
#     Value = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def UnitsType(self):
#         'Specifies the current display units type for the property.'
#         #return Units
#


class AcadRevolvedSurface(CoClass):
    """AutoCAD Revolved Surface Object"""
    _reg_clsid_ = GUID('{4C5D7C96-A595-4F13-889A-EB5E50F54C3B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadRevolvedSurface._com_interfaces_ = [IAcadRevolvedSurface]
AcadRevolvedSurface._outgoing_interfaces_ = [IAcadObjectEvents]


class IAcadLoftedSurface(IAcadSurface):
    """IAcadLoftedSurface Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{CC870E22-AB07-4868-9F94-2F6A0F2F380C}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'AcLoftedSurfaceNormalType'
acRuled = 0
acSmooth = 1
acFirstNormal = 2
acLastNormal = 3
acEndsNormal = 4
acAllNormal = 5
acUseDraftAngles = 6
AcLoftedSurfaceNormalType = c_int  # enum

IAcadLoftedSurface._methods_ = [
    COMMETHOD(
        [dispid(2), helpstring('Displays the number of cross-section curves used'), 'propget'],
        HRESULT,
        'NumCrossSections',
        (['out', 'retval'], POINTER(c_int), 'NumCrossSections')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Displays the number of guide paths used'), 'propget'],
        HRESULT,
        'NumGuidePaths',
        (['out', 'retval'], POINTER(c_int), 'NumGuidePaths')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies for which cross-section curves the surface is normal to the cross section'), 'propget'],
        HRESULT,
        'SurfaceNormals',
        (['out', 'retval'], POINTER(AcLoftedSurfaceNormalType), 'surfaceNormal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies for which cross-section curves the surface is normal to the cross section'), 'propput'],
        HRESULT,
        'SurfaceNormals',
        (['in'], AcLoftedSurfaceNormalType, 'surfaceNormal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the draft angle of the surface for the first cross section'), 'propget'],
        HRESULT,
        'StartDraftAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'StartDraftAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the draft angle of the surface for the first cross section'), 'propput'],
        HRESULT,
        'StartDraftAngle',
        (['in'], ACAD_ANGLE, 'StartDraftAngle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the draft magnitude of the surface for the first cross section'), 'propget'],
        HRESULT,
        'StartDraftMagnitude',
        (['out', 'retval'], POINTER(c_double), 'startDraftMag')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the draft magnitude of the surface for the first cross section'), 'propput'],
        HRESULT,
        'StartDraftMagnitude',
        (['in'], c_double, 'startDraftMag')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the draft angle of the surface for the last cross section'), 'propget'],
        HRESULT,
        'EndDraftAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'EndDraftAngle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the draft angle of the surface for the last cross section'), 'propput'],
        HRESULT,
        'EndDraftAngle',
        (['in'], ACAD_ANGLE, 'EndDraftAngle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the draft magnitude of the surface for the last cross section'), 'propget'],
        HRESULT,
        'EndDraftMagnitude',
        (['out', 'retval'], POINTER(c_double), 'endDraftMag')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the draft magnitude of the surface for the last cross section'), 'propput'],
        HRESULT,
        'EndDraftMagnitude',
        (['in'], c_double, 'endDraftMag')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specfies whether loft object is open or closed'), 'propget'],
        HRESULT,
        'Closed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bClosed')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specfies whether loft object is open or closed'), 'propput'],
        HRESULT,
        'Closed',
        (['in'], VARIANT_BOOL, 'bClosed')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies smooth magnitude of the surface for the first cross section'), 'propget'],
        HRESULT,
        'StartSmoothMagnitude',
        (['out', 'retval'], POINTER(c_double), 'startSmoothMag')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies smooth magnitude of the surface for the first cross section'), 'propput'],
        HRESULT,
        'StartSmoothMagnitude',
        (['in'], c_double, 'startSmoothMag')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies smooth magnitude of the surface for the last cross section'), 'propget'],
        HRESULT,
        'EndSmoothMagnitude',
        (['out', 'retval'], POINTER(c_double), 'endSmoothMag')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies smooth magnitude of the surface for the last cross section'), 'propput'],
        HRESULT,
        'EndSmoothMagnitude',
        (['in'], c_double, 'endSmoothMag')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies smooth continuity of the surface for the first cross section'), 'propget'],
        HRESULT,
        'StartSmoothContinuity',
        (['out', 'retval'], POINTER(c_int), 'StartSmoothContinuity')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies smooth continuity of the surface for the first cross section'), 'propput'],
        HRESULT,
        'StartSmoothContinuity',
        (['in'], c_int, 'StartSmoothContinuity')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies smooth continuity of the surface for the last cross section'), 'propget'],
        HRESULT,
        'EndSmoothContinuity',
        (['out', 'retval'], POINTER(c_int), 'EndSmoothContinuity')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies smooth continuity of the surface for the last cross section'), 'propput'],
        HRESULT,
        'EndSmoothContinuity',
        (['in'], c_int, 'EndSmoothContinuity')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specfies whether loft object is periodic.'), 'propget'],
        HRESULT,
        'Periodic',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bPeriodic')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specfies whether loft object is periodic.'), 'propput'],
        HRESULT,
        'Periodic',
        (['in'], VARIANT_BOOL, 'bPeriodic')
    ),
]

################################################################
# code template for IAcadLoftedSurface implementation
# class IAcadLoftedSurface_Impl(object):
#     @property
#     def NumCrossSections(self):
#         'Displays the number of cross-section curves used'
#         #return NumCrossSections
#
#     @property
#     def NumGuidePaths(self):
#         'Displays the number of guide paths used'
#         #return NumGuidePaths
#
#     def _get(self):
#         'Specifies for which cross-section curves the surface is normal to the cross section'
#         #return surfaceNormal
#     def _set(self, surfaceNormal):
#         'Specifies for which cross-section curves the surface is normal to the cross section'
#     SurfaceNormals = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the draft angle of the surface for the first cross section'
#         #return StartDraftAngle
#     def _set(self, StartDraftAngle):
#         'Specifies the draft angle of the surface for the first cross section'
#     StartDraftAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the draft magnitude of the surface for the first cross section'
#         #return startDraftMag
#     def _set(self, startDraftMag):
#         'Specifies the draft magnitude of the surface for the first cross section'
#     StartDraftMagnitude = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the draft angle of the surface for the last cross section'
#         #return EndDraftAngle
#     def _set(self, EndDraftAngle):
#         'Specifies the draft angle of the surface for the last cross section'
#     EndDraftAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the draft magnitude of the surface for the last cross section'
#         #return endDraftMag
#     def _set(self, endDraftMag):
#         'Specifies the draft magnitude of the surface for the last cross section'
#     EndDraftMagnitude = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specfies whether loft object is open or closed'
#         #return bClosed
#     def _set(self, bClosed):
#         'Specfies whether loft object is open or closed'
#     Closed = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies smooth magnitude of the surface for the first cross section'
#         #return startSmoothMag
#     def _set(self, startSmoothMag):
#         'Specifies smooth magnitude of the surface for the first cross section'
#     StartSmoothMagnitude = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies smooth magnitude of the surface for the last cross section'
#         #return endSmoothMag
#     def _set(self, endSmoothMag):
#         'Specifies smooth magnitude of the surface for the last cross section'
#     EndSmoothMagnitude = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies smooth continuity of the surface for the first cross section'
#         #return StartSmoothContinuity
#     def _set(self, StartSmoothContinuity):
#         'Specifies smooth continuity of the surface for the first cross section'
#     StartSmoothContinuity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies smooth continuity of the surface for the last cross section'
#         #return EndSmoothContinuity
#     def _set(self, EndSmoothContinuity):
#         'Specifies smooth continuity of the surface for the last cross section'
#     EndSmoothContinuity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specfies whether loft object is periodic.'
#         #return bPeriodic
#     def _set(self, bPeriodic):
#         'Specfies whether loft object is periodic.'
#     Periodic = property(_get, _set, doc = _set.__doc__)
#
# values for enumeration 'AcSectionSubItem'
acSectionSubItemkNone = 0
acSectionSubItemSectionLine = 1
acSectionSubItemSectionLineTop = 2
acSectionSubItemSectionLineBottom = 4
acSectionSubItemBackLine = 8
acSectionSubItemBackLineTop = 16
acSectionSubItemBackLineBottom = 32
acSectionSubItemVerticalLineTop = 64
acSectionSubItemVerticalLineBottom = 128
AcSectionSubItem = c_int  # enum

IAcad3DFace._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the 3D face'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'corners')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the 3D face'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'corners')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Determines whether 3DFace Edge 1 is visible or hidden'), 'propget'],
        HRESULT,
        'VisibilityEdge1',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Determines whether 3DFace Edge 1 is visible or hidden'), 'propput'],
        HRESULT,
        'VisibilityEdge1',
        (['in'], VARIANT_BOOL, 'visibility')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Determines whether 3DFace Edge 2 is visible or hidden'), 'propget'],
        HRESULT,
        'VisibilityEdge2',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Determines whether 3DFace Edge 2 is visible or hidden'), 'propput'],
        HRESULT,
        'VisibilityEdge2',
        (['in'], VARIANT_BOOL, 'visibility')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Determines whether 3DFace Edge 3 is visible or hidden'), 'propget'],
        HRESULT,
        'VisibilityEdge3',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Determines whether 3DFace Edge 3 is visible or hidden'), 'propput'],
        HRESULT,
        'VisibilityEdge3',
        (['in'], VARIANT_BOOL, 'visibility')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Determines whether 3DFace Edge 4 is visible or hidden'), 'propget'],
        HRESULT,
        'VisibilityEdge4',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Determines whether 3DFace Edge 4 is visible or hidden'), 'propput'],
        HRESULT,
        'VisibilityEdge4',
        (['in'], VARIANT_BOOL, 'visibility')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Gets the visibility status for the edge.')],
        HRESULT,
        'GetInvisibleEdge',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVisible')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Sets the visibility of the edge.')],
        HRESULT,
        'SetInvisibleEdge',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT_BOOL, 'State')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
]

################################################################
# code template for IAcad3DFace implementation
# class IAcad3DFace_Impl(object):
#     def _get(self):
#         'Specifies the current vertex of the 3D face'
#         #return corners
#     def _set(self, corners):
#         'Specifies the current vertex of the 3D face'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether 3DFace Edge 1 is visible or hidden'
#         #return visibility
#     def _set(self, visibility):
#         'Determines whether 3DFace Edge 1 is visible or hidden'
#     VisibilityEdge1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether 3DFace Edge 2 is visible or hidden'
#         #return visibility
#     def _set(self, visibility):
#         'Determines whether 3DFace Edge 2 is visible or hidden'
#     VisibilityEdge2 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether 3DFace Edge 3 is visible or hidden'
#         #return visibility
#     def _set(self, visibility):
#         'Determines whether 3DFace Edge 3 is visible or hidden'
#     VisibilityEdge3 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether 3DFace Edge 4 is visible or hidden'
#         #return visibility
#     def _set(self, visibility):
#         'Determines whether 3DFace Edge 4 is visible or hidden'
#     VisibilityEdge4 = property(_get, _set, doc = _set.__doc__)
#
#     def GetInvisibleEdge(self, Index):
#         'Gets the visibility status for the edge.'
#         #return bVisible
#
#     def SetInvisibleEdge(self, Index, State):
#         'Sets the visibility of the edge.'
#         #return 
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#

IAcadMenuGroups._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadMenuGroup)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pEnumVariant')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Loads a menu group from a menu file or the definition of a linetype from a library (LIN) file')],
        HRESULT,
        'Load',
        (['in'], BSTR, 'MenuFileName'),
        (['in', 'optional'], VARIANT, 'BaseMenu'),
        (['out', 'retval'], POINTER(POINTER(IAcadMenuGroup)), 'pMenuGroup')
    ),
]

################################################################
# code template for IAcadMenuGroups implementation
# class IAcadMenuGroups_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pEnumVariant
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return Count
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     def Load(self, MenuFileName, BaseMenu):
#         'Loads a menu group from a menu file or the definition of a linetype from a library (LIN) file'
#         #return pMenuGroup
#


class IAcadPreferencesFiles(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the Files tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{2F7C2478-9777-4359-BF58-57200E9C3200}')
    _idlflags_ = ['dual', 'oleautomation']


class IAcadPreferencesOutput(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """This object contains the options from the Output tab on the Options dialog"""
    _case_insensitive_ = True
    _iid_ = GUID('{15480E24-2072-4D1D-820C-29B8D5EF4B7B}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadPreferences._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Gets the PreferencesFiles object'), 'propget'],
        HRESULT,
        'Files',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesFiles)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the PreferencesDisplay object'), 'propget'],
        HRESULT,
        'Display',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesDisplay)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the PreferencesOpenSave object'), 'propget'],
        HRESULT,
        'OpenSave',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesOpenSave)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the PreferencesOutput object'), 'propget'],
        HRESULT,
        'Output',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesOutput)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Gets the PreferencesSystem object'), 'propget'],
        HRESULT,
        'System',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesSystem)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Gets the PreferencesUser object'), 'propget'],
        HRESULT,
        'User',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesUser)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Gets the PreferencesDrafting object'), 'propget'],
        HRESULT,
        'Drafting',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesDrafting)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Gets the PreferencesSelection object'), 'propget'],
        HRESULT,
        'Selection',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesSelection)), 'pObj')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Gets the PreferencesProfiles object'), 'propget'],
        HRESULT,
        'Profiles',
        (['out', 'retval'], POINTER(POINTER(IAcadPreferencesProfiles)), 'pObj')
    ),
]

################################################################
# code template for IAcadPreferences implementation
# class IAcadPreferences_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Files(self):
#         'Gets the PreferencesFiles object'
#         #return pObj
#
#     @property
#     def Display(self):
#         'Gets the PreferencesDisplay object'
#         #return pObj
#
#     @property
#     def OpenSave(self):
#         'Gets the PreferencesOpenSave object'
#         #return pObj
#
#     @property
#     def Output(self):
#         'Gets the PreferencesOutput object'
#         #return pObj
#
#     @property
#     def System(self):
#         'Gets the PreferencesSystem object'
#         #return pObj
#
#     @property
#     def User(self):
#         'Gets the PreferencesUser object'
#         #return pObj
#
#     @property
#     def Drafting(self):
#         'Gets the PreferencesDrafting object'
#         #return pObj
#
#     @property
#     def Selection(self):
#         'Gets the PreferencesSelection object'
#         #return pObj
#
#     @property
#     def Profiles(self):
#         'Gets the PreferencesProfiles object'
#         #return pObj
#

IAcadMenuGroup._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IAcadMenuGroups)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies type of a Leader, MenuGroup, PopupMenuItem, ToolbarItem, Polyline, or PolygonMesh object'), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(AcMenuGroupType), 'menuType')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the menu file name where the menu group is located'), 'propget'],
        HRESULT,
        'MenuFileName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Gets the PopupMenus collection'), 'propget'],
        HRESULT,
        'Menus',
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenus)), 'pMenus')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Gets the Toolbars collection'), 'propget'],
        HRESULT,
        'Toolbars',
        (['out', 'retval'], POINTER(POINTER(IAcadToolbars)), 'pToolbars')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Unloads the menu group or external reference')],
        HRESULT,
        'Unload',
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Saves the document or menu group')],
        HRESULT,
        'Save',
        (['in'], AcMenuFileType, 'MenuFileType')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Saves the document or menu group to a specified file')],
        HRESULT,
        'SaveAs',
        (['in'], BSTR, 'MenuFileName'),
        (['in'], AcMenuFileType, 'MenuFileType')
    ),
]

################################################################
# code template for IAcadMenuGroup implementation
# class IAcadMenuGroup_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     @property
#     def Name(self):
#         'Specifies the name of the object'
#         #return Name
#
#     @property
#     def Type(self):
#         'Specifies type of a Leader, MenuGroup, PopupMenuItem, ToolbarItem, Polyline, or PolygonMesh object'
#         #return menuType
#
#     @property
#     def MenuFileName(self):
#         'Gets the menu file name where the menu group is located'
#         #return Name
#
#     @property
#     def Menus(self):
#         'Gets the PopupMenus collection'
#         #return pMenus
#
#     @property
#     def Toolbars(self):
#         'Gets the Toolbars collection'
#         #return pToolbars
#
#     def Unload(self):
#         'Unloads the menu group or external reference'
#         #return 
#
#     def Save(self, MenuFileType):
#         'Saves the document or menu group'
#         #return 
#
#     def SaveAs(self, MenuFileName, MenuFileType):
#         'Saves the document or menu group to a specified file'
#         #return 
#


class AcadMenuBar(CoClass):
    """A collection of PopupMenu objects representing the current AutoCAD menu bar"""
    _reg_clsid_ = GUID('{6DE060AA-B166-4102-B7E6-6E881C641F2A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMenuBar._com_interfaces_ = [IAcadMenuBar]


class AcadSweptSurface(CoClass):
    """AutoCAD Swept Surface Object"""
    _reg_clsid_ = GUID('{35FB4B7D-05B1-4034-9018-8982D7507B9E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSweptSurface._com_interfaces_ = [IAcadSweptSurface]
AcadSweptSurface._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadPreferencesFiles._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(0), helpstring('Specifies the directories where AutoCAD searches for support files'), 'propput'],
        HRESULT,
        'SupportPath',
        (['in'], BSTR, 'orient')
    ),
    COMMETHOD(
        [dispid(0), helpstring('Specifies the directories where AutoCAD searches for support files'), 'propget'],
        HRESULT,
        'SupportPath',
        (['out', 'retval'], POINTER(BSTR), 'orient')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies the directory in which AutoCAD looks for ADI device drivers for the video display, pointing devices, printers, and plotters'), 'propput'],
        HRESULT,
        'DriversPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies the directory in which AutoCAD looks for ADI device drivers for the video display, pointing devices, printers, and plotters'), 'propget'],
        HRESULT,
        'DriversPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies the location of the AutoCAD menu file for the session'), 'propput'],
        HRESULT,
        'MenuFile',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies the location of the AutoCAD menu file for the session'), 'propget'],
        HRESULT,
        'MenuFile',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Specifies the location of the enterprise menu file'), 'propput'],
        HRESULT,
        'EnterpriseMenuFile',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Specifies the location of the enterprise menu file'), 'propget'],
        HRESULT,
        'EnterpriseMenuFile',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the search path for custom icons'), 'propput'],
        HRESULT,
        'CustomIconPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the search path for custom icons'), 'propget'],
        HRESULT,
        'CustomIconPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the location of the AutoCAD Help file'), 'propput'],
        HRESULT,
        'HelpFilePath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Specifies the location of the AutoCAD Help file'), 'propget'],
        HRESULT,
        'HelpFilePath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the default Internet address'), 'propput'],
        HRESULT,
        'DefaultInternetURL',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Specifies the default Internet address'), 'propget'],
        HRESULT,
        'DefaultInternetURL',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Gets the location of the configuration file used to store hardware device driver information'), 'propget'],
        HRESULT,
        'ConfigFile',
        (['out', 'retval'], POINTER(BSTR), 'ConfigFile')
    ),
    COMMETHOD(
        [dispid(1610743824), helpstring('Provides network administrators a current list of client license servers available to the network license manager program'), 'hidden', 'propget'],
        HRESULT,
        'LicenseServer',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the name of the text editor for the MTEXT command'), 'propput'],
        HRESULT,
        'TextEditor',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the name of the text editor for the MTEXT command'), 'propget'],
        HRESULT,
        'TextEditor',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the current dictionary to use for spell checking'), 'propput'],
        HRESULT,
        'MainDictionary',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the current dictionary to use for spell checking'), 'propget'],
        HRESULT,
        'MainDictionary',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies a custom dictionary to use if you have one'), 'propput'],
        HRESULT,
        'CustomDictionary',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Specifies a custom dictionary to use if you have one'), 'propget'],
        HRESULT,
        'CustomDictionary',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring("Specifies the location of the font file to use if AutoCAD can't locate the original font and an alternate font is not specified in the font mapping file"), 'propput'],
        HRESULT,
        'AltFontFile',
        (['in'], BSTR, 'fontFile')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring("Specifies the location of the font file to use if AutoCAD can't locate the original font and an alternate font is not specified in the font mapping file"), 'propget'],
        HRESULT,
        'AltFontFile',
        (['out', 'retval'], POINTER(BSTR), 'fontFile')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring("Specifies the location of the file that defines how AutoCAD should convert fonts it can't locate"), 'propput'],
        HRESULT,
        'FontFileMap',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring("Specifies the location of the file that defines how AutoCAD should convert fonts it can't locate"), 'propget'],
        HRESULT,
        'FontFileMap',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743835), helpstring('Specifies an alternate name to use for the temporary plot file name'), 'propput'],
        HRESULT,
        'PrintFile',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743835), helpstring('Specifies an alternate name to use for the temporary plot file name'), 'propget'],
        HRESULT,
        'PrintFile',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743837), helpstring('Specifies the application to use for print spooling'), 'propput'],
        HRESULT,
        'PrintSpoolExecutable',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743837), helpstring('Specifies the application to use for print spooling'), 'propget'],
        HRESULT,
        'PrintSpoolExecutable',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743839), helpstring('Specifies a name for a customized prolog section in the acad.psf file'), 'propput'],
        HRESULT,
        'PostScriptPrologFile',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743839), helpstring('Specifies a name for a customized prolog section in the acad.psf file'), 'propget'],
        HRESULT,
        'PostScriptPrologFile',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743841), helpstring('Specifies the directory for the print spool files. AutoCAD writes the plot to this location'), 'propput'],
        HRESULT,
        'PrintSpoolerPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743841), helpstring('Specifies the directory for the print spool files. AutoCAD writes the plot to this location'), 'propget'],
        HRESULT,
        'PrintSpoolerPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743843), helpstring('Specifies the path for the file that is created if you enable automatic save using the AutoSaveInterval property'), 'propput'],
        HRESULT,
        'AutoSavePath',
        (['in'], BSTR, 'AutoSavePath')
    ),
    COMMETHOD(
        [dispid(1610743843), helpstring('Specifies the path for the file that is created if you enable automatic save using the AutoSaveInterval property'), 'propget'],
        HRESULT,
        'AutoSavePath',
        (['out', 'retval'], POINTER(BSTR), 'AutoSavePath')
    ),
    COMMETHOD(
        [dispid(1610743845), helpstring('Specifies the path for the template files used by the start-up wizards'), 'propput'],
        HRESULT,
        'TemplateDwgPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743845), helpstring('Specifies the path for the template files used by the start-up wizards'), 'propget'],
        HRESULT,
        'TemplateDwgPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743847), helpstring('Specifies the location for the log file'), 'propput'],
        HRESULT,
        'LogFilePath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743847), helpstring('Specifies the location for the log file'), 'propget'],
        HRESULT,
        'LogFilePath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743849), helpstring('Specifies the directory AutoCAD uses to store temporary files'), 'propput'],
        HRESULT,
        'TempFilePath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743849), helpstring('Specifies the directory AutoCAD uses to store temporary files'), 'propget'],
        HRESULT,
        'TempFilePath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743851), helpstring('Specifies the location of external reference files'), 'propput'],
        HRESULT,
        'TempXrefPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743851), helpstring('Specifies the location of external reference files'), 'propget'],
        HRESULT,
        'TempXrefPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743853), helpstring('Specifies the directory in which AutoCAD searches for rendering texture maps'), 'propput'],
        HRESULT,
        'TextureMapPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743853), helpstring('Specifies the directory in which AutoCAD searches for rendering texture maps'), 'propget'],
        HRESULT,
        'TextureMapPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743855), helpstring('Specifies the path for an alternate menu to swap with the standard AutoCAD tablet menu'), 'propput'],
        HRESULT,
        'AltTabletMenuFile',
        (['in'], BSTR, 'MenuFile')
    ),
    COMMETHOD(
        [dispid(1610743855), helpstring('Specifies the path for an alternate menu to swap with the standard AutoCAD tablet menu'), 'propget'],
        HRESULT,
        'AltTabletMenuFile',
        (['out', 'retval'], POINTER(BSTR), 'MenuFile')
    ),
    COMMETHOD(
        [dispid(1610743857), helpstring('Sets the directory in which AutoCAD looks for external reference files')],
        HRESULT,
        'SetProjectFilePath',
        (['in'], BSTR, 'ProjectName'),
        (['in'], BSTR, 'ProjectFilePath')
    ),
    COMMETHOD(
        [dispid(1610743858), helpstring('Gets the directory in which AutoCAD looks for external reference files')],
        HRESULT,
        'GetProjectFilePath',
        (['in'], BSTR, 'ProjectName'),
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743859), helpstring('Specifies the location for printer configuration files'), 'propput'],
        HRESULT,
        'PrinterConfigPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743859), helpstring('Specifies the location for printer configuration files'), 'propget'],
        HRESULT,
        'PrinterConfigPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743861), helpstring('Specifies the location for printer description files'), 'propput'],
        HRESULT,
        'PrinterDescPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743861), helpstring('Specifies the location for printer description files'), 'propget'],
        HRESULT,
        'PrinterDescPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743863), helpstring('Specifies the location for printer style sheet files'), 'propput'],
        HRESULT,
        'PrinterStyleSheetPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743863), helpstring('Specifies the location for printer style sheet files'), 'propget'],
        HRESULT,
        'PrinterStyleSheetPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743865), helpstring('Specifies the path for the database workspace file'), 'propput'],
        HRESULT,
        'WorkspacePath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743865), helpstring('Specifies the path for the database workspace file'), 'propget'],
        HRESULT,
        'WorkspacePath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743867), helpstring('Specifies the location for ObjectARX applications'), 'hidden', 'propput'],
        HRESULT,
        'ObjectARXPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743867), helpstring('Specifies the location for ObjectARX applications'), 'hidden', 'propget'],
        HRESULT,
        'ObjectARXPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743869), helpstring('Sets the Colorbook path.'), 'propput'],
        HRESULT,
        'ColorBookPath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743869), helpstring('Sets the Colorbook path.'), 'propget'],
        HRESULT,
        'ColorBookPath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743871), helpstring('Sets the ToolPalette path.'), 'propput'],
        HRESULT,
        'ToolPalettePath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743871), helpstring('Sets the ToolPalette path.'), 'propget'],
        HRESULT,
        'ToolPalettePath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743873), helpstring('Sets the default template for the QNEW command.'), 'propput'],
        HRESULT,
        'QNewTemplateFile',
        (['in'], BSTR, 'templateFile')
    ),
    COMMETHOD(
        [dispid(1610743873), helpstring('Sets the default template for the QNEW command.'), 'propget'],
        HRESULT,
        'QNewTemplateFile',
        (['out', 'retval'], POINTER(BSTR), 'templateFile')
    ),
    COMMETHOD(
        [dispid(1610743875), helpstring('Sets the plot log file path.'), 'propput'],
        HRESULT,
        'PlotLogFilePath',
        (['in'], BSTR, 'templateFile')
    ),
    COMMETHOD(
        [dispid(1610743875), helpstring('Sets the plot log file path.'), 'propget'],
        HRESULT,
        'PlotLogFilePath',
        (['out', 'retval'], POINTER(BSTR), 'templateFile')
    ),
    COMMETHOD(
        [dispid(1610743877), helpstring('Sets the default template for Page Setup overrides.'), 'propput'],
        HRESULT,
        'PageSetupOverridesTemplateFile',
        (['in'], BSTR, 'templateFile')
    ),
    COMMETHOD(
        [dispid(1610743877), helpstring('Sets the default template for Page Setup overrides.'), 'propget'],
        HRESULT,
        'PageSetupOverridesTemplateFile',
        (['out', 'retval'], POINTER(BSTR), 'templateFile')
    ),
    COMMETHOD(
        [dispid(1610743879), helpstring('Sets the active Inventor project file'), 'propput'],
        HRESULT,
        'ActiveInvProject',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743879), helpstring('Sets the active Inventor project file'), 'propget'],
        HRESULT,
        'ActiveInvProject',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
]

################################################################
# code template for IAcadPreferencesFiles implementation
# class IAcadPreferencesFiles_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Specifies the directories where AutoCAD searches for support files'
#         #return orient
#     def _set(self, orient):
#         'Specifies the directories where AutoCAD searches for support files'
#     SupportPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the directory in which AutoCAD looks for ADI device drivers for the video display, pointing devices, printers, and plotters'
#         #return Path
#     def _set(self, Path):
#         'Specifies the directory in which AutoCAD looks for ADI device drivers for the video display, pointing devices, printers, and plotters'
#     DriversPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location of the AutoCAD menu file for the session'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location of the AutoCAD menu file for the session'
#     MenuFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location of the enterprise menu file'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location of the enterprise menu file'
#     EnterpriseMenuFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the search path for custom icons'
#         #return Path
#     def _set(self, Path):
#         'Specifies the search path for custom icons'
#     CustomIconPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location of the AutoCAD Help file'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location of the AutoCAD Help file'
#     HelpFilePath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the default Internet address'
#         #return Path
#     def _set(self, Path):
#         'Specifies the default Internet address'
#     DefaultInternetURL = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ConfigFile(self):
#         'Gets the location of the configuration file used to store hardware device driver information'
#         #return ConfigFile
#
#     @property
#     def LicenseServer(self):
#         'Provides network administrators a current list of client license servers available to the network license manager program'
#         #return Path
#
#     def _get(self):
#         'Specifies the name of the text editor for the MTEXT command'
#         #return Path
#     def _set(self, Path):
#         'Specifies the name of the text editor for the MTEXT command'
#     TextEditor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current dictionary to use for spell checking'
#         #return Path
#     def _set(self, Path):
#         'Specifies the current dictionary to use for spell checking'
#     MainDictionary = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies a custom dictionary to use if you have one'
#         #return Path
#     def _set(self, Path):
#         'Specifies a custom dictionary to use if you have one'
#     CustomDictionary = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies the location of the font file to use if AutoCAD can't locate the original font and an alternate font is not specified in the font mapping file"
#         #return fontFile
#     def _set(self, fontFile):
#         "Specifies the location of the font file to use if AutoCAD can't locate the original font and an alternate font is not specified in the font mapping file"
#     AltFontFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies the location of the file that defines how AutoCAD should convert fonts it can't locate"
#         #return Path
#     def _set(self, Path):
#         "Specifies the location of the file that defines how AutoCAD should convert fonts it can't locate"
#     FontFileMap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies an alternate name to use for the temporary plot file name'
#         #return Path
#     def _set(self, Path):
#         'Specifies an alternate name to use for the temporary plot file name'
#     PrintFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the application to use for print spooling'
#         #return Path
#     def _set(self, Path):
#         'Specifies the application to use for print spooling'
#     PrintSpoolExecutable = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies a name for a customized prolog section in the acad.psf file'
#         #return Path
#     def _set(self, Path):
#         'Specifies a name for a customized prolog section in the acad.psf file'
#     PostScriptPrologFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the directory for the print spool files. AutoCAD writes the plot to this location'
#         #return Path
#     def _set(self, Path):
#         'Specifies the directory for the print spool files. AutoCAD writes the plot to this location'
#     PrintSpoolerPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the path for the file that is created if you enable automatic save using the AutoSaveInterval property'
#         #return AutoSavePath
#     def _set(self, AutoSavePath):
#         'Specifies the path for the file that is created if you enable automatic save using the AutoSaveInterval property'
#     AutoSavePath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the path for the template files used by the start-up wizards'
#         #return Path
#     def _set(self, Path):
#         'Specifies the path for the template files used by the start-up wizards'
#     TemplateDwgPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location for the log file'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location for the log file'
#     LogFilePath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the directory AutoCAD uses to store temporary files'
#         #return Path
#     def _set(self, Path):
#         'Specifies the directory AutoCAD uses to store temporary files'
#     TempFilePath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location of external reference files'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location of external reference files'
#     TempXrefPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the directory in which AutoCAD searches for rendering texture maps'
#         #return Path
#     def _set(self, Path):
#         'Specifies the directory in which AutoCAD searches for rendering texture maps'
#     TextureMapPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the path for an alternate menu to swap with the standard AutoCAD tablet menu'
#         #return MenuFile
#     def _set(self, MenuFile):
#         'Specifies the path for an alternate menu to swap with the standard AutoCAD tablet menu'
#     AltTabletMenuFile = property(_get, _set, doc = _set.__doc__)
#
#     def SetProjectFilePath(self, ProjectName, ProjectFilePath):
#         'Sets the directory in which AutoCAD looks for external reference files'
#         #return 
#
#     def GetProjectFilePath(self, ProjectName):
#         'Gets the directory in which AutoCAD looks for external reference files'
#         #return Path
#
#     def _get(self):
#         'Specifies the location for printer configuration files'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location for printer configuration files'
#     PrinterConfigPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location for printer description files'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location for printer description files'
#     PrinterDescPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location for printer style sheet files'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location for printer style sheet files'
#     PrinterStyleSheetPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the path for the database workspace file'
#         #return Path
#     def _set(self, Path):
#         'Specifies the path for the database workspace file'
#     WorkspacePath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the location for ObjectARX applications'
#         #return Path
#     def _set(self, Path):
#         'Specifies the location for ObjectARX applications'
#     ObjectARXPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the Colorbook path.'
#         #return Path
#     def _set(self, Path):
#         'Sets the Colorbook path.'
#     ColorBookPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the ToolPalette path.'
#         #return Path
#     def _set(self, Path):
#         'Sets the ToolPalette path.'
#     ToolPalettePath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the default template for the QNEW command.'
#         #return templateFile
#     def _set(self, templateFile):
#         'Sets the default template for the QNEW command.'
#     QNewTemplateFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the plot log file path.'
#         #return templateFile
#     def _set(self, templateFile):
#         'Sets the plot log file path.'
#     PlotLogFilePath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the default template for Page Setup overrides.'
#         #return templateFile
#     def _set(self, templateFile):
#         'Sets the default template for Page Setup overrides.'
#     PageSetupOverridesTemplateFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the active Inventor project file'
#         #return Path
#     def _set(self, Path):
#         'Sets the active Inventor project file'
#     ActiveInvProject = property(_get, _set, doc = _set.__doc__)
#


class AcadPopupMenu(CoClass):
    """An AutoCAD cascading menu"""
    _reg_clsid_ = GUID('{67FE9EA9-C8DD-48EA-98BB-E285D06B9482}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPopupMenu._com_interfaces_ = [IAcadPopupMenu]

IAcadView._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the center of an arc, circle, ellipse, view, or viewport'), 'propget'],
        HRESULT,
        'Center',
        (['out', 'retval'], POINTER(VARIANT), 'Center')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the center of an arc, circle, ellipse, view, or viewport'), 'propput'],
        HRESULT,
        'Center',
        (['in'], VARIANT, 'Center')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the target point for the view or viewport'), 'propget'],
        HRESULT,
        'Target',
        (['out', 'retval'], POINTER(VARIANT), 'targetPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the target point for the view or viewport'), 'propput'],
        HRESULT,
        'Target',
        (['in'], VARIANT, 'targetPoint')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the viewing direction for a 3D visualization of the drawing'), 'propget'],
        HRESULT,
        'Direction',
        (['out', 'retval'], POINTER(VARIANT), 'dirVec')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the viewing direction for a 3D visualization of the drawing'), 'propput'],
        HRESULT,
        'Direction',
        (['in'], VARIANT, 'dirVec')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(7), helpstring('RReturns and sets the name of the category of the view.'), 'propget'],
        HRESULT,
        'CategoryName',
        (['out', 'retval'], POINTER(BSTR), 'category')
    ),
    COMMETHOD(
        [dispid(7), helpstring('RReturns and sets the name of the category of the view.'), 'propput'],
        HRESULT,
        'CategoryName',
        (['in'], BSTR, 'category')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns and sets the layout of the view.'), 'propget'],
        HRESULT,
        'LayoutId',
        (['out', 'retval'], POINTER(LONG_PTR), 'ObjectID')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns and sets the layout of the view.'), 'propput'],
        HRESULT,
        'LayoutId',
        (['in'], LONG_PTR, 'ObjectID')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Returns and sets the name of the layer state of the view.'), 'propget'],
        HRESULT,
        'LayerState',
        (['out', 'retval'], POINTER(BSTR), 'LayerState')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Returns and sets the name of the layer state of the view.'), 'propput'],
        HRESULT,
        'LayerState',
        (['in'], BSTR, 'LayerState')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies whether the view is associated with a paperspace viewport.'), 'propget'],
        HRESULT,
        'HasVpAssociation',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVpAssoc')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies whether the view is associated with a paperspace viewport.'), 'propput'],
        HRESULT,
        'HasVpAssociation',
        (['in'], VARIANT_BOOL, 'bVpAssoc')
    ),
]

################################################################
# code template for IAcadView implementation
# class IAcadView_Impl(object):
#     def _get(self):
#         'Specifies the center of an arc, circle, ellipse, view, or viewport'
#         #return Center
#     def _set(self, Center):
#         'Specifies the center of an arc, circle, ellipse, view, or viewport'
#     Center = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#         #return Height
#     def _set(self, Height):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the target point for the view or viewport'
#         #return targetPoint
#     def _set(self, targetPoint):
#         'Specifies the target point for the view or viewport'
#     Target = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the viewing direction for a 3D visualization of the drawing'
#         #return dirVec
#     def _set(self, dirVec):
#         'Specifies the viewing direction for a 3D visualization of the drawing'
#     Direction = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'RReturns and sets the name of the category of the view.'
#         #return category
#     def _set(self, category):
#         'RReturns and sets the name of the category of the view.'
#     CategoryName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the layout of the view.'
#         #return ObjectID
#     def _set(self, ObjectID):
#         'Returns and sets the layout of the view.'
#     LayoutId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns and sets the name of the layer state of the view.'
#         #return LayerState
#     def _set(self, LayerState):
#         'Returns and sets the name of the layer state of the view.'
#     LayerState = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether the view is associated with a paperspace viewport.'
#         #return bVpAssoc
#     def _set(self, bVpAssoc):
#         'Specifies whether the view is associated with a paperspace viewport.'
#     HasVpAssociation = property(_get, _set, doc = _set.__doc__)
#


class IAcadSection2(IAcadSection):
    """IAcadSection Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{EABBC4A4-3C8E-4866-A4C5-2E7D477DC11D}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSection._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies section object name'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies section object name'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies section object type'), 'propget'],
        HRESULT,
        'State',
        (['out', 'retval'], POINTER(AcSectionState), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies section object type'), 'propput'],
        HRESULT,
        'State',
        (['in'], AcSectionState, 'pVal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the viewing direction for the section plane'), 'propget'],
        HRESULT,
        'ViewingDirection',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the viewing direction for the section plane'), 'propput'],
        HRESULT,
        'ViewingDirection',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the vertical direction for the section plane'), 'propget'],
        HRESULT,
        'VerticalDirection',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the vertical direction for the section plane'), 'propput'],
        HRESULT,
        'VerticalDirection',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies normal for the section plane'), 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Turns live section on or off for this section object'), 'propget'],
        HRESULT,
        'LiveSectionEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Turns live section on or off for this section object'), 'propput'],
        HRESULT,
        'LiveSectionEnabled',
        (['in'], VARIANT_BOOL, 'pVal')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies transparency of section plane when shading is turned on'), 'propget'],
        HRESULT,
        'IndicatorTransparency',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies transparency of section plane when shading is turned on'), 'propput'],
        HRESULT,
        'IndicatorTransparency',
        (['in'], c_int, 'pVal')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies color of section plane when shading is turned on'), 'propget'],
        HRESULT,
        'IndicatorFillColor',
        (['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies color of section plane when shading is turned on'), 'propput'],
        HRESULT,
        'IndicatorFillColor',
        (['in'], POINTER(IAcadAcCmColor), 'pColor')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies elevation of section plane line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Elevation',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies elevation of section plane line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Elevation',
        (['in'], c_double, 'pVal')
    ),
    COMMETHOD(
        [dispid(10), helpstring("Specifies elevation of section plane top extents relative to the object's elevation"), 'propget'],
        HRESULT,
        'TopHeight',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(10), helpstring("Specifies elevation of section plane top extents relative to the object's elevation"), 'propput'],
        HRESULT,
        'TopHeight',
        (['in'], c_double, 'pVal')
    ),
    COMMETHOD(
        [dispid(11), helpstring("Specifies elevation of section plane bottom extents relative to the object's elevation"), 'propget'],
        HRESULT,
        'BottomHeight',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(11), helpstring("Specifies elevation of section plane bottom extents relative to the object's elevation"), 'propput'],
        HRESULT,
        'BottomHeight',
        (['in'], c_double, 'pVal')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Gets the number of vertices in the section line'), 'propget'],
        HRESULT,
        'NumVertices',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Gets the vertices in the section line'), 'propget'],
        HRESULT,
        'Vertices',
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Gets the vertices in the section line'), 'propput'],
        HRESULT,
        'Vertices',
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the co-ordinate of the specified vertex'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the co-ordinate of the specified vertex'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Adds a new vertex to the section line')],
        HRESULT,
        'AddVertex',
        (['in'], c_int, 'nIndex'),
        (['in'], VARIANT, 'val')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Removes a vertex in the section line')],
        HRESULT,
        'RemoveVertex',
        (['in'], c_int, 'nIndex')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Does hit test on section plane')],
        HRESULT,
        'HitTest',
        (['in'], VARIANT, 'varPtHit'),
        (['out'], POINTER(VARIANT_BOOL), 'pHit'),
        (['out'], POINTER(c_int), 'pSegmentIndex'),
        (['out'], POINTER(VARIANT), 'pPtOnSegment'),
        (['out'], POINTER(AcSectionSubItem), 'pSubItem')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Creates a jog on the section plane')],
        HRESULT,
        'CreateJog',
        (['in'], VARIANT, 'varPt')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Gets the section settings object'), 'propget'],
        HRESULT,
        'Settings',
        (['out', 'retval'], POINTER(POINTER(IAcadSectionSettings)), 'pUnk')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Generates 2D or 3D section geometry')],
        HRESULT,
        'GenerateSectionGeometry',
        (['in'], POINTER(IAcadEntity), 'pEntity'),
        (['out'], POINTER(VARIANT), 'pIntersectionBoundaryObjs'),
        (['out'], POINTER(VARIANT), 'pIntersectionFillObjs'),
        (['out'], POINTER(VARIANT), 'pBackgroudnObjs'),
        (['out'], POINTER(VARIANT), 'pForegroudObjs'),
        (['out'], POINTER(VARIANT), 'pCurveTangencyObjs')
    ),
]

################################################################
# code template for IAcadSection implementation
# class IAcadSection_Impl(object):
#     def _get(self):
#         'Specifies section object name'
#         #return pbstrName
#     def _set(self, pbstrName):
#         'Specifies section object name'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies section object type'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies section object type'
#     State = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the viewing direction for the section plane'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the viewing direction for the section plane'
#     ViewingDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the vertical direction for the section plane'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the vertical direction for the section plane'
#     VerticalDirection = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Normal(self):
#         'Specifies normal for the section plane'
#         #return pVal
#
#     def _get(self):
#         'Turns live section on or off for this section object'
#         #return pVal
#     def _set(self, pVal):
#         'Turns live section on or off for this section object'
#     LiveSectionEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies transparency of section plane when shading is turned on'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies transparency of section plane when shading is turned on'
#     IndicatorTransparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of section plane when shading is turned on'
#         #return pColor
#     def _set(self, pColor):
#         'Specifies color of section plane when shading is turned on'
#     IndicatorFillColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies elevation of section plane line'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies elevation of section plane line'
#     Elevation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies elevation of section plane top extents relative to the object's elevation"
#         #return pVal
#     def _set(self, pVal):
#         "Specifies elevation of section plane top extents relative to the object's elevation"
#     TopHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies elevation of section plane bottom extents relative to the object's elevation"
#         #return pVal
#     def _set(self, pVal):
#         "Specifies elevation of section plane bottom extents relative to the object's elevation"
#     BottomHeight = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NumVertices(self):
#         'Gets the number of vertices in the section line'
#         #return pVal
#
#     def _get(self):
#         'Gets the vertices in the section line'
#         #return pVal
#     def _set(self, pVal):
#         'Gets the vertices in the section line'
#     Vertices = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, Index):
#         'Specifies the co-ordinate of the specified vertex'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the co-ordinate of the specified vertex'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
#     def AddVertex(self, nIndex, val):
#         'Adds a new vertex to the section line'
#         #return 
#
#     def RemoveVertex(self, nIndex):
#         'Removes a vertex in the section line'
#         #return 
#
#     def HitTest(self, varPtHit):
#         'Does hit test on section plane'
#         #return pHit, pSegmentIndex, pPtOnSegment, pSubItem
#
#     def CreateJog(self, varPt):
#         'Creates a jog on the section plane'
#         #return 
#
#     @property
#     def Settings(self):
#         'Gets the section settings object'
#         #return pUnk
#
#     def GenerateSectionGeometry(self, pEntity):
#         'Generates 2D or 3D section geometry'
#         #return pIntersectionBoundaryObjs, pIntersectionFillObjs, pBackgroudnObjs, pForegroudObjs, pCurveTangencyObjs
#

IAcadSection2._methods_ = [
    COMMETHOD(
        [dispid(22), helpstring('Specifies section object type'), 'propget'],
        HRESULT,
        'State2',
        (['out', 'retval'], POINTER(AcSectionState2), 'pVal')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies section object type'), 'propput'],
        HRESULT,
        'State2',
        (['in'], AcSectionState2, 'pVal')
    ),
    COMMETHOD(
        [dispid(21), 'propget'],
        HRESULT,
        'SliceDepth',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(21), 'propput'],
        HRESULT,
        'SliceDepth',
        (['in'], c_double, 'pVal')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies off set of section plane'), 'propget'],
        HRESULT,
        'SectionPlaneOffset',
        (['out', 'retval'], POINTER(c_double), 'pVal')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies off set of section plane'), 'propput'],
        HRESULT,
        'SectionPlaneOffset',
        (['in'], c_double, 'pVal')
    ),
]

################################################################
# code template for IAcadSection2 implementation
# class IAcadSection2_Impl(object):
#     def _get(self):
#         'Specifies section object type'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies section object type'
#     State2 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pVal
#     def _set(self, pVal):
#         '-no docstring-'
#     SliceDepth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies off set of section plane'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies off set of section plane'
#     SectionPlaneOffset = property(_get, _set, doc = _set.__doc__)
#

IAcad3DPolyline._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the 3D Polyline'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Coordinates')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current vertex of the 3D Polyline'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Coordinates')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Appends a vertex to the 3dPolyline.')],
        HRESULT,
        'AppendVertex',
        (['in'], VARIANT, 'vertex')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Explodes the 3dPolyline.')],
        HRESULT,
        'Explode',
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the type of line or surface curve fitting'), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(Ac3DPolylineType), 'Type')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the type of line or surface curve fitting'), 'propput'],
        HRESULT,
        'Type',
        (['in'], Ac3DPolylineType, 'Type')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Determines whether the 3D polyline is open or closed'), 'propget'],
        HRESULT,
        'Closed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Determines whether the 3D polyline is open or closed'), 'propput'],
        HRESULT,
        'Closed',
        (['in'], VARIANT_BOOL, 'fClose')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the length of the 3D polyline'), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_double), 'Length')
    ),
]

################################################################
# code template for IAcad3DPolyline implementation
# class IAcad3DPolyline_Impl(object):
#     def _get(self):
#         'Specifies the current vertex of the 3D Polyline'
#         #return Coordinates
#     def _set(self, Coordinates):
#         'Specifies the current vertex of the 3D Polyline'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def AppendVertex(self, vertex):
#         'Appends a vertex to the 3dPolyline.'
#         #return 
#
#     def Explode(self):
#         'Explodes the 3dPolyline.'
#         #return pArrayObjs
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of line or surface curve fitting'
#         #return Type
#     def _set(self, Type):
#         'Specifies the type of line or surface curve fitting'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the 3D polyline is open or closed'
#         #return fClose
#     def _set(self, fClose):
#         'Determines whether the 3D polyline is open or closed'
#     Closed = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Length(self):
#         'Specifies the length of the 3D polyline'
#         #return Length
#

IAcadPolygonMesh._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the coordinates of the polygonmesh'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Coordinates')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the coordinates of the polygonmesh'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Coordinates')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies mesh style for M direction, Open or Closed'), 'propget'],
        HRESULT,
        'MClose',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bClose')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies mesh style for M direction, Open or Closed'), 'propput'],
        HRESULT,
        'MClose',
        (['in'], VARIANT_BOOL, 'bClose')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies mesh style for N direction, Open or Closed'), 'propget'],
        HRESULT,
        'NClose',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bClose')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies mesh style for N direction, Open or Closed'), 'propput'],
        HRESULT,
        'NClose',
        (['in'], VARIANT_BOOL, 'bClose')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies M density value of the polygonmesh; valid values 3-201'), 'propget'],
        HRESULT,
        'MDensity',
        (['out', 'retval'], POINTER(c_int), 'density')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies M density value of the polygonmesh; valid values 3-201'), 'propput'],
        HRESULT,
        'MDensity',
        (['in'], c_int, 'density')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies N density value of the polygonmesh; valid values 3-201'), 'propget'],
        HRESULT,
        'NDensity',
        (['out', 'retval'], POINTER(c_int), 'density')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies N density value of the polygonmesh; valid values 3-201'), 'propput'],
        HRESULT,
        'NDensity',
        (['in'], c_int, 'density')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the M Vertex number of the polygonmesh'), 'propget'],
        HRESULT,
        'MVertexCount',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the N Vertex number of the polygonmesh'), 'propget'],
        HRESULT,
        'NVertexCount',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the type of the polygonmesh'), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(AcPolymeshType), 'Type')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the type of the polygonmesh'), 'propput'],
        HRESULT,
        'Type',
        (['in'], AcPolymeshType, 'Type')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Appends a vertex to the polygonmesh')],
        HRESULT,
        'AppendVertex',
        (['in'], VARIANT, 'vertex')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Explodes the polygonmesh and returns the sub-entities as an array of object')],
        HRESULT,
        'Explode',
        (['out', 'retval'], POINTER(VARIANT), 'pArrayObjs')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
]

################################################################
# code template for IAcadPolygonMesh implementation
# class IAcadPolygonMesh_Impl(object):
#     def _get(self):
#         'Specifies the coordinates of the polygonmesh'
#         #return Coordinates
#     def _set(self, Coordinates):
#         'Specifies the coordinates of the polygonmesh'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies mesh style for M direction, Open or Closed'
#         #return bClose
#     def _set(self, bClose):
#         'Specifies mesh style for M direction, Open or Closed'
#     MClose = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies mesh style for N direction, Open or Closed'
#         #return bClose
#     def _set(self, bClose):
#         'Specifies mesh style for N direction, Open or Closed'
#     NClose = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies M density value of the polygonmesh; valid values 3-201'
#         #return density
#     def _set(self, density):
#         'Specifies M density value of the polygonmesh; valid values 3-201'
#     MDensity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies N density value of the polygonmesh; valid values 3-201'
#         #return density
#     def _set(self, density):
#         'Specifies N density value of the polygonmesh; valid values 3-201'
#     NDensity = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MVertexCount(self):
#         'Returns the M Vertex number of the polygonmesh'
#         #return Count
#
#     @property
#     def NVertexCount(self):
#         'Specifies the N Vertex number of the polygonmesh'
#         #return Count
#
#     def _get(self):
#         'Specifies the type of the polygonmesh'
#         #return Type
#     def _set(self, Type):
#         'Specifies the type of the polygonmesh'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def AppendVertex(self, vertex):
#         'Appends a vertex to the polygonmesh'
#         #return 
#
#     def Explode(self):
#         'Explodes the polygonmesh and returns the sub-entities as an array of object'
#         #return pArrayObjs
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#

IAcadEllipse._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the start point of the ellipse'), 'propget'],
        HRESULT,
        'StartPoint',
        (['out', 'retval'], POINTER(VARIANT), 'StartPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the center point of the ellipse or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'Center',
        (['out', 'retval'], POINTER(VARIANT), 'Center')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the center point of the ellipse or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'Center',
        (['in'], VARIANT, 'Center')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specify the X, Y, Z coordinate of the end point of the ellipse'), 'propget'],
        HRESULT,
        'EndPoint',
        (['out', 'retval'], POINTER(VARIANT), 'EndPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the major radius of the ellipse'), 'propget'],
        HRESULT,
        'MajorRadius',
        (['out', 'retval'], POINTER(c_double), 'MajorRadius')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the major radius of the ellipse'), 'propput'],
        HRESULT,
        'MajorRadius',
        (['in'], c_double, 'MajorRadius')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the minor radius of the ellipse'), 'propget'],
        HRESULT,
        'MinorRadius',
        (['out', 'retval'], POINTER(c_double), 'MinorRadius')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the minor radius of the ellipse'), 'propput'],
        HRESULT,
        'MinorRadius',
        (['in'], c_double, 'MinorRadius')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the radius ratio of the ellipse'), 'propget'],
        HRESULT,
        'RadiusRatio',
        (['out', 'retval'], POINTER(c_double), 'RadiusRatio')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the radius ratio of the ellipse'), 'propput'],
        HRESULT,
        'RadiusRatio',
        (['in'], c_double, 'RadiusRatio')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the start angle of the ellipse'), 'propget'],
        HRESULT,
        'StartAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'StartAngle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the start angle of the ellipse'), 'propput'],
        HRESULT,
        'StartAngle',
        (['in'], ACAD_ANGLE, 'StartAngle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the end angle of the ellipse'), 'propget'],
        HRESULT,
        'EndAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'EndAngle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the end angle of the ellipse'), 'propput'],
        HRESULT,
        'EndAngle',
        (['in'], ACAD_ANGLE, 'EndAngle')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the start parameter for an ellipse'), 'nonbrowsable', 'propget'],
        HRESULT,
        'StartParameter',
        (['out', 'retval'], POINTER(c_double), 'StartParameter')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the start parameter for an ellipse'), 'nonbrowsable', 'propput'],
        HRESULT,
        'StartParameter',
        (['in'], c_double, 'StartParameter')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the end parameter for an ellipse'), 'nonbrowsable', 'propget'],
        HRESULT,
        'EndParameter',
        (['out', 'retval'], POINTER(c_double), 'EndParameter')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the end parameter for an ellipse'), 'nonbrowsable', 'propput'],
        HRESULT,
        'EndParameter',
        (['in'], c_double, 'EndParameter')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the major axis of the ellipse'), 'propget'],
        HRESULT,
        'MajorAxis',
        (['out', 'retval'], POINTER(VARIANT), 'MajorAxis')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the major axis of the ellipse'), 'propput'],
        HRESULT,
        'MajorAxis',
        (['in'], VARIANT, 'MajorAxis')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the minor axis of the ellipse'), 'propget'],
        HRESULT,
        'MinorAxis',
        (['out', 'retval'], POINTER(VARIANT), 'MinorAxis')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the area of the ellipse'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(15), helpstring('method Offset')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
]

################################################################
# code template for IAcadEllipse implementation
# class IAcadEllipse_Impl(object):
#     @property
#     def StartPoint(self):
#         'Specify the X, Y, Z coordinate of the start point of the ellipse'
#         #return StartPoint
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the center point of the ellipse or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return Center
#     def _set(self, Center):
#         'Specify the X, Y, Z coordinate of the center point of the ellipse or use the Pick Point button to set X, Y, Z values simultaneously'
#     Center = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def EndPoint(self):
#         'Specify the X, Y, Z coordinate of the end point of the ellipse'
#         #return EndPoint
#
#     def _get(self):
#         'Specifies the major radius of the ellipse'
#         #return MajorRadius
#     def _set(self, MajorRadius):
#         'Specifies the major radius of the ellipse'
#     MajorRadius = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the minor radius of the ellipse'
#         #return MinorRadius
#     def _set(self, MinorRadius):
#         'Specifies the minor radius of the ellipse'
#     MinorRadius = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the radius ratio of the ellipse'
#         #return RadiusRatio
#     def _set(self, RadiusRatio):
#         'Specifies the radius ratio of the ellipse'
#     RadiusRatio = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the start angle of the ellipse'
#         #return StartAngle
#     def _set(self, StartAngle):
#         'Specifies the start angle of the ellipse'
#     StartAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the end angle of the ellipse'
#         #return EndAngle
#     def _set(self, EndAngle):
#         'Specifies the end angle of the ellipse'
#     EndAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the start parameter for an ellipse'
#         #return StartParameter
#     def _set(self, StartParameter):
#         'Specifies the start parameter for an ellipse'
#     StartParameter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the end parameter for an ellipse'
#         #return EndParameter
#     def _set(self, EndParameter):
#         'Specifies the end parameter for an ellipse'
#     EndParameter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the major axis of the ellipse'
#         #return MajorAxis
#     def _set(self, MajorAxis):
#         'Specifies the major axis of the ellipse'
#     MajorAxis = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MinorAxis(self):
#         'Specifies the minor axis of the ellipse'
#         #return MinorAxis
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Area(self):
#         'Specifies the area of the ellipse'
#         #return Area
#
#     def Offset(self, Distance):
#         'method Offset'
#         #return pOffsetCurves
#

IAcadLine._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the start point of the line or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'StartPoint',
        (['out', 'retval'], POINTER(VARIANT), 'StartPoint')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the start point of the line or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'StartPoint',
        (['in'], VARIANT, 'StartPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the end point of the line or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'EndPoint',
        (['out', 'retval'], POINTER(VARIANT), 'EndPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the end point of the line or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'EndPoint',
        (['in'], VARIANT, 'EndPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the thickness of the line'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the thickness of the line'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Creates a new line by offsetting the current line by a specified distance')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the delta of the line'), 'propget'],
        HRESULT,
        'Delta',
        (['out', 'retval'], POINTER(VARIANT), 'Delta')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the length of the line'), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_double), 'Length')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the angle of the line'), 'propget'],
        HRESULT,
        'Angle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle')
    ),
]

################################################################
# code template for IAcadLine implementation
# class IAcadLine_Impl(object):
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the start point of the line or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return StartPoint
#     def _set(self, StartPoint):
#         'Specify the X, Y, Z coordinate of the start point of the line or use the Pick Point button to set X, Y, Z values simultaneously'
#     StartPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the end point of the line or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return EndPoint
#     def _set(self, EndPoint):
#         'Specify the X, Y, Z coordinate of the end point of the line or use the Pick Point button to set X, Y, Z values simultaneously'
#     EndPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the line'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the line'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def Offset(self, Distance):
#         'Creates a new line by offsetting the current line by a specified distance'
#         #return pOffsetCurves
#
#     @property
#     def Delta(self):
#         'Specifies the delta of the line'
#         #return Delta
#
#     @property
#     def Length(self):
#         'Specifies the length of the line'
#         #return Length
#
#     @property
#     def Angle(self):
#         'Specifies the angle of the line'
#         #return Angle
#

IAcadModelSpace._methods_ = [
]

################################################################
# code template for IAcadModelSpace implementation
# class IAcadModelSpace_Impl(object):

IAcadUCSs._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadUCS)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], VARIANT, 'Origin'),
        (['in'], VARIANT, 'XAxisPoint'),
        (['in'], VARIANT, 'YAxisPoint'),
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadUCS)), 'pUCS')
    ),
]

################################################################
# code template for IAcadUCSs implementation
# class IAcadUCSs_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Origin, XAxisPoint, YAxisPoint, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pUCS
#

IAcadToolbars._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadToolbar)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pEnumVariant')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IAcadMenuGroup)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies if the toolbar button is large or small'), 'propget'],
        HRESULT,
        'LargeButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies if the toolbar button is large or small'), 'propput'],
        HRESULT,
        'LargeButtons',
        (['in'], VARIANT_BOOL, 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'ToolbarName'),
        (['out', 'retval'], POINTER(POINTER(IAcadToolbar)), 'pTlbar')
    ),
]

################################################################
# code template for IAcadToolbars implementation
# class IAcadToolbars_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pEnumVariant
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return Count
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     def _get(self):
#         'Specifies if the toolbar button is large or small'
#         #return bFlag
#     def _set(self, bFlag):
#         'Specifies if the toolbar button is large or small'
#     LargeButtons = property(_get, _set, doc = _set.__doc__)
#
#     def Add(self, ToolbarName):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pTlbar
#

IAcadPopupMenus._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenu)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pEnumVariant')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IAcadMenuGroup)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'MenuName'),
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenu)), 'pMenu')
    ),
    COMMETHOD(
        [dispid(1610743814), helpstring('Inserts a menu into the AutoCAD menu bar')],
        HRESULT,
        'InsertMenuInMenuBar',
        (['in'], BSTR, 'MenuName'),
        (['in'], VARIANT, 'Index')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Removes the popup menu, as specified from the collection, from the AutoCAD menu bar')],
        HRESULT,
        'RemoveMenuFromMenuBar',
        (['in'], VARIANT, 'Index')
    ),
]

################################################################
# code template for IAcadPopupMenus implementation
# class IAcadPopupMenus_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pEnumVariant
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return Count
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     def Add(self, MenuName):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pMenu
#
#     def InsertMenuInMenuBar(self, MenuName, Index):
#         'Inserts a menu into the AutoCAD menu bar'
#         #return 
#
#     def RemoveMenuFromMenuBar(self, Index):
#         'Removes the popup menu, as specified from the collection, from the AutoCAD menu bar'
#         #return 
#

IAcadUCS._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'), 'propget'],
        HRESULT,
        'Origin',
        (['out', 'retval'], POINTER(VARIANT), 'Origin')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'), 'propput'],
        HRESULT,
        'Origin',
        (['in'], VARIANT, 'Origin')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the X direction of the given UCS'), 'propget'],
        HRESULT,
        'XVector',
        (['out', 'retval'], POINTER(VARIANT), 'XVector')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the X direction of the given UCS'), 'propput'],
        HRESULT,
        'XVector',
        (['in'], VARIANT, 'XVector')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the Y direction of the given UCS'), 'propget'],
        HRESULT,
        'YVector',
        (['out', 'retval'], POINTER(VARIANT), 'YVector')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the Y direction of the given UCS'), 'propput'],
        HRESULT,
        'YVector',
        (['in'], VARIANT, 'YVector')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Gets the transformation matrix consisting of UCS coordinate system data')],
        HRESULT,
        'GetUCSMatrix',
        (['out', 'retval'], POINTER(VARIANT), 'transMatrix')
    ),
]

################################################################
# code template for IAcadUCS implementation
# class IAcadUCS_Impl(object):
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'
#         #return Origin
#     def _set(self, Origin):
#         'Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'
#     Origin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the X direction of the given UCS'
#         #return XVector
#     def _set(self, XVector):
#         'Specifies the X direction of the given UCS'
#     XVector = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the Y direction of the given UCS'
#         #return YVector
#     def _set(self, YVector):
#         'Specifies the Y direction of the given UCS'
#     YVector = property(_get, _set, doc = _set.__doc__)
#
#     def GetUCSMatrix(self):
#         'Gets the transformation matrix consisting of UCS coordinate system data'
#         #return transMatrix
#
# values for enumeration 'AcColorMethod'
acColorMethodByLayer = 192
acColorMethodByBlock = 193
acColorMethodByRGB = 194
acColorMethodByACI = 195
acColorMethodForeground = 197
AcColorMethod = c_int  # enum

IAcadAcCmColor._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the AcCmEntityColor of the true color.'), 'propput'],
        HRESULT,
        'EntityColor',
        (['in'], c_int, 'eColor')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the AcCmEntityColor of the true color.'), 'propget'],
        HRESULT,
        'EntityColor',
        (['out', 'retval'], POINTER(c_int), 'eColor')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name (if any) of the color.'), 'propget'],
        HRESULT,
        'ColorName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the book name (if any) of the color.'), 'propget'],
        HRESULT,
        'BookName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the color name and book name of the color.')],
        HRESULT,
        'SetNames',
        (['in'], BSTR, 'ColorName'),
        (['in'], BSTR, 'BookName')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Deletes the true color.')],
        HRESULT,
        'Delete',
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the red component of the true color.'), 'propget'],
        HRESULT,
        'Red',
        (['out', 'retval'], POINTER(c_int), 'Red')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the blue component of the true color.'), 'propget'],
        HRESULT,
        'Blue',
        (['out', 'retval'], POINTER(c_int), 'Blue')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the green component of the true color.'), 'propget'],
        HRESULT,
        'Green',
        (['out', 'retval'], POINTER(c_int), 'Green')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the RGB values of the true color.')],
        HRESULT,
        'SetRGB',
        (['in'], c_int, 'Red'),
        (['in'], c_int, 'Green'),
        (['in'], c_int, 'Blue')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the color method.'), 'propput'],
        HRESULT,
        'ColorMethod',
        (['in'], AcColorMethod, 'Flags')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the color method.'), 'propget'],
        HRESULT,
        'ColorMethod',
        (['out', 'retval'], POINTER(AcColorMethod), 'Flags')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the color index.'), 'propget'],
        HRESULT,
        'ColorIndex',
        (['out', 'retval'], POINTER(AcColor), 'color')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the color index.'), 'propput'],
        HRESULT,
        'ColorIndex',
        (['in'], AcColor, 'color')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Sets the color to a color from a color book.')],
        HRESULT,
        'SetColorBookColor',
        (['in'], BSTR, 'BookName'),
        (['in'], BSTR, 'ColorName')
    ),
]

################################################################
# code template for IAcadAcCmColor implementation
# class IAcadAcCmColor_Impl(object):
#     def _get(self):
#         'Specifies the AcCmEntityColor of the true color.'
#         #return eColor
#     def _set(self, eColor):
#         'Specifies the AcCmEntityColor of the true color.'
#     EntityColor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ColorName(self):
#         'Specifies the name (if any) of the color.'
#         #return Name
#
#     @property
#     def BookName(self):
#         'Specifies the book name (if any) of the color.'
#         #return Name
#
#     def SetNames(self, ColorName, BookName):
#         'Specifies the color name and book name of the color.'
#         #return 
#
#     def Delete(self):
#         'Deletes the true color.'
#         #return 
#
#     @property
#     def Red(self):
#         'Specifies the red component of the true color.'
#         #return Red
#
#     @property
#     def Blue(self):
#         'Specifies the blue component of the true color.'
#         #return Blue
#
#     @property
#     def Green(self):
#         'Specifies the green component of the true color.'
#         #return Green
#
#     def SetRGB(self, Red, Green, Blue):
#         'Specifies the RGB values of the true color.'
#         #return 
#
#     def _get(self):
#         'Specifies the color method.'
#         #return Flags
#     def _set(self, Flags):
#         'Specifies the color method.'
#     ColorMethod = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color index.'
#         #return color
#     def _set(self, color):
#         'Specifies the color index.'
#     ColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def SetColorBookColor(self, BookName, ColorName):
#         'Sets the color to a color from a color book.'
#         #return 
#

IAcadPopupMenu._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenuItem)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pEnumVariant')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743812), helpstring('Gets the parent of the object'), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'pParent')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'NameNoMnemonic',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1610743816), helpstring('Determines if the specified popup menu is the shortcut menu'), 'propget'],
        HRESULT,
        'ShortcutMenu',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Determines if the specified popup menu is on the menu bar'), 'propget'],
        HRESULT,
        'OnMenuBar',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFlag')
    ),
    COMMETHOD(
        [dispid(1610743818), helpstring('Adds a popup menu item to a popup menu')],
        HRESULT,
        'AddMenuItem',
        (['in'], VARIANT, 'Index'),
        (['in'], BSTR, 'Label'),
        (['in'], BSTR, 'Macro'),
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenuItem)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Adds a submenu to an existing menu')],
        HRESULT,
        'AddSubMenu',
        (['in'], VARIANT, 'Index'),
        (['in'], BSTR, 'Label'),
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenu)), 'pMenu')
    ),
    COMMETHOD(
        [dispid(1610743820), helpstring('Adds a separator to an existing menu or toolbar')],
        HRESULT,
        'AddSeparator',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadPopupMenuItem)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring('Inserts the popup menu into the AutoCAD menu bar at a specified location')],
        HRESULT,
        'InsertInMenuBar',
        (['in'], VARIANT, 'Index')
    ),
    COMMETHOD(
        [dispid(1610743822), helpstring('Removes the popup menu from the AutoCAD menu bar')],
        HRESULT,
        'RemoveFromMenuBar',
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('Specifies the tag string of the object'), 'propget'],
        HRESULT,
        'TagString',
        (['out', 'retval'], POINTER(BSTR), 'bstrTag')
    ),
]

################################################################
# code template for IAcadPopupMenu implementation
# class IAcadPopupMenu_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pEnumVariant
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return Count
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     @property
#     def Parent(self):
#         'Gets the parent of the object'
#         #return pParent
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NameNoMnemonic(self):
#         'Specifies the name of the object'
#         #return bstrName
#
#     @property
#     def ShortcutMenu(self):
#         'Determines if the specified popup menu is the shortcut menu'
#         #return bFlag
#
#     @property
#     def OnMenuBar(self):
#         'Determines if the specified popup menu is on the menu bar'
#         #return bFlag
#
#     def AddMenuItem(self, Index, Label, Macro):
#         'Adds a popup menu item to a popup menu'
#         #return pItem
#
#     def AddSubMenu(self, Index, Label):
#         'Adds a submenu to an existing menu'
#         #return pMenu
#
#     def AddSeparator(self, Index):
#         'Adds a separator to an existing menu or toolbar'
#         #return pItem
#
#     def InsertInMenuBar(self, Index):
#         'Inserts the popup menu into the AutoCAD menu bar at a specified location'
#         #return 
#
#     def RemoveFromMenuBar(self):
#         'Removes the popup menu from the AutoCAD menu bar'
#         #return 
#
#     @property
#     def TagString(self):
#         'Specifies the tag string of the object'
#         #return bstrTag
#
# values for enumeration 'AcEntityName'
ac3dFace = 1
ac3dPolyline = 2
ac3dSolid = 3
acArc = 4
acAttribute = 5
acAttributeReference = 6
acBlockReference = 7
acCircle = 8
acDimAligned = 9
acDimAngular = 10
acDimDiametric = 12
acDimOrdinate = 13
acDimRadial = 14
acDimRotated = 15
acEllipse = 16
acHatch = 17
acLeader = 18
acLine = 19
acMtext = 21
acPoint = 22
acPolyline = 23
acPolylineLight = 24
acPolymesh = 25
acRaster = 26
acRay = 27
acRegion = 28
acShape = 29
acSolid = 30
acSpline = 31
acText = 32
acTolerance = 33
acTrace = 34
acPViewport = 35
acXline = 36
acGroup = 37
acMInsertBlock = 38
acPolyfaceMesh = 39
acMLine = 40
acDim3PointAngular = 41
acExternalReference = 42
acTable = 43
acDimArcLength = 44
acDimRadialLarge = 45
acDwfUnderlay = 46
acDgnUnderlay = 47
acMLeader = 48
acSubDMesh = 49
acPdfUnderlay = 50
acNurbSurface = 51
AcEntityName = c_int  # enum


class AcadMLeaderStyle(CoClass):
    """AutoCAD MLeaderStyle Object"""
    _reg_clsid_ = GUID('{969B7B08-18C4-4AD7-B693-CF1F0D0030C9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMLeaderStyle._com_interfaces_ = [IAcadMLeaderStyle]
AcadMLeaderStyle._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcUnderlayLayerOverrideType'
acNoOverrides = 0
acApplied = 1
AcUnderlayLayerOverrideType = c_int  # enum

IAcadDictionaries._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadDictionary)), 'pDimStyle')
    ),
]

################################################################
# code template for IAcadDictionaries implementation
# class IAcadDictionaries_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pDimStyle
#


class IAcadSortentsTable(IAcadObject):
    """AutoCAD AcadSortentsTable Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{0961EABA-EA0E-42D7-9EE8-0E33971DF88D}')
    _idlflags_ = ['dual', 'oleautomation']


IAcadSortentsTable._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Moves objects to bottom of draw order.')],
        HRESULT,
        'MoveToBottom',
        (['in'], VARIANT, 'Objects')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Moves objects to top of draw order.')],
        HRESULT,
        'MoveToTop',
        (['in'], VARIANT, 'Objects')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Moves objects below target in draw order.')],
        HRESULT,
        'MoveBelow',
        (['in'], VARIANT, 'Objects'),
        (['in'], POINTER(IAcadEntity), 'Target')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Moves objects above target in draw order.')],
        HRESULT,
        'MoveAbove',
        (['in'], VARIANT, 'Objects'),
        (['in'], POINTER(IAcadEntity), 'Target')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Swaps draw order position for two objects.')],
        HRESULT,
        'SwapOrder',
        (['in'], POINTER(IAcadEntity), 'Object1'),
        (['in'], POINTER(IAcadEntity), 'Object2')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Returns the Block this Sortents Table belongs to.')],
        HRESULT,
        'Block',
        (['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pBlock')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Returns all objects in the block, sorted by draw order, bottommost first.')],
        HRESULT,
        'GetFullDrawOrder',
        (['out'], POINTER(VARIANT), 'Objects'),
        (['in'], VARIANT_BOOL, 'honorSortentsSysvar')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Returns specified objects, sorted by draw order, bottommost first.')],
        HRESULT,
        'GetRelativeDrawOrder',
        (['out'], POINTER(VARIANT), 'Objects'),
        (['in'], VARIANT_BOOL, 'honorSortentsSysvar')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Sets the relative draw order of the objects to the order specifed, bottommost first.')],
        HRESULT,
        'SetRelativeDrawOrder',
        (['in'], VARIANT, 'Objects')
    ),
]

################################################################
# code template for IAcadSortentsTable implementation
# class IAcadSortentsTable_Impl(object):
#     def MoveToBottom(self, Objects):
#         'Moves objects to bottom of draw order.'
#         #return 
#
#     def MoveToTop(self, Objects):
#         'Moves objects to top of draw order.'
#         #return 
#
#     def MoveBelow(self, Objects, Target):
#         'Moves objects below target in draw order.'
#         #return 
#
#     def MoveAbove(self, Objects, Target):
#         'Moves objects above target in draw order.'
#         #return 
#
#     def SwapOrder(self, Object1, Object2):
#         'Swaps draw order position for two objects.'
#         #return 
#
#     def Block(self):
#         'Returns the Block this Sortents Table belongs to.'
#         #return pBlock
#
#     def GetFullDrawOrder(self, honorSortentsSysvar):
#         'Returns all objects in the block, sorted by draw order, bottommost first.'
#         #return Objects
#
#     def GetRelativeDrawOrder(self, honorSortentsSysvar):
#         'Returns specified objects, sorted by draw order, bottommost first.'
#         #return Objects
#
#     def SetRelativeDrawOrder(self, Objects):
#         'Sets the relative draw order of the objects to the order specifed, bottommost first.'
#         #return 
#


class AcadHyperlinks(CoClass):
    """The collection of all hyperlinks for a given entity"""
    _reg_clsid_ = GUID('{61C3D6C7-2377-44AA-8BEE-679F5F33B43E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadHyperlinks._com_interfaces_ = [IAcadHyperlinks]


class AcadDictionary(CoClass):
    """A container object for storing and retrieving objects"""
    _reg_clsid_ = GUID('{93F9C422-E004-4A54-BF80-52413AC1AE4C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDictionary._com_interfaces_ = [IAcadDictionary]
AcadDictionary._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadLayers(CoClass):
    """The collection of all layers in the drawing"""
    _reg_clsid_ = GUID('{B1F3FF11-C736-4C8C-A40F-5A3CA4CE7DF3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLayers._com_interfaces_ = [IAcadLayers]
AcadLayers._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadLoftedSurface(CoClass):
    """AutoCAD Lofted Surface Object"""
    _reg_clsid_ = GUID('{14934A25-A209-430F-B4DC-A91B7F92AF4B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLoftedSurface._com_interfaces_ = [IAcadLoftedSurface]
AcadLoftedSurface._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadHyperlink(CoClass):
    """A URL and URL description"""
    _reg_clsid_ = GUID('{964DCDEF-9FFD-4F26-AFD3-C72A487DAF0E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadHyperlink._com_interfaces_ = [IAcadHyperlink]
# values for enumeration 'AcTableStyleOverrides'
acTitleSuppressed = 1
acHeaderSuppressed = 2
acFlowDirection = 3
acHorzCellMargin = 4
acVertCellMargin = 5
acTitleRowColor = 6
acHeaderRowColor = 7
acDataRowColor = 8
acTitleRowFillNone = 9
acHeaderRowFillNone = 10
acDataRowFillNone = 11
acTitleRowFillColor = 12
acHeaderRowFillColor = 13
acDataRowFillColor = 14
acTitleRowAlignment = 15
acHeaderRowAlignment = 16
acDataRowAlignment = 17
acTitleRowTextStyle = 18
acHeaderRowTextStyle = 19
acDataRowTextStyle = 20
acTitleRowTextHeight = 21
acHeaderRowTextHeight = 22
acDataRowTextHeight = 23
acTitleRowDataType = 24
acHeaderRowDataType = 25
acDataRowDataType = 26
acTitleHorzTopColor = 40
acTitleHorzInsideColor = 41
acTitleHorzBottomColor = 42
acTitleVertLeftColor = 43
acTitleVertInsideColor = 44
acTitleVertRightColor = 45
acHeaderHorzTopColor = 46
acHeaderHorzInsideColor = 47
acHeaderHorzBottomColor = 48
acHeaderVertLeftColor = 49
acHeaderVertInsideColor = 50
acHeaderVertRightColor = 51
acDataHorzTopColor = 52
acDataHorzInsideColor = 53
acDataHorzBottomColor = 54
acDataVertLeftColor = 55
acDataVertInsideColor = 56
acDataVertRightColor = 57
acTitleHorzTopLineWeight = 70
acTitleHorzInsideLineWeight = 71
acTitleHorzBottomLineWeight = 72
acTitleVertLeftLineWeight = 73
acTitleVertInsideLineWeight = 74
acTitleVertRightLineWeight = 75
acHeaderHorzTopLineWeight = 76
acHeaderHorzInsideLineWeight = 77
acHeaderHorzBottomLineWeight = 78
acHeaderVertLeftLineWeight = 79
acHeaderVertInsideLineWeight = 80
acHeaderVertRightLineWeight = 81
acDataHorzTopLineWeight = 82
acDataHorzInsideLineWeight = 83
acDataHorzBottomLineWeight = 84
acDataVertLeftLineWeight = 85
acDataVertInsideLineWeight = 86
acDataVertRightLineWeight = 87
acTitleHorzTopVisibility = 100
acTitleHorzInsideVisibility = 101
acTitleHorzBottomVisibility = 102
acTitleVertLeftVisibility = 103
acTitleVertInsideVisibility = 104
acTitleVertRightVisibility = 105
acHeaderHorzTopVisibility = 106
acHeaderHorzInsideVisibility = 107
acHeaderHorzBottomVisibility = 108
acHeaderVertLeftVisibility = 109
acHeaderVertInsideVisibility = 110
acHeaderVertRightVisibility = 111
acDataHorzTopVisibility = 112
acDataHorzInsideVisibility = 113
acDataHorzBottomVisibility = 114
acDataVertLeftVisibility = 115
acDataVertInsideVisibility = 116
acDataVertRightVisibility = 117
acCellAlign = 130
acCellBackgroundFillNone = 131
acCellBackgroundColor = 132
acCellContentColor = 133
acCellTextStyle = 134
acCellTextHeight = 135
acCellTopGridColor = 136
acCellRightGridColor = 137
acCellBottomGridColor = 138
acCellLeftGridColor = 139
acCellTopGridLineWeight = 140
acCellRightGridLineWeight = 141
acCellBottomGridLineWeight = 142
acCellLeftGridLineWeight = 143
acCellTopVisibility = 144
acCellRightVisibility = 145
acCellBottomVisibility = 146
acCellLeftVisibility = 147
acCellDataType = 148
AcTableStyleOverrides = c_int  # enum

IAcadLineType._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the linetype description'), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'bstrDes')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the linetype description'), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'bstrDes')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
]

################################################################
# code template for IAcadLineType implementation
# class IAcadLineType_Impl(object):
#     def _get(self):
#         'Specifies the linetype description'
#         #return bstrDes
#     def _set(self, bstrDes):
#         'Specifies the linetype description'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#


class AcadDimStyles(CoClass):
    """The collection of all dimension styles in the drawing"""
    _reg_clsid_ = GUID('{AA729017-8814-447E-9689-8938E9E80DCC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDimStyles._com_interfaces_ = [IAcadDimStyles]
AcadDimStyles._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadUnderlay._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current contrast value of the underlay'), 'propget'],
        HRESULT,
        'Contrast',
        (['out', 'retval'], POINTER(c_int), 'Contrast')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the current contrast value of the underlay'), 'propput'],
        HRESULT,
        'Contrast',
        (['in'], c_int, 'Contrast')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the current fade value of the underlay'), 'propget'],
        HRESULT,
        'Fade',
        (['out', 'retval'], POINTER(c_int), 'Fade')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the current fade value of the underlay'), 'propput'],
        HRESULT,
        'Fade',
        (['in'], c_int, 'Fade')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the origin coordinates (lower left corner) of the underlay'), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(VARIANT), 'pos')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the origin coordinates (lower left corner) of the underlay'), 'propput'],
        HRESULT,
        'Position',
        (['in'], VARIANT, 'pos')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the rotation angle of the underlay'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the rotation angle of the underlay'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width of the underlay'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the width of the underlay'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the height of the underlay'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the height of the underlay'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the name of the underlay file'), 'propget'],
        HRESULT,
        'UnderlayName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the name of the underlay file'), 'propput'],
        HRESULT,
        'UnderlayName',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the item of the underlay file'), 'propput'],
        HRESULT,
        'ItemName',
        (['in'], BSTR, 'sheetName')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the item of the underlay file'), 'propget'],
        HRESULT,
        'ItemName',
        (['out', 'retval'], POINTER(BSTR), 'sheetName')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Determines whether underlay is monochrome or not'), 'propget'],
        HRESULT,
        'Monochrome',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bMono')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Determines whether underlay is monochrome or not'), 'propput'],
        HRESULT,
        'Monochrome',
        (['in'], VARIANT_BOOL, 'bMono')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Determines whether the underlay colors are adjusted for the current background color'), 'propget'],
        HRESULT,
        'AdjustForBackground',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Value')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Determines whether the underlay colors are adjusted for the current background color'), 'propput'],
        HRESULT,
        'AdjustForBackground',
        (['in'], VARIANT_BOOL, 'Value')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Get/Set clipping boundary')],
        HRESULT,
        'ClipBoundary',
        (['in'], VARIANT, 'boundry')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the scale factor of the underlay'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the scale factor of the underlay'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'ScaleFactor')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the path to the underlay file'), 'propget'],
        HRESULT,
        'File',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the path to the underlay file'), 'propput'],
        HRESULT,
        'File',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Determines whether underlay is visible or not'), 'propget'],
        HRESULT,
        'UnderlayVisibility',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fVisible')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Determines whether underlay is visible or not'), 'propput'],
        HRESULT,
        'UnderlayVisibility',
        (['in'], VARIANT_BOOL, 'fVisible')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Enables or disables the clipping boundary of the underlay'), 'propget'],
        HRESULT,
        'ClippingEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'kClip')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Enables or disables the clipping boundary of the underlay'), 'propput'],
        HRESULT,
        'ClippingEnabled',
        (['in'], VARIANT_BOOL, 'kClip')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies layer override state for the underlay'), 'propget'],
        HRESULT,
        'UnderlayLayerOverrideApplied',
        (['out', 'retval'], POINTER(AcUnderlayLayerOverrideType), 'bOverride')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies layer override state for the underlay'), 'propput'],
        HRESULT,
        'UnderlayLayerOverrideApplied',
        (['in'], AcUnderlayLayerOverrideType, 'bOverride')
    ),
]

################################################################
# code template for IAcadUnderlay implementation
# class IAcadUnderlay_Impl(object):
#     def _get(self):
#         'Specifies the current contrast value of the underlay'
#         #return Contrast
#     def _set(self, Contrast):
#         'Specifies the current contrast value of the underlay'
#     Contrast = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the current fade value of the underlay'
#         #return Fade
#     def _set(self, Fade):
#         'Specifies the current fade value of the underlay'
#     Fade = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the origin coordinates (lower left corner) of the underlay'
#         #return pos
#     def _set(self, pos):
#         'Specifies the origin coordinates (lower left corner) of the underlay'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the underlay'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the underlay'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the underlay'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the underlay'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the underlay'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the underlay'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the underlay file'
#         #return Name
#     def _set(self, Name):
#         'Specifies the name of the underlay file'
#     UnderlayName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the item of the underlay file'
#         #return sheetName
#     def _set(self, sheetName):
#         'Specifies the item of the underlay file'
#     ItemName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether underlay is monochrome or not'
#         #return bMono
#     def _set(self, bMono):
#         'Determines whether underlay is monochrome or not'
#     Monochrome = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the underlay colors are adjusted for the current background color'
#         #return Value
#     def _set(self, Value):
#         'Determines whether the underlay colors are adjusted for the current background color'
#     AdjustForBackground = property(_get, _set, doc = _set.__doc__)
#
#     def ClipBoundary(self, boundry):
#         'Get/Set clipping boundary'
#         #return 
#
#     def _get(self):
#         'Specifies the scale factor of the underlay'
#         #return ScaleFactor
#     def _set(self, ScaleFactor):
#         'Specifies the scale factor of the underlay'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the path to the underlay file'
#         #return Name
#     def _set(self, Name):
#         'Specifies the path to the underlay file'
#     File = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether underlay is visible or not'
#         #return fVisible
#     def _set(self, fVisible):
#         'Determines whether underlay is visible or not'
#     UnderlayVisibility = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Enables or disables the clipping boundary of the underlay'
#         #return kClip
#     def _set(self, kClip):
#         'Enables or disables the clipping boundary of the underlay'
#     ClippingEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies layer override state for the underlay'
#         #return bOverride
#     def _set(self, bOverride):
#         'Specifies layer override state for the underlay'
#     UnderlayLayerOverrideApplied = property(_get, _set, doc = _set.__doc__)
#


class AcadDictionaries(CoClass):
    """The collection of all dictionaries in the drawing"""
    _reg_clsid_ = GUID('{F5A1F731-868F-429D-9FC7-A3BFCECE1B52}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDictionaries._com_interfaces_ = [IAcadDictionaries]
AcadDictionaries._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadDimAngular._methods_ = [
    COMMETHOD(
        [dispid(37), helpstring('Specifies the start point of the first extension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine1StartPoint',
        (['out', 'retval'], POINTER(VARIANT), 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Specifies the start point of the first extension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine1StartPoint',
        (['in'], VARIANT, 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Specifies the endpoint of the first extension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine1EndPoint',
        (['out', 'retval'], POINTER(VARIANT), 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Specifies the endpoint of the first extension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine1EndPoint',
        (['in'], VARIANT, 'xLine1Point')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Specifies the start point of the second extension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine2StartPoint',
        (['out', 'retval'], POINTER(VARIANT), 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Specifies the start point of the second extension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine2StartPoint',
        (['in'], VARIANT, 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Specifies the endpoint of the second extension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ExtLine2EndPoint',
        (['out', 'retval'], POINTER(VARIANT), 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(40), helpstring('Specifies the endpoint of the second extension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ExtLine2EndPoint',
        (['in'], VARIANT, 'xLine2Point')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Specifies the angle format (DIMAUNIT system variable)'), 'propget'],
        HRESULT,
        'AngleFormat',
        (['out', 'retval'], POINTER(AcAngleUnits), 'format')
    ),
    COMMETHOD(
        [dispid(41), helpstring('Specifies the angle format (DIMAUNIT system variable)'), 'propput'],
        HRESULT,
        'AngleFormat',
        (['in'], AcAngleUnits, 'format')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies color of the extension line (DIMCLRE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineExtend',
        (['out', 'retval'], POINTER(c_double), 'extend')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineExtend',
        (['in'], c_double, 'extend')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propget'],
        HRESULT,
        'HorizontalTextPosition',
        (['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies horizontal dimension text position (DIMJUST system variable)'), 'propput'],
        HRESULT,
        'HorizontalTextPosition',
        (['in'], AcDimHorizontalJustification, 'Type')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies lineweight for extension lines (DIMLWE system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'lweight')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propget'],
        HRESULT,
        'DimLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Sets suppression of first dimension line On or Off (DIMSD1 system variable)'), 'propput'],
        HRESULT,
        'DimLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propget'],
        HRESULT,
        'DimLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets suppression of second dimension line On or Off (DIMSD2 system variable)'), 'propput'],
        HRESULT,
        'DimLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Sets suppression of first extension line On or Off (DIMSE1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Suppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Sets suppression of second extension line On or Off (DIMSE2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Suppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propget'],
        HRESULT,
        'DimLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'), 'propput'],
        HRESULT,
        'DimLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'), 'propget'],
        HRESULT,
        'TextPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'), 'propput'],
        HRESULT,
        'TextPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propget'],
        HRESULT,
        'ExtensionLineOffset',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Specifies offset of extension lines from the origin points (DIMEXO system variable)'), 'propput'],
        HRESULT,
        'ExtensionLineOffset',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead1Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(62), helpstring('Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead1Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propget'],
        HRESULT,
        'Arrowhead2Type',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'), 'propput'],
        HRESULT,
        'Arrowhead2Type',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'bVal')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead1Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the block to use as the custom arrowhead for the first end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead1Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Arrowhead2Block',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for the second end of the dimension line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Arrowhead2Block',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propget'],
        HRESULT,
        'ExtLine1Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(81), helpstring('Specifies the linetype of the first extension line (DIMLTEX1 system variable)'), 'propput'],
        HRESULT,
        'ExtLine1Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propget'],
        HRESULT,
        'ExtLine2Linetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(82), helpstring('Specifies the linetype of the second extension line (DIMLTEX2 system variable)'), 'propput'],
        HRESULT,
        'ExtLine2Linetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(83), helpstring('Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLenSuppress',
        (['in'], VARIANT_BOOL, 'bFixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propget'],
        HRESULT,
        'ExtLineFixedLen',
        (['out', 'retval'], POINTER(c_double), 'FixedLen')
    ),
    COMMETHOD(
        [dispid(84), helpstring('Set extension line fixed length (DIMFXL system variable)'), 'propput'],
        HRESULT,
        'ExtLineFixedLen',
        (['in'], c_double, 'FixedLen')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propget'],
        HRESULT,
        'DimConstrForm',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propput'],
        HRESULT,
        'DimConstrForm',
        (['in'], VARIANT_BOOL, 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propget'],
        HRESULT,
        'DimConstrReference',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propput'],
        HRESULT,
        'DimConstrReference',
        (['in'], VARIANT_BOOL, 'bIsReference')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propget'],
        HRESULT,
        'DimConstrName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propput'],
        HRESULT,
        'DimConstrName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrExpression',
        (['out', 'retval'], POINTER(BSTR), 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrExpression',
        (['in'], BSTR, 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrValue',
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrValue',
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propget'],
        HRESULT,
        'DimConstrDesc',
        (['out', 'retval'], POINTER(BSTR), 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propput'],
        HRESULT,
        'DimConstrDesc',
        (['in'], BSTR, 'bstrDescription')
    ),
]

################################################################
# code template for IAcadDimAngular implementation
# class IAcadDimAngular_Impl(object):
#     def _get(self):
#         'Specifies the start point of the first extension line'
#         #return xLine1Point
#     def _set(self, xLine1Point):
#         'Specifies the start point of the first extension line'
#     ExtLine1StartPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the endpoint of the first extension line'
#         #return xLine1Point
#     def _set(self, xLine1Point):
#         'Specifies the endpoint of the first extension line'
#     ExtLine1EndPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the start point of the second extension line'
#         #return xLine2Point
#     def _set(self, xLine2Point):
#         'Specifies the start point of the second extension line'
#     ExtLine2StartPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the endpoint of the second extension line'
#         #return xLine2Point
#     def _set(self, xLine2Point):
#         'Specifies the endpoint of the second extension line'
#     ExtLine2EndPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the angle format (DIMAUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies the angle format (DIMAUNIT system variable)'
#     AngleFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the dimension lines (DIMCLRD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies the color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the extension line (DIMCLRE system variable)'
#     ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#         #return extend
#     def _set(self, extend):
#         'Specifies amount to extend extension line beyond the dimension line (DIMEXE system variable)'
#     ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies horizontal dimension text position (DIMJUST system variable)'
#     HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#         #return lweight
#     def _set(self, lweight):
#         'Specifies lineweight for extension lines (DIMLWE system variable)'
#     ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first dimension line On or Off (DIMSD1 system variable)'
#     DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second dimension line On or Off (DIMSD2 system variable)'
#     DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of first extension line On or Off (DIMSE1 system variable)'
#     ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets suppression of second extension line On or Off (DIMSE2 system variable)'
#     ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of dimension lines outside extension lines On or Off (DIMSOXD system variable)'
#     DimLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies number of precision decimal places displayed for angular dimension text (DIMADEC system variable)'
#     TextPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies offset of extension lines from the origin points (DIMEXO system variable)'
#     ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the first dimension arrowhead (DIMBLK1 system variable)'
#     Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the second dimension arrowhead (DIMBLK2 system variable)'
#     Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the first end of the dimension line'
#     Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for the second end of the dimension line'
#     Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the first extension line (DIMLTEX1 system variable)'
#     ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the second extension line (DIMLTEX2 system variable)'
#     ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#         #return bFixedLen
#     def _set(self, bFixedLen):
#         'Sets suppression of extension line fixed length On or Off (DIMFXLON system variable)'
#     ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Set extension line fixed length (DIMFXL system variable)'
#         #return FixedLen
#     def _set(self, FixedLen):
#         'Set extension line fixed length (DIMFXL system variable)'
#     ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the constraint type - Dynamic or Annotational'
#         #return bIsDynamic
#     def _set(self, bIsDynamic):
#         'Specifies the constraint type - Dynamic or Annotational'
#     DimConstrForm = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#         #return bIsReference
#     def _set(self, bIsReference):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#     DimConstrReference = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#     DimConstrName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the expression or the value of the constraint'
#         #return bstrExpression
#     def _set(self, bstrExpression):
#         'Specifies the expression or the value of the constraint'
#     DimConstrExpression = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the value of the constraint'
#         #return Value
#     def _set(self, Value):
#         'Specifies the value of the constraint'
#     DimConstrValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies description for constraint'
#         #return bstrDescription
#     def _set(self, bstrDescription):
#         'Specifies description for constraint'
#     DimConstrDesc = property(_get, _set, doc = _set.__doc__)
#


class AcadLineTypes(CoClass):
    """The collection of all linetypes in the drawing"""
    _reg_clsid_ = GUID('{0587D4C0-B89E-409F-ACEE-BD28B0FF0864}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLineTypes._com_interfaces_ = [IAcadLineTypes]
AcadLineTypes._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadMaterials(CoClass):
    _reg_clsid_ = GUID('{D436BEBA-2110-4F9A-80E7-5B90A73D74F4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMaterials._com_interfaces_ = [IAcadMaterials]
AcadMaterials._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadPlotConfiguration._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pName')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the plotter configuration name'), 'propget'],
        HRESULT,
        'ConfigName',
        (['out', 'retval'], POINTER(BSTR), 'pName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the plotter configuration name'), 'propput'],
        HRESULT,
        'ConfigName',
        (['in'], BSTR, 'pName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the paper size by name'), 'propget'],
        HRESULT,
        'CanonicalMediaName',
        (['out', 'retval'], POINTER(BSTR), 'pName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the paper size by name'), 'propput'],
        HRESULT,
        'CanonicalMediaName',
        (['in'], BSTR, 'pName')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the units for the display of layout or plot configuration properties'), 'propget'],
        HRESULT,
        'PaperUnits',
        (['out', 'retval'], POINTER(AcPlotPaperUnits), 'pPaperUnits')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the units for the display of layout or plot configuration properties'), 'propput'],
        HRESULT,
        'PaperUnits',
        (['in'], AcPlotPaperUnits, 'pPaperUnits')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies if the viewport borders are to be plotted'), 'propget'],
        HRESULT,
        'PlotViewportBorders',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pViewportBorders')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies if the viewport borders are to be plotted'), 'propput'],
        HRESULT,
        'PlotViewportBorders',
        (['in'], VARIANT_BOOL, 'pViewportBorders')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies if plot styles are to be used in the plot'), 'propget'],
        HRESULT,
        'ShowPlotStyles',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pStyles')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies if plot styles are to be used in the plot'), 'propput'],
        HRESULT,
        'ShowPlotStyles',
        (['in'], VARIANT_BOOL, 'pStyles')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the rotation angle for the layout or plot configuration'), 'propget'],
        HRESULT,
        'PlotRotation',
        (['out', 'retval'], POINTER(AcPlotRotation), 'pRotation')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the rotation angle for the layout or plot configuration'), 'propput'],
        HRESULT,
        'PlotRotation',
        (['in'], AcPlotRotation, 'pRotation')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the centering of the plot on the media'), 'propget'],
        HRESULT,
        'CenterPlot',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pCentered')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the centering of the plot on the media'), 'propput'],
        HRESULT,
        'CenterPlot',
        (['in'], VARIANT_BOOL, 'pCentered')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies if objects are to be hidden during a plot'), 'propget'],
        HRESULT,
        'PlotHidden',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pHidden')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies if objects are to be hidden during a plot'), 'propput'],
        HRESULT,
        'PlotHidden',
        (['in'], VARIANT_BOOL, 'pHidden')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the type of layout or plot configuration'), 'propget'],
        HRESULT,
        'PlotType',
        (['out', 'retval'], POINTER(AcPlotType), 'pType')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the type of layout or plot configuration'), 'propput'],
        HRESULT,
        'PlotType',
        (['in'], AcPlotType, 'pType')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the name of the view to plot'), 'propget'],
        HRESULT,
        'ViewToPlot',
        (['out', 'retval'], POINTER(BSTR), 'pName')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the name of the view to plot'), 'propput'],
        HRESULT,
        'ViewToPlot',
        (['in'], BSTR, 'pName')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies if the plot is to use a standard or custom scale'), 'propget'],
        HRESULT,
        'UseStandardScale',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pUseStdScale')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies if the plot is to use a standard or custom scale'), 'propput'],
        HRESULT,
        'UseStandardScale',
        (['in'], VARIANT_BOOL, 'pUseStdScale')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the standard scale for the layout, viewport, or plot configuration'), 'propget'],
        HRESULT,
        'StandardScale',
        (['out', 'retval'], POINTER(AcPlotScale), 'pStdScale')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the standard scale for the layout, viewport, or plot configuration'), 'propput'],
        HRESULT,
        'StandardScale',
        (['in'], AcPlotScale, 'pStdScale')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Gets the custom scale for a layout or plot configuration')],
        HRESULT,
        'GetCustomScale',
        (['out'], POINTER(c_double), 'Numerator'),
        (['out'], POINTER(c_double), 'Denominator')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Sets the custom scale for a layout or plot configuration')],
        HRESULT,
        'SetCustomScale',
        (['in'], c_double, 'Numerator'),
        (['in'], c_double, 'Denominator')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies if the lineweight is scaled with the rest of the geometry when a layout is printed'), 'propget'],
        HRESULT,
        'ScaleLineweights',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pScale')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies if the lineweight is scaled with the rest of the geometry when a layout is printed'), 'propput'],
        HRESULT,
        'ScaleLineweights',
        (['in'], VARIANT_BOOL, 'pScale')
    ),
    COMMETHOD(
        [dispid(21), helpstring("Specifies if objects plot with the lineweights they're assigned in the plot file, or with the lineweights in the drawing file"), 'propget'],
        HRESULT,
        'PlotWithLineweights',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pPlot')
    ),
    COMMETHOD(
        [dispid(21), helpstring("Specifies if objects plot with the lineweights they're assigned in the plot file, or with the lineweights in the drawing file"), 'propput'],
        HRESULT,
        'PlotWithLineweights',
        (['in'], VARIANT_BOOL, 'pPlot')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies if all geometry in paper space viewports is plotted first'), 'propget'],
        HRESULT,
        'PlotViewportsFirst',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pViewportsFirst')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies if all geometry in paper space viewports is plotted first'), 'propput'],
        HRESULT,
        'PlotViewportsFirst',
        (['in'], VARIANT_BOOL, 'pViewportsFirst')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies the style sheet for the layout or plot configuration'), 'propget'],
        HRESULT,
        'StyleSheet',
        (['out', 'retval'], POINTER(BSTR), 'pName')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies the style sheet for the layout or plot configuration'), 'propput'],
        HRESULT,
        'StyleSheet',
        (['in'], BSTR, 'pName')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Gets the margins for the layout or plot configuration')],
        HRESULT,
        'GetPaperMargins',
        (['out'], POINTER(VARIANT), 'LowerLeft'),
        (['out'], POINTER(VARIANT), 'UpperRight')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Gets the width and height of the configured paper')],
        HRESULT,
        'GetPaperSize',
        (['out'], POINTER(c_double), 'Width'),
        (['out'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'), 'propget'],
        HRESULT,
        'PlotOrigin',
        (['out', 'retval'], POINTER(VARIANT), 'pOrigin')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'), 'propput'],
        HRESULT,
        'PlotOrigin',
        (['in'], VARIANT, 'pOrigin')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Gets the coordinates that define the portion of the layout to plot')],
        HRESULT,
        'GetWindowToPlot',
        (['out'], POINTER(VARIANT), 'LowerLeft'),
        (['out'], POINTER(VARIANT), 'UpperRight')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Sets the coordinates that define the portion of the layout to plot')],
        HRESULT,
        'SetWindowToPlot',
        (['in'], VARIANT, 'LowerLeft'),
        (['in'], VARIANT, 'UpperRight')
    ),
    COMMETHOD(
        [dispid(33), helpstring("Specifies if objects plot with the configuration they're assigned in the plot file, or with the configuration in the drawing file"), 'propget'],
        HRESULT,
        'PlotWithPlotStyles',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pStyles')
    ),
    COMMETHOD(
        [dispid(33), helpstring("Specifies if objects plot with the configuration they're assigned in the plot file, or with the configuration in the drawing file"), 'propput'],
        HRESULT,
        'PlotWithPlotStyles',
        (['in'], VARIANT_BOOL, 'pStyles')
    ),
    COMMETHOD(
        [dispid(34), helpstring('Specifies if the plot configuration applies only to model space or to all layouts'), 'propget'],
        HRESULT,
        'ModelType',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pType')
    ),
    COMMETHOD(
        [dispid(35), helpstring('Copies the settings from the given plotconfiguration')],
        HRESULT,
        'CopyFrom',
        (['in'], POINTER(IAcadPlotConfiguration), 'pPlotConfig')
    ),
    COMMETHOD(
        [dispid(36), helpstring('Gets all available canonical media names for the specified plot device.')],
        HRESULT,
        'GetCanonicalMediaNames',
        (['out', 'retval'], POINTER(VARIANT), 'pNames')
    ),
    COMMETHOD(
        [dispid(37), helpstring('Gets all available plot device names.')],
        HRESULT,
        'GetPlotDeviceNames',
        (['out', 'retval'], POINTER(VARIANT), 'pNames')
    ),
    COMMETHOD(
        [dispid(38), helpstring('Gets all available plot style table names.')],
        HRESULT,
        'GetPlotStyleTableNames',
        (['out', 'retval'], POINTER(VARIANT), 'pNames')
    ),
    COMMETHOD(
        [dispid(39), helpstring('Updates the plot, canonical media, and plot style table information to reflect the current system state.')],
        HRESULT,
        'RefreshPlotDeviceInfo',
    ),
    COMMETHOD(
        [dispid(40), helpstring('Gets the localized version of the canonical media name.')],
        HRESULT,
        'GetLocaleMediaName',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(BSTR), 'pLocalName')
    ),
]

################################################################
# code template for IAcadPlotConfiguration implementation
# class IAcadPlotConfiguration_Impl(object):
#     def _get(self):
#         'Specifies the name of the object'
#         #return pName
#     def _set(self, pName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plotter configuration name'
#         #return pName
#     def _set(self, pName):
#         'Specifies the plotter configuration name'
#     ConfigName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the paper size by name'
#         #return pName
#     def _set(self, pName):
#         'Specifies the paper size by name'
#     CanonicalMediaName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the units for the display of layout or plot configuration properties'
#         #return pPaperUnits
#     def _set(self, pPaperUnits):
#         'Specifies the units for the display of layout or plot configuration properties'
#     PaperUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the viewport borders are to be plotted'
#         #return pViewportBorders
#     def _set(self, pViewportBorders):
#         'Specifies if the viewport borders are to be plotted'
#     PlotViewportBorders = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if plot styles are to be used in the plot'
#         #return pStyles
#     def _set(self, pStyles):
#         'Specifies if plot styles are to be used in the plot'
#     ShowPlotStyles = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle for the layout or plot configuration'
#         #return pRotation
#     def _set(self, pRotation):
#         'Specifies the rotation angle for the layout or plot configuration'
#     PlotRotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the centering of the plot on the media'
#         #return pCentered
#     def _set(self, pCentered):
#         'Specifies the centering of the plot on the media'
#     CenterPlot = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if objects are to be hidden during a plot'
#         #return pHidden
#     def _set(self, pHidden):
#         'Specifies if objects are to be hidden during a plot'
#     PlotHidden = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of layout or plot configuration'
#         #return pType
#     def _set(self, pType):
#         'Specifies the type of layout or plot configuration'
#     PlotType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the view to plot'
#         #return pName
#     def _set(self, pName):
#         'Specifies the name of the view to plot'
#     ViewToPlot = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the plot is to use a standard or custom scale'
#         #return pUseStdScale
#     def _set(self, pUseStdScale):
#         'Specifies if the plot is to use a standard or custom scale'
#     UseStandardScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the standard scale for the layout, viewport, or plot configuration'
#         #return pStdScale
#     def _set(self, pStdScale):
#         'Specifies the standard scale for the layout, viewport, or plot configuration'
#     StandardScale = property(_get, _set, doc = _set.__doc__)
#
#     def GetCustomScale(self):
#         'Gets the custom scale for a layout or plot configuration'
#         #return Numerator, Denominator
#
#     def SetCustomScale(self, Numerator, Denominator):
#         'Sets the custom scale for a layout or plot configuration'
#         #return 
#
#     def _get(self):
#         'Specifies if the lineweight is scaled with the rest of the geometry when a layout is printed'
#         #return pScale
#     def _set(self, pScale):
#         'Specifies if the lineweight is scaled with the rest of the geometry when a layout is printed'
#     ScaleLineweights = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies if objects plot with the lineweights they're assigned in the plot file, or with the lineweights in the drawing file"
#         #return pPlot
#     def _set(self, pPlot):
#         "Specifies if objects plot with the lineweights they're assigned in the plot file, or with the lineweights in the drawing file"
#     PlotWithLineweights = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if all geometry in paper space viewports is plotted first'
#         #return pViewportsFirst
#     def _set(self, pViewportsFirst):
#         'Specifies if all geometry in paper space viewports is plotted first'
#     PlotViewportsFirst = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style sheet for the layout or plot configuration'
#         #return pName
#     def _set(self, pName):
#         'Specifies the style sheet for the layout or plot configuration'
#     StyleSheet = property(_get, _set, doc = _set.__doc__)
#
#     def GetPaperMargins(self):
#         'Gets the margins for the layout or plot configuration'
#         #return LowerLeft, UpperRight
#
#     def GetPaperSize(self):
#         'Gets the width and height of the configured paper'
#         #return Width, Height
#
#     def _get(self):
#         'Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'
#         #return pOrigin
#     def _set(self, pOrigin):
#         'Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates'
#     PlotOrigin = property(_get, _set, doc = _set.__doc__)
#
#     def GetWindowToPlot(self):
#         'Gets the coordinates that define the portion of the layout to plot'
#         #return LowerLeft, UpperRight
#
#     def SetWindowToPlot(self, LowerLeft, UpperRight):
#         'Sets the coordinates that define the portion of the layout to plot'
#         #return 
#
#     def _get(self):
#         "Specifies if objects plot with the configuration they're assigned in the plot file, or with the configuration in the drawing file"
#         #return pStyles
#     def _set(self, pStyles):
#         "Specifies if objects plot with the configuration they're assigned in the plot file, or with the configuration in the drawing file"
#     PlotWithPlotStyles = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ModelType(self):
#         'Specifies if the plot configuration applies only to model space or to all layouts'
#         #return pType
#
#     def CopyFrom(self, pPlotConfig):
#         'Copies the settings from the given plotconfiguration'
#         #return 
#
#     def GetCanonicalMediaNames(self):
#         'Gets all available canonical media names for the specified plot device.'
#         #return pNames
#
#     def GetPlotDeviceNames(self):
#         'Gets all available plot device names.'
#         #return pNames
#
#     def GetPlotStyleTableNames(self):
#         'Gets all available plot style table names.'
#         #return pNames
#
#     def RefreshPlotDeviceInfo(self):
#         'Updates the plot, canonical media, and plot style table information to reflect the current system state.'
#         #return 
#
#     def GetLocaleMediaName(self, Name):
#         'Gets the localized version of the canonical media name.'
#         #return pLocalName
#

IAcadLayout._methods_ = [
    COMMETHOD(
        [dispid(48), helpstring('Gets the block associated with the layout'), 'propget'],
        HRESULT,
        'Block',
        (['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pBlock')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Specifies the tab order of a layout'), 'propget'],
        HRESULT,
        'TabOrder',
        (['out', 'retval'], POINTER(c_int), 'pOrder')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Specifies the tab order of a layout'), 'propput'],
        HRESULT,
        'TabOrder',
        (['in'], c_int, 'pOrder')
    ),
]

################################################################
# code template for IAcadLayout implementation
# class IAcadLayout_Impl(object):
#     @property
#     def Block(self):
#         'Gets the block associated with the layout'
#         #return pBlock
#
#     def _get(self):
#         'Specifies the tab order of a layout'
#         #return pOrder
#     def _set(self, pOrder):
#         'Specifies the tab order of a layout'
#     TabOrder = property(_get, _set, doc = _set.__doc__)
#


class AcadTextStyles(CoClass):
    """The collection of all text styles in the drawing"""
    _reg_clsid_ = GUID('{C8E418AC-0123-4DF1-B824-0ABC49264414}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadTextStyles._com_interfaces_ = [IAcadTextStyles]
AcadTextStyles._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadUCSs(CoClass):
    """The collection of all user coordinate systems (UCSs) in the drawing"""
    _reg_clsid_ = GUID('{4F7A6E2D-F382-42A4-8AF7-E9C3C834102D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadUCSs._com_interfaces_ = [IAcadUCSs]
AcadUCSs._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadRegisteredApplications(CoClass):
    """The collection of all registered applications in the drawing"""
    _reg_clsid_ = GUID('{3F603B1F-39BF-4B4D-9087-A42907B79B30}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadRegisteredApplications._com_interfaces_ = [IAcadRegisteredApplications]
AcadRegisteredApplications._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadViews(CoClass):
    """The collection of all views in the drawing"""
    _reg_clsid_ = GUID('{998E1D3B-E905-462B-96E6-5419C3C940F2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadViews._com_interfaces_ = [IAcadViews]
AcadViews._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadViewports._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadViewport)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadViewport)), 'pRegApp')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Deletes a viewport configuration')],
        HRESULT,
        'DeleteConfiguration',
        (['in'], BSTR, 'Name')
    ),
]

################################################################
# code template for IAcadViewports implementation
# class IAcadViewports_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pRegApp
#
#     def DeleteConfiguration(self, Name):
#         'Deletes a viewport configuration'
#         #return 
#


class AcadViewports(CoClass):
    """The collection of all viewports in the drawing"""
    _reg_clsid_ = GUID('{0F11EBC7-5D82-4F89-9554-2875939D147A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadViewports._com_interfaces_ = [IAcadViewports]
AcadViewports._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadDimRadial._methods_ = [
    COMMETHOD(
        [dispid(42), helpstring('Specifies the length of the leader on the diameter or radius dimension'), 'nonbrowsable', 'propput'],
        HRESULT,
        'LeaderLength',
        (['in'], c_double, 'rhs')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propget'],
        HRESULT,
        'AltUnits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'), 'propput'],
        HRESULT,
        'AltUnits',
        (['in'], VARIANT_BOOL, 'bAlternate')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propget'],
        HRESULT,
        'AltUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'precision')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies decimal place precision for alternate units (DIMALTD system variable)'), 'propput'],
        HRESULT,
        'AltUnitsPrecision',
        (['in'], AcDimPrecision, 'precision')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propget'],
        HRESULT,
        'AltUnitsScale',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies scale factor for alternate units (DIMALTF system variable)'), 'propput'],
        HRESULT,
        'AltUnitsScale',
        (['in'], ACAD_NOUNITS, 'scale')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propget'],
        HRESULT,
        'AltRoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies distance rounding value for alternate units (DIMALTRND system variable)'), 'propput'],
        HRESULT,
        'AltRoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propget'],
        HRESULT,
        'AltTolerancePrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Distance')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'), 'propput'],
        HRESULT,
        'AltTolerancePrecision',
        (['in'], AcDimPrecision, 'Distance')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propget'],
        HRESULT,
        'AltUnitsFormat',
        (['out', 'retval'], POINTER(AcDimUnits), 'Units')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'), 'propput'],
        HRESULT,
        'AltUnitsFormat',
        (['in'], AcDimUnits, 'Units')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextPrefix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextPrefix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propget'],
        HRESULT,
        'AltTextSuffix',
        (['out', 'retval'], POINTER(BSTR), 'prefix')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'), 'propput'],
        HRESULT,
        'AltTextSuffix',
        (['in'], BSTR, 'prefix')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Specifies type of center mark on the dimension (DIMCEN system variable)'), 'propget'],
        HRESULT,
        'CenterType',
        (['out', 'retval'], POINTER(AcDimCenterType), 'Type')
    ),
    COMMETHOD(
        [dispid(43), helpstring('Specifies type of center mark on the dimension (DIMCEN system variable)'), 'propput'],
        HRESULT,
        'CenterType',
        (['in'], AcDimCenterType, 'Type')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Specifies size of the center mark on the dimension (DIMCEN system variable)'), 'propget'],
        HRESULT,
        'CenterMarkSize',
        (['out', 'retval'], POINTER(c_double), 'Type')
    ),
    COMMETHOD(
        [dispid(44), helpstring('Specifies size of the center mark on the dimension (DIMCEN system variable)'), 'propput'],
        HRESULT,
        'CenterMarkSize',
        (['in'], c_double, 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies color of the dimension lines (DIMCLRD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propget'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['out', 'retval'], POINTER(AcDimPrecision), 'Prec')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies precision for primary units dimensions (DIMDEC system variable)'), 'propput'],
        HRESULT,
        'PrimaryUnitsPrecision',
        (['in'], AcDimPrecision, 'Prec')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propget'],
        HRESULT,
        'FractionFormat',
        (['out', 'retval'], POINTER(AcDimFractionType), 'Type')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets fraction type (DIMFRAC system variable)'), 'propput'],
        HRESULT,
        'FractionFormat',
        (['in'], AcDimFractionType, 'Type')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propget'],
        HRESULT,
        'Fit',
        (['out', 'retval'], POINTER(AcDimFit), 'fittype')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'), 'propput'],
        HRESULT,
        'Fit',
        (['in'], AcDimFit, 'fittype')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propget'],
        HRESULT,
        'LinearScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies global scale factor for linear dimensions (DIMLFAC system variable)'), 'propput'],
        HRESULT,
        'LinearScaleFactor',
        (['in'], ACAD_NOUNITS, 'Type')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propget'],
        HRESULT,
        'UnitsFormat',
        (['out', 'retval'], POINTER(AcDimLUnits), 'format')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies units format for linear dimensions (DIMLUNIT system variable)'), 'propput'],
        HRESULT,
        'UnitsFormat',
        (['in'], AcDimLUnits, 'format')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propget'],
        HRESULT,
        'RoundDistance',
        (['out', 'retval'], POINTER(c_double), 'Distance')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies distance rounding value (DIMRND system variable)'), 'propput'],
        HRESULT,
        'RoundDistance',
        (['in'], c_double, 'Distance')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets the suppression of the second dimension line On or Off (DIMSD2)'), 'propget'],
        HRESULT,
        'DimLineSuppress',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Sets the suppression of the second dimension line On or Off (DIMSD2)'), 'propput'],
        HRESULT,
        'DimLineSuppress',
        (['in'], VARIANT_BOOL, 'bSuppress')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propget'],
        HRESULT,
        'TextInsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'), 'propput'],
        HRESULT,
        'TextInsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propget'],
        HRESULT,
        'TextInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Sets drawing of text between extension lines On or Off (DIMTIX system variable)'), 'propput'],
        HRESULT,
        'TextInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propget'],
        HRESULT,
        'ForceLineInside',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(32), helpstring('Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'), 'propput'],
        HRESULT,
        'ForceLineInside',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propget'],
        HRESULT,
        'TextOutsideAlign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside')
    ),
    COMMETHOD(
        [dispid(33), helpstring('Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'), 'propput'],
        HRESULT,
        'TextOutsideAlign',
        (['in'], VARIANT_BOOL, 'bInside')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propget'],
        HRESULT,
        'AltSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'), 'propput'],
        HRESULT,
        'AltSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressLeadingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressTrailingZeros',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propget'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'), 'propput'],
        HRESULT,
        'AltToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propget'],
        HRESULT,
        'SuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'), 'propput'],
        HRESULT,
        'SuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroFeet',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propget'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'), 'propput'],
        HRESULT,
        'ToleranceSuppressZeroInches',
        (['in'], VARIANT_BOOL, 'bVal')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(60), helpstring('Specifies lineweight for dimension lines (DIMLWD system variable)'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(61), helpstring('Specifies size of the dimension arrowhead (DIMASZ system variable)'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the dimension arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadType',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(63), helpstring('Specifies type of the dimension arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadType',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies dimension measurement value'), 'propget'],
        HRESULT,
        'Measurement',
        (['out', 'retval'], POINTER(c_double), 'bVal')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for a radial dimension or leader line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ArrowheadBlock',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Specifies the block to use as the custom arrowhead for a radial dimension or leader line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ArrowheadBlock',
        (['in'], BSTR, 'BlockName')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propget'],
        HRESULT,
        'DimensionLinetype',
        (['out', 'retval'], POINTER(BSTR), 'Linetype')
    ),
    COMMETHOD(
        [dispid(80), helpstring('Specifies the linetype of the dimension line (DIMLTYPE system variable)'), 'propput'],
        HRESULT,
        'DimensionLinetype',
        (['in'], BSTR, 'Linetype')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propget'],
        HRESULT,
        'DimConstrForm',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(85), helpstring('Specifies the constraint type - Dynamic or Annotational'), 'propput'],
        HRESULT,
        'DimConstrForm',
        (['in'], VARIANT_BOOL, 'bIsDynamic')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propget'],
        HRESULT,
        'DimConstrReference',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference')
    ),
    COMMETHOD(
        [dispid(86), helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"), 'propput'],
        HRESULT,
        'DimConstrReference',
        (['in'], VARIANT_BOOL, 'bIsReference')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propget'],
        HRESULT,
        'DimConstrName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(87), helpstring('Specifies the name of the dimensional constraint. Names cannot have spaces'), 'propput'],
        HRESULT,
        'DimConstrName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrExpression',
        (['out', 'retval'], POINTER(BSTR), 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(88), helpstring('Specifies the expression or the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrExpression',
        (['in'], BSTR, 'bstrExpression')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propget'],
        HRESULT,
        'DimConstrValue',
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
    COMMETHOD(
        [dispid(89), helpstring('Specifies the value of the constraint'), 'propput'],
        HRESULT,
        'DimConstrValue',
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propget'],
        HRESULT,
        'DimConstrDesc',
        (['out', 'retval'], POINTER(BSTR), 'bstrDescription')
    ),
    COMMETHOD(
        [dispid(90), helpstring('Specifies description for constraint'), 'propput'],
        HRESULT,
        'DimConstrDesc',
        (['in'], BSTR, 'bstrDescription')
    ),
]

################################################################
# code template for IAcadDimRadial implementation
# class IAcadDimRadial_Impl(object):
#     def _set(self, rhs):
#         'Specifies the length of the leader on the diameter or radius dimension'
#     LeaderLength = property(fset = _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#         #return bAlternate
#     def _set(self, bAlternate):
#         'Sets units format for alternate units dimensions On or Off, except angular (DIMALT system variable)'
#     AltUnits = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#         #return precision
#     def _set(self, precision):
#         'Specifies decimal place precision for alternate units (DIMALTD system variable)'
#     AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#         #return scale
#     def _set(self, scale):
#         'Specifies scale factor for alternate units (DIMALTF system variable)'
#     AltUnitsScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value for alternate units (DIMALTRND system variable)'
#     AltRoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies number of decimal places for tolerance values of an alternate units dimension (DIMALTTD system variable)'
#     AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#         #return Units
#     def _set(self, Units):
#         'Specifies units format for alternate units dimensions except angular (DIMALTU system variable)'
#     AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text prefix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextPrefix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#         #return prefix
#     def _set(self, prefix):
#         'Specifies text sufffix to alternate dimensions except angular (DIMAPOST system variable)'
#     AltTextSuffix = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of center mark on the dimension (DIMCEN system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of center mark on the dimension (DIMCEN system variable)'
#     CenterType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the center mark on the dimension (DIMCEN system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies size of the center mark on the dimension (DIMCEN system variable)'
#     CenterMarkSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies color of the dimension lines (DIMCLRD system variable)'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#         #return Prec
#     def _set(self, Prec):
#         'Specifies precision for primary units dimensions (DIMDEC system variable)'
#     PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets fraction type (DIMFRAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Sets fraction type (DIMFRAC system variable)'
#     FractionFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#         #return fittype
#     def _set(self, fittype):
#         'Determines what elements are moved to fit text and arrowheads in space between extension lines (DIMATFIT system variable)'
#     Fit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#         #return Type
#     def _set(self, Type):
#         'Specifies global scale factor for linear dimensions (DIMLFAC system variable)'
#     LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#         #return format
#     def _set(self, format):
#         'Specifies units format for linear dimensions (DIMLUNIT system variable)'
#     UnitsFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies distance rounding value (DIMRND system variable)'
#         #return Distance
#     def _set(self, Distance):
#         'Specifies distance rounding value (DIMRND system variable)'
#     RoundDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the suppression of the second dimension line On or Off (DIMSD2)'
#         #return bSuppress
#     def _set(self, bSuppress):
#         'Sets the suppression of the second dimension line On or Off (DIMSD2)'
#     DimLineSuppress = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets position of dimension text inside extension lines On or Off (DIMTIH system variable)'
#     TextInsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets drawing of text between extension lines On or Off (DIMTIX system variable)'
#     TextInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Forces drawing dimension line between extension lines On or Off, even when text is placed outside extension lines (DIMTOFL system variable)'
#     ForceLineInside = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#         #return bInside
#     def _set(self, bInside):
#         'Sets positioning of dimension text outside extension lines On or Off (DIMTOH system variable)'
#     TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units dimensions On or Off (DIMALTZ system variable)'
#     AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of leading zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of trailing zeros for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for alternate units tolerance values On or Off (DIMALTTZ system variable)'
#     AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for dimensions On or Off (DIMZIN system variable)'
#     SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero feet for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#         #return bVal
#     def _set(self, bVal):
#         'Sets suppression of zero inches for tolerance values On or Off (DIMTZIN system variable)'
#     ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#         #return weight
#     def _set(self, weight):
#         'Specifies lineweight for dimension lines (DIMLWD system variable)'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#         #return size
#     def _set(self, size):
#         'Specifies size of the dimension arrowhead (DIMASZ system variable)'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies type of the dimension arrowhead'
#         #return Type
#     def _set(self, Type):
#         'Specifies type of the dimension arrowhead'
#     ArrowheadType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Measurement(self):
#         'Specifies dimension measurement value'
#         #return bVal
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for a radial dimension or leader line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for a radial dimension or leader line'
#     ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#         #return Linetype
#     def _set(self, Linetype):
#         'Specifies the linetype of the dimension line (DIMLTYPE system variable)'
#     DimensionLinetype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the constraint type - Dynamic or Annotational'
#         #return bIsDynamic
#     def _set(self, bIsDynamic):
#         'Specifies the constraint type - Dynamic or Annotational'
#     DimConstrForm = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#         #return bIsReference
#     def _set(self, bIsReference):
#         "Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension"
#     DimConstrReference = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the dimensional constraint. Names cannot have spaces'
#     DimConstrName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the expression or the value of the constraint'
#         #return bstrExpression
#     def _set(self, bstrExpression):
#         'Specifies the expression or the value of the constraint'
#     DimConstrExpression = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the value of the constraint'
#         #return Value
#     def _set(self, Value):
#         'Specifies the value of the constraint'
#     DimConstrValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies description for constraint'
#         #return bstrDescription
#     def _set(self, bstrDescription):
#         'Specifies description for constraint'
#     DimConstrDesc = property(_get, _set, doc = _set.__doc__)
#


class AcadGroups(CoClass):
    """The collection of all groups in the drawing"""
    _reg_clsid_ = GUID('{6E6C338C-ABF8-4F0A-AD69-2D3DF31ED81A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadGroups._com_interfaces_ = [IAcadGroups]
AcadGroups._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadSection(CoClass):
    """AutoCAD Section Object"""
    _reg_clsid_ = GUID('{2AC7454A-258E-4661-B888-317A6112745B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSection._com_interfaces_ = [IAcadSection2]
AcadSection._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadBlocks(CoClass):
    """The collection of all blocks in the drawing"""
    _reg_clsid_ = GUID('{FBC97E94-D43F-4371-A65C-C51C00AFBC9E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadBlocks._com_interfaces_ = [IAcadBlocks]
AcadBlocks._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadSectionManager(CoClass):
    """AutoCAD Section Manager Object"""
    _reg_clsid_ = GUID('{109786BA-4BEB-44F2-94E9-8F079AC78137}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSectionManager._com_interfaces_ = [IAcadSectionManager]
AcadSectionManager._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadDwfUnderlay._methods_ = [
    COMMETHOD(
        [dispid(18), helpstring('Specifies the format of DWF file'), 'propget'],
        HRESULT,
        'DWFFormat',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the format of DWF file'), 'propput'],
        HRESULT,
        'DWFFormat',
        (['in'], BSTR, 'Name')
    ),
]

################################################################
# code template for IAcadDwfUnderlay implementation
# class IAcadDwfUnderlay_Impl(object):
#     def _get(self):
#         'Specifies the format of DWF file'
#         #return Name
#     def _set(self, Name):
#         'Specifies the format of DWF file'
#     DWFFormat = property(_get, _set, doc = _set.__doc__)
#


class AcadLayouts(CoClass):
    """The collection of all layouts in the drawing"""
    _reg_clsid_ = GUID('{D114C2DA-AC2A-4750-BB45-85EA018AA555}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLayouts._com_interfaces_ = [IAcadLayouts]
AcadLayouts._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadDynamicBlockReferenceProperty(CoClass):
    """AutoCAD Dynamic Block Property Object"""
    _reg_clsid_ = GUID('{27858BB8-4DAB-4245-A780-332FB0801C8B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDynamicBlockReferenceProperty._com_interfaces_ = [IAcadDynamicBlockReferenceProperty]

IAcadViews._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadView)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadView)), 'pRegApp')
    ),
]

################################################################
# code template for IAcadViews implementation
# class IAcadViews_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pRegApp
#


class AcadPlotConfigurations(CoClass):
    """A collection of named plot settings"""
    _reg_clsid_ = GUID('{65D87C07-AE70-42B5-B6C9-3CA47ADB4CFF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPlotConfigurations._com_interfaces_ = [IAcadPlotConfigurations]
AcadPlotConfigurations._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadBlocks._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], VARIANT, 'InsertionPoint'),
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pBlock')
    ),
]

################################################################
# code template for IAcadBlocks implementation
# class IAcadBlocks_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pVal
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, InsertionPoint, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pBlock
#


class AcadAcCmColor(CoClass):
    """AutoCAD True Color Object"""
    _reg_clsid_ = GUID('{D97EB149-1A3D-46FD-813B-59EFCE6E46B9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadAcCmColor._com_interfaces_ = [IAcadAcCmColor]

IAcadObjectEvents._methods_ = [
    COMMETHOD(
        [helpstring('Triggered when an object or collection in the drawing has been modified')],
        HRESULT,
        'Modified',
        (['in'], POINTER(IAcadObject), 'pObject')
    ),
]

################################################################
# code template for IAcadObjectEvents implementation
# class IAcadObjectEvents_Impl(object):
#     def Modified(self, pObject):
#         'Triggered when an object or collection in the drawing has been modified'
#         #return 
#

IAcadRegisteredApplications._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (
            ['out', 'retval'],
            POINTER(POINTER(IAcadRegisteredApplication)),
            'pItem',
        )
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (
            ['out', 'retval'],
            POINTER(POINTER(IAcadRegisteredApplication)),
            'pRegApp',
        )
    ),
]

################################################################
# code template for IAcadRegisteredApplications implementation
# class IAcadRegisteredApplications_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pRegApp
#


class AcadEntity(CoClass):
    """AcadEntity Class"""
    _reg_clsid_ = GUID('{375AD5D6-937B-43B3-96B9-311E71FD3443}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadEntity._com_interfaces_ = [IAcadEntity]
AcadEntity._outgoing_interfaces_ = [IAcadObjectEvents]
# values for enumeration 'AcPlotOrientation'
acPlotOrientationPortrait = 0
acPlotOrientationLandscape = 1
AcPlotOrientation = c_int  # enum

IAcadAttributeReference._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the height of the attribute reference'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the height of the attribute reference'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the horizontal alignment of the attribute reference'), 'hidden', 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(AcHorizontalAlignment), 'horizAlign')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the horizontal alignment of the attribute reference'), 'hidden', 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], AcHorizontalAlignment, 'horizAlign')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the insertion point of the text'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the insertion point of the text'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the normal direction vector'), 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the normal direction vector'), 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the oblique angle of the attribute reference'), 'propget'],
        HRESULT,
        'ObliqueAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the oblique angle of the attribute reference'), 'propput'],
        HRESULT,
        'ObliqueAngle',
        (['in'], ACAD_ANGLE, 'obliAngle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the rotation angle of the attribute reference'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the rotation angle of the attribute reference'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the scale factor of the attribute reference'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the scale factor of the attribute reference'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'scalFactor')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the style name of the attribute reference'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the style name of the attribute reference'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the tag string of the attribute reference'), 'propget'],
        HRESULT,
        'TagString',
        (['out', 'retval'], POINTER(BSTR), 'bstrTag')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the tag string of the attribute reference'), 'propput'],
        HRESULT,
        'TagString',
        (['in'], BSTR, 'bstrTag')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the alignment point of the attribute reference'), 'propget'],
        HRESULT,
        'TextAlignmentPoint',
        (['out', 'retval'], POINTER(VARIANT), 'alignPoint')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the alignment point of the attribute reference'), 'propput'],
        HRESULT,
        'TextAlignmentPoint',
        (['in'], VARIANT, 'alignPoint')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the attribute reference text generation flag'), 'propget'],
        HRESULT,
        'TextGenerationFlag',
        (['out', 'retval'], POINTER(c_int), 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the attribute reference text generation flag'), 'propput'],
        HRESULT,
        'TextGenerationFlag',
        (['in'], c_int, 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the text string of the attribute reference'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the text string of the attribute reference'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the thickness of the attribute reference'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the thickness of the attribute reference'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the vertical alignment of the attribute reference'), 'hidden', 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(AcVerticalAlignment), 'vertiAlign')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies the vertical alignment of the attribute reference'), 'hidden', 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], AcVerticalAlignment, 'vertiAlign')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the field length of the attribute reference'), 'propget'],
        HRESULT,
        'FieldLength',
        (['out', 'retval'], POINTER(c_int), 'fieldLen')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the field length of the attribute reference'), 'propput'],
        HRESULT,
        'FieldLength',
        (['in'], c_int, 'fieldLen')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the alignment of the attribute reference'), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(AcAlignment), 'align')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the alignment of the attribute reference'), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], AcAlignment, 'align')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Returns whether the text is upside down and sets the text upside down'), 'propget'],
        HRESULT,
        'UpsideDown',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bUpsideDown')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Returns whether the text is upside down and sets the text upside down'), 'propput'],
        HRESULT,
        'UpsideDown',
        (['in'], VARIANT_BOOL, 'bUpsideDown')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines whether the text is backward and sets the text backward'), 'propget'],
        HRESULT,
        'Backward',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bBackward')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Determines whether the text is backward and sets the text backward'), 'propput'],
        HRESULT,
        'Backward',
        (['in'], VARIANT_BOOL, 'bBackward')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the invisible mode of the attribute reference'), 'propget'],
        HRESULT,
        'Invisible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInvisible')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Specifies the invisible mode of the attribute reference'), 'propput'],
        HRESULT,
        'Invisible',
        (['in'], VARIANT_BOOL, 'bInvisible')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Specifies the constant mode of the attribute reference'), 'propget'],
        HRESULT,
        'Constant',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bConstant')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies whether the attribute may be moved relative to the geometry in the block'), 'propget'],
        HRESULT,
        'LockPosition',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bLockPosition')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Determines whether if the attribute reference is multiline'), 'propget'],
        HRESULT,
        'MTextAttribute',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bMTextAttribute')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Determines whether if the attribute reference is multiline'), 'propput'],
        HRESULT,
        'MTextAttribute',
        (['in'], VARIANT_BOOL, 'bMTextAttribute')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the multiline attribute reference content'), 'propget'],
        HRESULT,
        'MTextAttributeContent',
        (['out', 'retval'], POINTER(BSTR), 'content')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the multiline attribute reference content'), 'propput'],
        HRESULT,
        'MTextAttributeContent',
        (['in'], BSTR, 'content')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Updates attribute reference from the multiline mtext and vice versa')],
        HRESULT,
        'UpdateMTextAttribute',
    ),
    COMMETHOD(
        [dispid(30), helpstring('Gets the width of text boundary of the Mtext'), 'propget'],
        HRESULT,
        'MTextBoundaryWidth',
        (['out', 'retval'], POINTER(c_double), 'boundaryWidth')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Gets the width of text boundary of the Mtext'), 'propput'],
        HRESULT,
        'MTextBoundaryWidth',
        ([], c_double, 'boundaryWidth')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Gets the drawing direction of the Mtext'), 'propget'],
        HRESULT,
        'MTextDrawingDirection',
        (['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir')
    ),
    COMMETHOD(
        [dispid(31), helpstring('Gets the drawing direction of the Mtext'), 'propput'],
        HRESULT,
        'MTextDrawingDirection',
        (['in'], AcDrawingDirection, 'drawDir')
    ),
]

################################################################
# code template for IAcadAttributeReference implementation
# class IAcadAttributeReference_Impl(object):
#     def _get(self):
#         'Specifies the height of the attribute reference'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the attribute reference'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the horizontal alignment of the attribute reference'
#         #return horizAlign
#     def _set(self, horizAlign):
#         'Specifies the horizontal alignment of the attribute reference'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the insertion point of the text'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specifies the insertion point of the text'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the normal direction vector'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the normal direction vector'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the oblique angle of the attribute reference'
#         #return obliAngle
#     def _set(self, obliAngle):
#         'Specifies the oblique angle of the attribute reference'
#     ObliqueAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the attribute reference'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the attribute reference'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the scale factor of the attribute reference'
#         #return scalFactor
#     def _set(self, scalFactor):
#         'Specifies the scale factor of the attribute reference'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style name of the attribute reference'
#         #return Name
#     def _set(self, Name):
#         'Specifies the style name of the attribute reference'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the tag string of the attribute reference'
#         #return bstrTag
#     def _set(self, bstrTag):
#         'Specifies the tag string of the attribute reference'
#     TagString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the alignment point of the attribute reference'
#         #return alignPoint
#     def _set(self, alignPoint):
#         'Specifies the alignment point of the attribute reference'
#     TextAlignmentPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the attribute reference text generation flag'
#         #return textGenFlag
#     def _set(self, textGenFlag):
#         'Specifies the attribute reference text generation flag'
#     TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text string of the attribute reference'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the attribute reference'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the attribute reference'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the attribute reference'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the vertical alignment of the attribute reference'
#         #return vertiAlign
#     def _set(self, vertiAlign):
#         'Specifies the vertical alignment of the attribute reference'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the field length of the attribute reference'
#         #return fieldLen
#     def _set(self, fieldLen):
#         'Specifies the field length of the attribute reference'
#     FieldLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the alignment of the attribute reference'
#         #return align
#     def _set(self, align):
#         'Specifies the alignment of the attribute reference'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Returns whether the text is upside down and sets the text upside down'
#         #return bUpsideDown
#     def _set(self, bUpsideDown):
#         'Returns whether the text is upside down and sets the text upside down'
#     UpsideDown = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the text is backward and sets the text backward'
#         #return bBackward
#     def _set(self, bBackward):
#         'Determines whether the text is backward and sets the text backward'
#     Backward = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the invisible mode of the attribute reference'
#         #return bInvisible
#     def _set(self, bInvisible):
#         'Specifies the invisible mode of the attribute reference'
#     Invisible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Constant(self):
#         'Specifies the constant mode of the attribute reference'
#         #return bConstant
#
#     @property
#     def LockPosition(self):
#         'Specifies whether the attribute may be moved relative to the geometry in the block'
#         #return bLockPosition
#
#     def _get(self):
#         'Determines whether if the attribute reference is multiline'
#         #return bMTextAttribute
#     def _set(self, bMTextAttribute):
#         'Determines whether if the attribute reference is multiline'
#     MTextAttribute = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Gets the multiline attribute reference content'
#         #return content
#     def _set(self, content):
#         'Gets the multiline attribute reference content'
#     MTextAttributeContent = property(_get, _set, doc = _set.__doc__)
#
#     def UpdateMTextAttribute(self):
#         'Updates attribute reference from the multiline mtext and vice versa'
#         #return 
#
#     def _get(self):
#         'Gets the width of text boundary of the Mtext'
#         #return boundaryWidth
#     def _set(self, boundaryWidth):
#         'Gets the width of text boundary of the Mtext'
#     MTextBoundaryWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Gets the drawing direction of the Mtext'
#         #return drawDir
#     def _set(self, drawDir):
#         'Gets the drawing direction of the Mtext'
#     MTextDrawingDirection = property(_get, _set, doc = _set.__doc__)
#


class AcadObject(CoClass):
    """The standard interface for a basic AutoCAD object"""
    _reg_clsid_ = GUID('{E89B39BB-5AE4-4C52-9011-B70FC663F249}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadObject._com_interfaces_ = [IAcadObject]
AcadObject._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadXRecord(CoClass):
    """XRecord objects are used to store and manage arbitrary data"""
    _reg_clsid_ = GUID('{D405F96F-C9DB-46FD-9900-D9D1BB0D1F03}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadXRecord._com_interfaces_ = [IAcadXRecord]
AcadXRecord._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadIdPair._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Determines if the source object in a CopyObjects operation has been cloned'), 'propget'],
        HRESULT,
        'IsCloned',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Determines if the owning object in a CopyObjects operation has been translated'), 'propget'],
        HRESULT,
        'IsOwnerXlated',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Determines if the source object in a CopyObjects operation was part of the primary set of objects being copied, or if it was simply owned by a member in the primary set'), 'propget'],
        HRESULT,
        'IsPrimary',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('The object ID of the source object in the CopyObjects operation'), 'propget'],
        HRESULT,
        'key',
        (['out', 'retval'], POINTER(LONG_PTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('The object ID of the newly created cloned object in the CopyObjects operation'), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(LONG_PTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject')
    ),
]

################################################################
# code template for IAcadIdPair implementation
# class IAcadIdPair_Impl(object):
#     @property
#     def IsCloned(self):
#         'Determines if the source object in a CopyObjects operation has been cloned'
#         #return pVal
#
#     @property
#     def IsOwnerXlated(self):
#         'Determines if the owning object in a CopyObjects operation has been translated'
#         #return pVal
#
#     @property
#     def IsPrimary(self):
#         'Determines if the source object in a CopyObjects operation was part of the primary set of objects being copied, or if it was simply owned by a member in the primary set'
#         #return pVal
#
#     @property
#     def key(self):
#         'The object ID of the source object in the CopyObjects operation'
#         #return pVal
#
#     @property
#     def Value(self):
#         'The object ID of the newly created cloned object in the CopyObjects operation'
#         #return pVal
#
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return ApplicationObject
#


class AcadRasterImage(CoClass):
    """AutoCAD Raster Object"""
    _reg_clsid_ = GUID('{DA96617B-1C7C-40D2-81E0-9A9AA20E02B0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadRasterImage._com_interfaces_ = [IAcadRasterImage]
AcadRasterImage._outgoing_interfaces_ = [IAcadObjectEvents]


class Acad3DFace(CoClass):
    """AutoCAD 3dFace Object"""
    _reg_clsid_ = GUID('{5CE57A82-0435-4196-8903-784464A922BC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


Acad3DFace._com_interfaces_ = [IAcad3DFace]
Acad3DFace._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadMText._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the text string of the Mtext'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the text string of the Mtext'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the style name of the Mtext'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the style name of the Mtext'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies both text height and text orientation by designating the endpoints of the baseline'), 'propget'],
        HRESULT,
        'AttachmentPoint',
        (['out', 'retval'], POINTER(AcAttachmentPoint), 'attPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies both text height and text orientation by designating the endpoints of the baseline'), 'propput'],
        HRESULT,
        'AttachmentPoint',
        (['in'], AcAttachmentPoint, 'attPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the drawing direction of the Mtext'), 'propget'],
        HRESULT,
        'DrawingDirection',
        (['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the drawing direction of the Mtext'), 'propput'],
        HRESULT,
        'DrawingDirection',
        (['in'], AcDrawingDirection, 'drawDir')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the defined width of the Mtext'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the defined width of the Mtext'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the text height of the Mtext'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the text height of the Mtext'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the rotation angle of the Mtext'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the rotation angle of the Mtext'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specify the X, Y, Z coordinate for the insertion point of the Mtext or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specify the X, Y, Z coordinate for the insertion point of the Mtext or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the line spacing factor of the Mtext'), 'propget'],
        HRESULT,
        'LineSpacingFactor',
        (['out', 'retval'], POINTER(c_double), 'factor')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the line spacing factor of the Mtext'), 'propput'],
        HRESULT,
        'LineSpacingFactor',
        (['in'], c_double, 'factor')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the line spacing style of the Mtext'), 'propget'],
        HRESULT,
        'LineSpacingStyle',
        (['out', 'retval'], POINTER(AcLineSpacingStyle), 'style')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the line spacing style of the Mtext'), 'propput'],
        HRESULT,
        'LineSpacingStyle',
        (['in'], AcLineSpacingStyle, 'style')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the line spacing distance of the Mtext'), 'propget'],
        HRESULT,
        'LineSpacingDistance',
        (['out', 'retval'], POINTER(c_double), 'Value')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the line spacing distance of the Mtext'), 'propput'],
        HRESULT,
        'LineSpacingDistance',
        (['in'], c_double, 'Value')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies use Background mask'), 'propget'],
        HRESULT,
        'BackgroundFill',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bUseBackgroundFill')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies use Background mask'), 'propput'],
        HRESULT,
        'BackgroundFill',
        (['in'], VARIANT_BOOL, 'bUseBackgroundFill')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Returns the text string with field codes of the Mtext')],
        HRESULT,
        'FieldCode',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
]

################################################################
# code template for IAcadMText implementation
# class IAcadMText_Impl(object):
#     def _get(self):
#         'Specifies the text string of the Mtext'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the Mtext'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the style name of the Mtext'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the style name of the Mtext'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies both text height and text orientation by designating the endpoints of the baseline'
#         #return attPoint
#     def _set(self, attPoint):
#         'Specifies both text height and text orientation by designating the endpoints of the baseline'
#     AttachmentPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the drawing direction of the Mtext'
#         #return drawDir
#     def _set(self, drawDir):
#         'Specifies the drawing direction of the Mtext'
#     DrawingDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the defined width of the Mtext'
#         #return Width
#     def _set(self, Width):
#         'Specifies the defined width of the Mtext'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text height of the Mtext'
#         #return Height
#     def _set(self, Height):
#         'Specifies the text height of the Mtext'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the Mtext'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the Mtext'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate for the insertion point of the Mtext or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specify the X, Y, Z coordinate for the insertion point of the Mtext or use the Pick Point button to set X, Y, Z values simultaneously'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing factor of the Mtext'
#         #return factor
#     def _set(self, factor):
#         'Specifies the line spacing factor of the Mtext'
#     LineSpacingFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing style of the Mtext'
#         #return style
#     def _set(self, style):
#         'Specifies the line spacing style of the Mtext'
#     LineSpacingStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the line spacing distance of the Mtext'
#         #return Value
#     def _set(self, Value):
#         'Specifies the line spacing distance of the Mtext'
#     LineSpacingDistance = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies use Background mask'
#         #return bUseBackgroundFill
#     def _set(self, bUseBackgroundFill):
#         'Specifies use Background mask'
#     BackgroundFill = property(_get, _set, doc = _set.__doc__)
#
#     def FieldCode(self):
#         'Returns the text string with field codes of the Mtext'
#         #return bstrText
#


class Acad3DPolyline(CoClass):
    """AutoCAD 3dPolyline Object"""
    _reg_clsid_ = GUID('{86D077B3-F930-4610-9D16-3C177A3B3A1F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


Acad3DPolyline._com_interfaces_ = [IAcad3DPolyline]
Acad3DPolyline._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadRegion(CoClass):
    """AutoCAD Region Object"""
    _reg_clsid_ = GUID('{FD9BB9B5-147F-4522-9A1E-FF74C6CF19EB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadRegion._com_interfaces_ = [IAcadRegion]
AcadRegion._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadLeader._methods_ = [
    COMMETHOD(
        [dispid(64), helpstring('Specifies the coordinates of the leader'), 'propget'],
        HRESULT,
        'Coordinates',
        (['out', 'retval'], POINTER(VARIANT), 'Coordinates')
    ),
    COMMETHOD(
        [dispid(64), helpstring('Specifies the coordinates of the leader'), 'propput'],
        HRESULT,
        'Coordinates',
        (['in'], VARIANT, 'Coordinates')
    ),
    COMMETHOD(
        [dispid(1537), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(1542), helpstring('Specifies the style name of the leader'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(1542), helpstring('Specifies the style name of the leader'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the type of the leader'), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(AcLeaderType), 'Type')
    ),
    COMMETHOD(
        [dispid(65), helpstring('Specifies the type of the leader'), 'propput'],
        HRESULT,
        'Type',
        (['in'], AcLeaderType, 'Type')
    ),
    COMMETHOD(
        [dispid(66), helpstring('Evaluate the leader')],
        HRESULT,
        'Evaluate',
    ),
    COMMETHOD(
        [dispid(67), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), 'pVal')
    ),
    COMMETHOD(
        [dispid(67), helpstring('Specifies the coordinate of a single vertex in the object'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Coordinate',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT, 'pVal')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Specifies the annotation object for a leader'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Annotation',
        (['out', 'retval'], POINTER(POINTER(IAcadEntity)), 'pVal')
    ),
    COMMETHOD(
        [dispid(68), helpstring('Specifies the annotation object for a leader'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Annotation',
        (['in'], POINTER(IAcadEntity), 'pVal')
    ),
    COMMETHOD(
        [dispid(1543), helpstring('Specifies the size of the leader arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadSize',
        (['out', 'retval'], POINTER(c_double), 'size')
    ),
    COMMETHOD(
        [dispid(1543), helpstring('Specifies the size of the leader arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadSize',
        (['in'], c_double, 'size')
    ),
    COMMETHOD(
        [dispid(69), helpstring('Specifies the type of the leader arrowhead'), 'propget'],
        HRESULT,
        'ArrowheadType',
        (['out', 'retval'], POINTER(AcDimArrowheadType), 'Type')
    ),
    COMMETHOD(
        [dispid(69), helpstring('Specifies the type of the leader arrowhead'), 'propput'],
        HRESULT,
        'ArrowheadType',
        (['in'], AcDimArrowheadType, 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the color of the leader lines'), 'propget'],
        HRESULT,
        'DimensionLineColor',
        (['out', 'retval'], POINTER(ACAD_COLOR), 'Type')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies the color of the leader lines'), 'propput'],
        HRESULT,
        'DimensionLineColor',
        (['in'], ACAD_COLOR, 'Type')
    ),
    COMMETHOD(
        [dispid(1550), helpstring('Specifies the lineweight of the leader line'), 'propget'],
        HRESULT,
        'DimensionLineWeight',
        (['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight')
    ),
    COMMETHOD(
        [dispid(1550), helpstring('Specifies the lineweight of the leader line'), 'propput'],
        HRESULT,
        'DimensionLineWeight',
        (['in'], ACAD_LWEIGHT, 'weight')
    ),
    COMMETHOD(
        [dispid(1553), helpstring('Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor')
    ),
    COMMETHOD(
        [dispid(1553), helpstring('Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'factor')
    ),
    COMMETHOD(
        [dispid(1554), helpstring('Specifies the vertical dimension text position'), 'propget'],
        HRESULT,
        'VerticalTextPosition',
        (['out', 'retval'], POINTER(AcDimVerticalJustification), 'Type')
    ),
    COMMETHOD(
        [dispid(1554), helpstring('Specifies the vertical dimension text position'), 'propput'],
        HRESULT,
        'VerticalTextPosition',
        (['in'], AcDimVerticalJustification, 'Type')
    ),
    COMMETHOD(
        [dispid(1549), helpstring('Specifies the distance around the dimension text that the dimension line is broken'), 'propget'],
        HRESULT,
        'TextGap',
        (['out', 'retval'], POINTER(c_double), 'Offset')
    ),
    COMMETHOD(
        [dispid(1549), helpstring('Specifies the distance around the dimension text that the dimension line is broken'), 'propput'],
        HRESULT,
        'TextGap',
        (['in'], c_double, 'Offset')
    ),
    COMMETHOD(
        [dispid(70), helpstring('Specifies the block to use as the custom arrowhead for a radial dimension or leader line'), 'nonbrowsable', 'propget'],
        HRESULT,
        'ArrowheadBlock',
        (['out', 'retval'], POINTER(BSTR), 'BlockName')
    ),
    COMMETHOD(
        [dispid(70), helpstring('Specifies the block to use as the custom arrowhead for a radial dimension or leader line'), 'nonbrowsable', 'propput'],
        HRESULT,
        'ArrowheadBlock',
        (['in'], BSTR, 'BlockName')
    ),
]

################################################################
# code template for IAcadLeader implementation
# class IAcadLeader_Impl(object):
#     def _get(self):
#         'Specifies the coordinates of the leader'
#         #return Coordinates
#     def _set(self, Coordinates):
#         'Specifies the coordinates of the leader'
#     Coordinates = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Normal(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#
#     def _get(self):
#         'Specifies the style name of the leader'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the style name of the leader'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of the leader'
#         #return Type
#     def _set(self, Type):
#         'Specifies the type of the leader'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def Evaluate(self):
#         'Evaluate the leader'
#         #return 
#
#     def _get(self, Index):
#         'Specifies the coordinate of a single vertex in the object'
#         #return pVal
#     def _set(self, Index, pVal):
#         'Specifies the coordinate of a single vertex in the object'
#     Coordinate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the annotation object for a leader'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the annotation object for a leader'
#     Annotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the size of the leader arrowhead'
#         #return size
#     def _set(self, size):
#         'Specifies the size of the leader arrowhead'
#     ArrowheadSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the type of the leader arrowhead'
#         #return Type
#     def _set(self, Type):
#         'Specifies the type of the leader arrowhead'
#     ArrowheadType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the color of the leader lines'
#         #return Type
#     def _set(self, Type):
#         'Specifies the color of the leader lines'
#     DimensionLineColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the lineweight of the leader line'
#         #return weight
#     def _set(self, weight):
#         'Specifies the lineweight of the leader line'
#     DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'
#         #return factor
#     def _set(self, factor):
#         'Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the vertical dimension text position'
#         #return Type
#     def _set(self, Type):
#         'Specifies the vertical dimension text position'
#     VerticalTextPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the distance around the dimension text that the dimension line is broken'
#         #return Offset
#     def _set(self, Offset):
#         'Specifies the distance around the dimension text that the dimension line is broken'
#     TextGap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the block to use as the custom arrowhead for a radial dimension or leader line'
#         #return BlockName
#     def _set(self, BlockName):
#         'Specifies the block to use as the custom arrowhead for a radial dimension or leader line'
#     ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
#


class Acad3DSolid(CoClass):
    """AutoCAD 3dSolid Object"""
    _reg_clsid_ = GUID('{1DC8FD76-8ECA-4F4C-B7D5-C66F43A68E17}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


Acad3DSolid._com_interfaces_ = [IAcad3DSolid]
Acad3DSolid._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadAttribute._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the field length of the attribute'), 'nonbrowsable', 'propget'],
        HRESULT,
        'FieldLength',
        (['out', 'retval'], POINTER(c_int), 'fieldLen')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the field length of the attribute'), 'nonbrowsable', 'propput'],
        HRESULT,
        'FieldLength',
        (['in'], c_int, 'fieldLen')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the tag string of the attribute'), 'propget'],
        HRESULT,
        'TagString',
        (['out', 'retval'], POINTER(BSTR), 'Tag')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the tag string of the attribute'), 'propput'],
        HRESULT,
        'TagString',
        (['in'], BSTR, 'Tag')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the prompt string of the attribute'), 'propget'],
        HRESULT,
        'PromptString',
        (['out', 'retval'], POINTER(BSTR), 'bstrPrompt')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the prompt string of the attribute'), 'propput'],
        HRESULT,
        'PromptString',
        (['in'], BSTR, 'bstrPrompt')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the text string of the attribute'), 'propget'],
        HRESULT,
        'TextString',
        (['out', 'retval'], POINTER(BSTR), 'bstrText')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the text string of the attribute'), 'propput'],
        HRESULT,
        'TextString',
        (['in'], BSTR, 'bstrText')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the text style of the attribute'), 'propget'],
        HRESULT,
        'StyleName',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the text style of the attribute'), 'propput'],
        HRESULT,
        'StyleName',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies both text height and text orientation by designating the endpoints of the baseline'), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(AcAlignment), 'align')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies both text height and text orientation by designating the endpoints of the baseline'), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], AcAlignment, 'align')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the horizontal alignment of the attribute'), 'hidden', 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(AcHorizontalAlignment), 'horizAlign')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the horizontal alignment of the attribute'), 'hidden', 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], AcHorizontalAlignment, 'horizAlign')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the vertical alignment of the attribute.'), 'hidden', 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(AcVerticalAlignment), 'vertiAlign')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the vertical alignment of the attribute.'), 'hidden', 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], AcVerticalAlignment, 'vertiAlign')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the height of the attribute'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the height of the attribute'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the rotation angle of the attribute'), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the rotation angle of the attribute'), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], ACAD_ANGLE, 'rotAngle')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the scale factor of the attribute'), 'propget'],
        HRESULT,
        'ScaleFactor',
        (['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the scale factor of the attribute'), 'propput'],
        HRESULT,
        'ScaleFactor',
        (['in'], ACAD_NOUNITS, 'scalFactor')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the oblique angle of the attribute'), 'propget'],
        HRESULT,
        'ObliqueAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specifies the oblique angle of the attribute'), 'propput'],
        HRESULT,
        'ObliqueAngle',
        (['in'], ACAD_ANGLE, 'obliAngle')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specify the X, Y, Z alignment point of the attribute'), 'propget'],
        HRESULT,
        'TextAlignmentPoint',
        (['out', 'retval'], POINTER(VARIANT), 'alignPoint')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specify the X, Y, Z alignment point of the attribute'), 'propput'],
        HRESULT,
        'TextAlignmentPoint',
        (['in'], VARIANT, 'alignPoint')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specify the X, Y, Z coordinate of the insertion point of the text'), 'propget'],
        HRESULT,
        'InsertionPoint',
        (['out', 'retval'], POINTER(VARIANT), 'insPoint')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specify the X, Y, Z coordinate of the insertion point of the text'), 'propput'],
        HRESULT,
        'InsertionPoint',
        (['in'], VARIANT, 'insPoint')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Specifies the three-dimensional normal unit vector for the entity'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the attribute text generation flag'), 'nonbrowsable', 'propget'],
        HRESULT,
        'TextGenerationFlag',
        (['out', 'retval'], POINTER(c_int), 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the attribute text generation flag'), 'nonbrowsable', 'propput'],
        HRESULT,
        'TextGenerationFlag',
        (['in'], c_int, 'textGenFlag')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the thickness of the attribute'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Specifies the thickness of the attribute'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the mode of the attribute definition'), 'nonbrowsable', 'propget'],
        HRESULT,
        'Mode',
        (['out', 'retval'], POINTER(c_int), 'Mode')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Specifies the mode of the attribute definition'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Mode',
        (['in'], c_int, 'Mode')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Determines whether the text is upside down or not'), 'propget'],
        HRESULT,
        'UpsideDown',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bUpsideDown')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Determines whether the text is upside down or not'), 'propput'],
        HRESULT,
        'UpsideDown',
        (['in'], VARIANT_BOOL, 'bUpsideDown')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Determines whether the text is backward or not'), 'propget'],
        HRESULT,
        'Backward',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bBackward')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Determines whether the text is backward or not'), 'propput'],
        HRESULT,
        'Backward',
        (['in'], VARIANT_BOOL, 'bBackward')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies the invisible mode of the attribute'), 'propget'],
        HRESULT,
        'Invisible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bInvisible')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Specifies the invisible mode of the attribute'), 'propput'],
        HRESULT,
        'Invisible',
        (['in'], VARIANT_BOOL, 'bInvisible')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies the constant mode of the attribute'), 'propget'],
        HRESULT,
        'Constant',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bConstant')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Specifies the constant mode of the attribute'), 'propput'],
        HRESULT,
        'Constant',
        (['in'], VARIANT_BOOL, 'bConstant')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the verify mode of the attribute'), 'propget'],
        HRESULT,
        'Verify',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bVerify')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the verify mode of the attribute'), 'propput'],
        HRESULT,
        'Verify',
        (['in'], VARIANT_BOOL, 'bVerify')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the preset mode of the attribute'), 'propget'],
        HRESULT,
        'Preset',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bPreset')
    ),
    COMMETHOD(
        [dispid(24), helpstring('Specifies the preset mode of the attribute'), 'propput'],
        HRESULT,
        'Preset',
        (['in'], VARIANT_BOOL, 'bPreset')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies whether the attribute may be moved relative to the geometry in the block'), 'propget'],
        HRESULT,
        'LockPosition',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bLockPosition')
    ),
    COMMETHOD(
        [dispid(25), helpstring('Specifies whether the attribute may be moved relative to the geometry in the block'), 'propput'],
        HRESULT,
        'LockPosition',
        (['in'], VARIANT_BOOL, 'bLockPosition')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Determines whether if the attribute is multiline'), 'propget'],
        HRESULT,
        'MTextAttribute',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bMTextAttribute')
    ),
    COMMETHOD(
        [dispid(26), helpstring('Determines whether if the attribute is multiline'), 'propput'],
        HRESULT,
        'MTextAttribute',
        (['in'], VARIANT_BOOL, 'bMTextAttribute')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the multiline attribute content'), 'propget'],
        HRESULT,
        'MTextAttributeContent',
        (['out', 'retval'], POINTER(BSTR), 'content')
    ),
    COMMETHOD(
        [dispid(27), helpstring('Gets the multiline attribute content'), 'propput'],
        HRESULT,
        'MTextAttributeContent',
        (['in'], BSTR, 'content')
    ),
    COMMETHOD(
        [dispid(28), helpstring('Updates multiline MText')],
        HRESULT,
        'UpdateMTextAttribute',
    ),
    COMMETHOD(
        [dispid(29), helpstring('Gets the width of text boundary of the Mtext'), 'propget'],
        HRESULT,
        'MTextBoundaryWidth',
        (['out', 'retval'], POINTER(c_double), 'boundaryWidth')
    ),
    COMMETHOD(
        [dispid(29), helpstring('Gets the width of text boundary of the Mtext'), 'propput'],
        HRESULT,
        'MTextBoundaryWidth',
        ([], c_double, 'boundaryWidth')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Gets the drawing direction of the Mtext'), 'propget'],
        HRESULT,
        'MTextDrawingDirection',
        (['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir')
    ),
    COMMETHOD(
        [dispid(30), helpstring('Gets the drawing direction of the Mtext'), 'propput'],
        HRESULT,
        'MTextDrawingDirection',
        (['in'], AcDrawingDirection, 'drawDir')
    ),
]

################################################################
# code template for IAcadAttribute implementation
# class IAcadAttribute_Impl(object):
#     def _get(self):
#         'Specifies the field length of the attribute'
#         #return fieldLen
#     def _set(self, fieldLen):
#         'Specifies the field length of the attribute'
#     FieldLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the tag string of the attribute'
#         #return Tag
#     def _set(self, Tag):
#         'Specifies the tag string of the attribute'
#     TagString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the prompt string of the attribute'
#         #return bstrPrompt
#     def _set(self, bstrPrompt):
#         'Specifies the prompt string of the attribute'
#     PromptString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text string of the attribute'
#         #return bstrText
#     def _set(self, bstrText):
#         'Specifies the text string of the attribute'
#     TextString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the text style of the attribute'
#         #return Name
#     def _set(self, Name):
#         'Specifies the text style of the attribute'
#     StyleName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies both text height and text orientation by designating the endpoints of the baseline'
#         #return align
#     def _set(self, align):
#         'Specifies both text height and text orientation by designating the endpoints of the baseline'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the horizontal alignment of the attribute'
#         #return horizAlign
#     def _set(self, horizAlign):
#         'Specifies the horizontal alignment of the attribute'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the vertical alignment of the attribute.'
#         #return vertiAlign
#     def _set(self, vertiAlign):
#         'Specifies the vertical alignment of the attribute.'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the height of the attribute'
#         #return Height
#     def _set(self, Height):
#         'Specifies the height of the attribute'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the rotation angle of the attribute'
#         #return rotAngle
#     def _set(self, rotAngle):
#         'Specifies the rotation angle of the attribute'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the scale factor of the attribute'
#         #return scalFactor
#     def _set(self, scalFactor):
#         'Specifies the scale factor of the attribute'
#     ScaleFactor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the oblique angle of the attribute'
#         #return obliAngle
#     def _set(self, obliAngle):
#         'Specifies the oblique angle of the attribute'
#     ObliqueAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z alignment point of the attribute'
#         #return alignPoint
#     def _set(self, alignPoint):
#         'Specify the X, Y, Z alignment point of the attribute'
#     TextAlignmentPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the insertion point of the text'
#         #return insPoint
#     def _set(self, insPoint):
#         'Specify the X, Y, Z coordinate of the insertion point of the text'
#     InsertionPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the three-dimensional normal unit vector for the entity'
#         #return Normal
#     def _set(self, Normal):
#         'Specifies the three-dimensional normal unit vector for the entity'
#     Normal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the attribute text generation flag'
#         #return textGenFlag
#     def _set(self, textGenFlag):
#         'Specifies the attribute text generation flag'
#     TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the thickness of the attribute'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the attribute'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the mode of the attribute definition'
#         #return Mode
#     def _set(self, Mode):
#         'Specifies the mode of the attribute definition'
#     Mode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the text is upside down or not'
#         #return bUpsideDown
#     def _set(self, bUpsideDown):
#         'Determines whether the text is upside down or not'
#     UpsideDown = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether the text is backward or not'
#         #return bBackward
#     def _set(self, bBackward):
#         'Determines whether the text is backward or not'
#     Backward = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the invisible mode of the attribute'
#         #return bInvisible
#     def _set(self, bInvisible):
#         'Specifies the invisible mode of the attribute'
#     Invisible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the constant mode of the attribute'
#         #return bConstant
#     def _set(self, bConstant):
#         'Specifies the constant mode of the attribute'
#     Constant = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the verify mode of the attribute'
#         #return bVerify
#     def _set(self, bVerify):
#         'Specifies the verify mode of the attribute'
#     Verify = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the preset mode of the attribute'
#         #return bPreset
#     def _set(self, bPreset):
#         'Specifies the preset mode of the attribute'
#     Preset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether the attribute may be moved relative to the geometry in the block'
#         #return bLockPosition
#     def _set(self, bLockPosition):
#         'Specifies whether the attribute may be moved relative to the geometry in the block'
#     LockPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether if the attribute is multiline'
#         #return bMTextAttribute
#     def _set(self, bMTextAttribute):
#         'Determines whether if the attribute is multiline'
#     MTextAttribute = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Gets the multiline attribute content'
#         #return content
#     def _set(self, content):
#         'Gets the multiline attribute content'
#     MTextAttributeContent = property(_get, _set, doc = _set.__doc__)
#
#     def UpdateMTextAttribute(self):
#         'Updates multiline MText'
#         #return 
#
#     def _get(self):
#         'Gets the width of text boundary of the Mtext'
#         #return boundaryWidth
#     def _set(self, boundaryWidth):
#         'Gets the width of text boundary of the Mtext'
#     MTextBoundaryWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Gets the drawing direction of the Mtext'
#         #return drawDir
#     def _set(self, drawDir):
#         'Gets the drawing direction of the Mtext'
#     MTextDrawingDirection = property(_get, _set, doc = _set.__doc__)
#

IAcadDictionary._methods_ = [
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pVal')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Adds an object to a named dictionary')],
        HRESULT,
        'AddObject',
        (['in'], BSTR, 'Keyword'),
        (['in'], BSTR, 'ObjectName'),
        (['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pNewObj')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Gets the name (keyword) of an object in a dictionary')],
        HRESULT,
        'GetName',
        (['in'], POINTER(IAcadObject), 'Object'),
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Gets the object in a dictionary, given the name (keyword) of the object')],
        HRESULT,
        'GetObject',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pObj')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Removes a named object from the dictionary')],
        HRESULT,
        'Remove',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pObj')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Renames an item in the dictionary')],
        HRESULT,
        'Rename',
        (['in'], BSTR, 'OldName'),
        (['in'], BSTR, 'NewName')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Replaces an item in the dictionary by a given item')],
        HRESULT,
        'Replace',
        (['in'], BSTR, 'OldName'),
        (['in'], POINTER(IAcadObject), 'pObj')
    ),
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pItem')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Creates an XRecord object in any dictionary')],
        HRESULT,
        'AddXRecord',
        (['in'], BSTR, 'Keyword'),
        (['out', 'retval'], POINTER(POINTER(IAcadXRecord)), 'pNewXRecord')
    ),
]

################################################################
# code template for IAcadDictionary implementation
# class IAcadDictionary_Impl(object):
#     def _get(self):
#         'Specifies the name of the object'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def AddObject(self, Keyword, ObjectName):
#         'Adds an object to a named dictionary'
#         #return pNewObj
#
#     def GetName(self, Object):
#         'Gets the name (keyword) of an object in a dictionary'
#         #return bstrName
#
#     def GetObject(self, Name):
#         'Gets the object in a dictionary, given the name (keyword) of the object'
#         #return pObj
#
#     def Remove(self, Name):
#         'Removes a named object from the dictionary'
#         #return pObj
#
#     def Rename(self, OldName, NewName):
#         'Renames an item in the dictionary'
#         #return 
#
#     def Replace(self, OldName, pObj):
#         'Replaces an item in the dictionary by a given item'
#         #return 
#
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pVal
#
#     def AddXRecord(self, Keyword):
#         'Creates an XRecord object in any dictionary'
#         #return pNewXRecord
#


class AcadArc(CoClass):
    """AutoCAD Arc Object"""
    _reg_clsid_ = GUID('{C614C73D-2F7E-4AFF-9BAC-EF1CFEFD8D06}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadArc._com_interfaces_ = [IAcadArc]
AcadArc._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadArc._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specify the X, Y, Z coordinate of the start point of the arc'), 'propget'],
        HRESULT,
        'StartPoint',
        (['out', 'retval'], POINTER(VARIANT), 'StartPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the center point of the arc or use the Pick Point button to set X, Y, Z values simultaneously'), 'propget'],
        HRESULT,
        'Center',
        (['out', 'retval'], POINTER(VARIANT), 'CenterPoint')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specify the X, Y, Z coordinate of the center point of the arc or use the Pick Point button to set X, Y, Z values simultaneously'), 'propput'],
        HRESULT,
        'Center',
        (['in'], VARIANT, 'CenterPoint')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specify the X, Y, Z coordinate of the end point of the arc'), 'propget'],
        HRESULT,
        'EndPoint',
        (['out', 'retval'], POINTER(VARIANT), 'EndPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the radius of the arc'), 'propget'],
        HRESULT,
        'Radius',
        (['out', 'retval'], POINTER(c_double), 'Radius')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the radius of the arc'), 'propput'],
        HRESULT,
        'Radius',
        (['in'], c_double, 'Radius')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the start angle of the arc'), 'propget'],
        HRESULT,
        'StartAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the start angle of the arc'), 'propput'],
        HRESULT,
        'StartAngle',
        (['in'], ACAD_ANGLE, 'Angle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the end angle of the arc'), 'propget'],
        HRESULT,
        'EndAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the end angle of the arc'), 'propput'],
        HRESULT,
        'EndAngle',
        (['in'], ACAD_ANGLE, 'Angle')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the total angle of the arc'), 'propget'],
        HRESULT,
        'TotalAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'TotalAngle')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the arc length of the arc'), 'propget'],
        HRESULT,
        'ArcLength',
        (['out', 'retval'], POINTER(ACAD_DISTANCE), 'ArcLength')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the thickness of the arc'), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_double), 'Thickness')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the thickness of the arc'), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_double, 'Thickness')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Offsets the arc to the given side')],
        HRESULT,
        'Offset',
        (['in'], c_double, 'Distance'),
        (['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the area of the arc when implicitly closed with a line'), 'propget'],
        HRESULT,
        'Area',
        (['out', 'retval'], POINTER(c_double), 'Area')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specify the X, Y, Z coordinate of the normal direction vector'), 'propget'],
        HRESULT,
        'Normal',
        (['out', 'retval'], POINTER(VARIANT), 'Normal')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Specify the X, Y, Z coordinate of the normal direction vector'), 'propput'],
        HRESULT,
        'Normal',
        (['in'], VARIANT, 'Normal')
    ),
]

################################################################
# code template for IAcadArc implementation
# class IAcadArc_Impl(object):
#     @property
#     def StartPoint(self):
#         'Specify the X, Y, Z coordinate of the start point of the arc'
#         #return StartPoint
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the center point of the arc or use the Pick Point button to set X, Y, Z values simultaneously'
#         #return CenterPoint
#     def _set(self, CenterPoint):
#         'Specify the X, Y, Z coordinate of the center point of the arc or use the Pick Point button to set X, Y, Z values simultaneously'
#     Center = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def EndPoint(self):
#         'Specify the X, Y, Z coordinate of the end point of the arc'
#         #return EndPoint
#
#     def _get(self):
#         'Specifies the radius of the arc'
#         #return Radius
#     def _set(self, Radius):
#         'Specifies the radius of the arc'
#     Radius = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the start angle of the arc'
#         #return Angle
#     def _set(self, Angle):
#         'Specifies the start angle of the arc'
#     StartAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the end angle of the arc'
#         #return Angle
#     def _set(self, Angle):
#         'Specifies the end angle of the arc'
#     EndAngle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def TotalAngle(self):
#         'Specifies the total angle of the arc'
#         #return TotalAngle
#
#     @property
#     def ArcLength(self):
#         'Specifies the arc length of the arc'
#         #return ArcLength
#
#     def _get(self):
#         'Specifies the thickness of the arc'
#         #return Thickness
#     def _set(self, Thickness):
#         'Specifies the thickness of the arc'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     def Offset(self, Distance):
#         'Offsets the arc to the given side'
#         #return pOffsetCurves
#
#     @property
#     def Area(self):
#         'Specifies the area of the arc when implicitly closed with a line'
#         #return Area
#
#     def _get(self):
#         'Specify the X, Y, Z coordinate of the normal direction vector'
#         #return Normal
#     def _set(self, Normal):
#         'Specify the X, Y, Z coordinate of the normal direction vector'
#     Normal = property(_get, _set, doc = _set.__doc__)
#


class AcadAttribute(CoClass):
    """AutoCAD Attribute Object"""
    _reg_clsid_ = GUID('{05508F02-2B73-41DB-A1DF-D012BA4E2AC6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadAttribute._com_interfaces_ = [IAcadAttribute]
AcadAttribute._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadViewport._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('Specifies the center of an arc, circle, ellipse, view, or viewport'), 'propget'],
        HRESULT,
        'Center',
        (['out', 'retval'], POINTER(VARIANT), 'Center')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Specifies the center of an arc, circle, ellipse, view, or viewport'), 'propput'],
        HRESULT,
        'Center',
        (['in'], VARIANT, 'Center')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Height of the attribute, shape, text, or view toolbar or the main application window'), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the width of the text boundary, view, image, toolbar, or main application window'), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the target point for the view or viewport'), 'propget'],
        HRESULT,
        'Target',
        (['out', 'retval'], POINTER(VARIANT), 'targetPoint')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the target point for the view or viewport'), 'propput'],
        HRESULT,
        'Target',
        (['in'], VARIANT, 'targetPoint')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the viewing direction for a 3D visualization of the drawing'), 'propget'],
        HRESULT,
        'Direction',
        (['out', 'retval'], POINTER(VARIANT), 'dirVec')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the viewing direction for a 3D visualization of the drawing'), 'propput'],
        HRESULT,
        'Direction',
        (['in'], VARIANT, 'dirVec')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstrName')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'bstrName')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the status of the viewport grid'), 'propget'],
        HRESULT,
        'GridOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bGridOn')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Specifies the status of the viewport grid'), 'propput'],
        HRESULT,
        'GridOn',
        (['in'], VARIANT_BOOL, 'bGridOn')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the status of the Ortho mode for the viewport'), 'propget'],
        HRESULT,
        'OrthoOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bOrthoOn')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the status of the Ortho mode for the viewport'), 'propput'],
        HRESULT,
        'OrthoOn',
        (['in'], VARIANT_BOOL, 'bOrthoOn')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the snap base point for the viewport'), 'propget'],
        HRESULT,
        'SnapBasePoint',
        (['out', 'retval'], POINTER(VARIANT), 'lowLeft')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the snap base point for the viewport'), 'propput'],
        HRESULT,
        'SnapBasePoint',
        (['in'], VARIANT, 'lowLeft')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the status of snap'), 'propget'],
        HRESULT,
        'SnapOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bSnapOn')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the status of snap'), 'propput'],
        HRESULT,
        'SnapOn',
        (['in'], VARIANT_BOOL, 'bSnapOn')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the snap rotation angle of the viewport relative to the current UCS'), 'propget'],
        HRESULT,
        'SnapRotationAngle',
        (['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Specifies the snap rotation angle of the viewport relative to the current UCS'), 'propput'],
        HRESULT,
        'SnapRotationAngle',
        (['in'], ACAD_ANGLE, 'Angle')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies if the UCS icon is on'), 'propget'],
        HRESULT,
        'UCSIconOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconOn')
    ),
    COMMETHOD(
        [dispid(13), helpstring('Specifies if the UCS icon is on'), 'propput'],
        HRESULT,
        'UCSIconOn',
        (['in'], VARIANT_BOOL, 'bIconOn')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies if the UCS icon is displayed at the origin'), 'propget'],
        HRESULT,
        'UCSIconAtOrigin',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconAtOrigin')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Specifies if the UCS icon is displayed at the origin'), 'propput'],
        HRESULT,
        'UCSIconAtOrigin',
        (['in'], VARIANT_BOOL, 'bIconAtOrigin')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Gets the lower-left corner of the current active viewport'), 'propget'],
        HRESULT,
        'LowerLeftCorner',
        (['out', 'retval'], POINTER(VARIANT), 'lowLeft')
    ),
    COMMETHOD(
        [dispid(16), helpstring('Gets the upper-right corner of the current active viewport'), 'propget'],
        HRESULT,
        'UpperRightCorner',
        (['out', 'retval'], POINTER(VARIANT), 'UpperRight')
    ),
    COMMETHOD(
        [dispid(17), helpstring('Splits a viewport into the given number of views')],
        HRESULT,
        'Split',
        (['in'], AcViewportSplitType, 'NumWins')
    ),
    COMMETHOD(
        [dispid(18), helpstring('Gets the grid spacing for the viewport')],
        HRESULT,
        'GetGridSpacing',
        (['out'], POINTER(c_double), 'XSpacing'),
        (['out'], POINTER(c_double), 'YSpacing')
    ),
    COMMETHOD(
        [dispid(19), helpstring('Sets the grid spacing for the viewport')],
        HRESULT,
        'SetGridSpacing',
        (['in'], c_double, 'XSpacing'),
        (['in'], c_double, 'YSpacing')
    ),
    COMMETHOD(
        [dispid(20), helpstring('Gets the snap spacing for the viewport')],
        HRESULT,
        'GetSnapSpacing',
        (['out'], POINTER(c_double), 'XSpacing'),
        (['out'], POINTER(c_double), 'YSpacing')
    ),
    COMMETHOD(
        [dispid(21), helpstring('Sets the snap spacing for the viewport')],
        HRESULT,
        'SetSnapSpacing',
        (['in'], c_double, 'XSpacing'),
        (['in'], c_double, 'YSpacing')
    ),
    COMMETHOD(
        [dispid(22), helpstring('Sets the view in a viewport to a saved view in the Views Collection object')],
        HRESULT,
        'SetView',
        (['in'], POINTER(IAcadView), 'View')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the smoothness of circles, arcs, and ellipses'), 'propget'],
        HRESULT,
        'ArcSmoothness',
        (['out', 'retval'], POINTER(c_int), 'arcSmooth')
    ),
    COMMETHOD(
        [dispid(23), helpstring('Specifies the smoothness of circles, arcs, and ellipses'), 'propput'],
        HRESULT,
        'ArcSmoothness',
        (['in'], c_int, 'arcSmooth')
    ),
]

################################################################
# code template for IAcadViewport implementation
# class IAcadViewport_Impl(object):
#     def _get(self):
#         'Specifies the center of an arc, circle, ellipse, view, or viewport'
#         #return Center
#     def _set(self, Center):
#         'Specifies the center of an arc, circle, ellipse, view, or viewport'
#     Center = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#         #return Height
#     def _set(self, Height):
#         'Height of the attribute, shape, text, or view toolbar or the main application window'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#         #return Width
#     def _set(self, Width):
#         'Specifies the width of the text boundary, view, image, toolbar, or main application window'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the target point for the view or viewport'
#         #return targetPoint
#     def _set(self, targetPoint):
#         'Specifies the target point for the view or viewport'
#     Target = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the viewing direction for a 3D visualization of the drawing'
#         #return dirVec
#     def _set(self, dirVec):
#         'Specifies the viewing direction for a 3D visualization of the drawing'
#     Direction = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return bstrName
#     def _set(self, bstrName):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the status of the viewport grid'
#         #return bGridOn
#     def _set(self, bGridOn):
#         'Specifies the status of the viewport grid'
#     GridOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the status of the Ortho mode for the viewport'
#         #return bOrthoOn
#     def _set(self, bOrthoOn):
#         'Specifies the status of the Ortho mode for the viewport'
#     OrthoOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the snap base point for the viewport'
#         #return lowLeft
#     def _set(self, lowLeft):
#         'Specifies the snap base point for the viewport'
#     SnapBasePoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the status of snap'
#         #return bSnapOn
#     def _set(self, bSnapOn):
#         'Specifies the status of snap'
#     SnapOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the snap rotation angle of the viewport relative to the current UCS'
#         #return Angle
#     def _set(self, Angle):
#         'Specifies the snap rotation angle of the viewport relative to the current UCS'
#     SnapRotationAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the UCS icon is on'
#         #return bIconOn
#     def _set(self, bIconOn):
#         'Specifies if the UCS icon is on'
#     UCSIconOn = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies if the UCS icon is displayed at the origin'
#         #return bIconAtOrigin
#     def _set(self, bIconAtOrigin):
#         'Specifies if the UCS icon is displayed at the origin'
#     UCSIconAtOrigin = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LowerLeftCorner(self):
#         'Gets the lower-left corner of the current active viewport'
#         #return lowLeft
#
#     @property
#     def UpperRightCorner(self):
#         'Gets the upper-right corner of the current active viewport'
#         #return UpperRight
#
#     def Split(self, NumWins):
#         'Splits a viewport into the given number of views'
#         #return 
#
#     def GetGridSpacing(self):
#         'Gets the grid spacing for the viewport'
#         #return XSpacing, YSpacing
#
#     def SetGridSpacing(self, XSpacing, YSpacing):
#         'Sets the grid spacing for the viewport'
#         #return 
#
#     def GetSnapSpacing(self):
#         'Gets the snap spacing for the viewport'
#         #return XSpacing, YSpacing
#
#     def SetSnapSpacing(self, XSpacing, YSpacing):
#         'Sets the snap spacing for the viewport'
#         #return 
#
#     def SetView(self, View):
#         'Sets the view in a viewport to a saved view in the Views Collection object'
#         #return 
#
#     def _get(self):
#         'Specifies the smoothness of circles, arcs, and ellipses'
#         #return arcSmooth
#     def _set(self, arcSmooth):
#         'Specifies the smoothness of circles, arcs, and ellipses'
#     ArcSmoothness = property(_get, _set, doc = _set.__doc__)
#


class AcadState(CoClass):
    """AutoCAD State Object"""
    _reg_clsid_ = GUID('{C181A4F9-E04B-43BB-A503-9465D560E56D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadState._com_interfaces_ = [IAcadState]

IAcadDimStyles._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimStyle)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadDimStyle)), 'pDimStyle')
    ),
]

################################################################
# code template for IAcadDimStyles implementation
# class IAcadDimStyles_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pDimStyle
#
# values for enumeration 'AcDataLinkUpdateDirection'
acUpdateDataFromSource = 1
acUpdateSourceFromData = 2
AcDataLinkUpdateDirection = c_int  # enum


class AcadApplication(CoClass):
    """An instance of the AutoCAD application"""
    _reg_clsid_ = GUID('{8B4929F8-076F-4AEC-AFEE-8928747B7AE3}')
    _idlflags_ = ['appobject']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadApplication._com_interfaces_ = [IAcadApplication]
AcadApplication._outgoing_interfaces_ = [_DAcadApplicationEvents]

IAcadGroups._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadGroup)), 'pItem')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Creates a member object and adds it to the appropriate collection')],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IAcadGroup)), 'pDimStyle')
    ),
]

################################################################
# code template for IAcadGroups implementation
# class IAcadGroups_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return pItem
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     def Add(self, Name):
#         'Creates a member object and adds it to the appropriate collection'
#         #return pDimStyle
#


class AcadApplicationMinorVersion1(CoClass):
    """AutoCAD Application Object"""
    _reg_clsid_ = GUID('{AA46BA8A-9825-40FD-8493-0BA3C4D5CEB5}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadApplicationMinorVersion1._com_interfaces_ = [IAcadApplication]
AcadApplicationMinorVersion1._outgoing_interfaces_ = [_DAcadApplicationEvents]
# values for enumeration 'AcDataLinkUpdateOption'
acUpdateOptionNone = 0
acUpdateOptionOverwriteContentModifiedAfterUpdate = 131072
acUpdateOptionOverwriteFormatModifiedAfterUpdate = 262144
acUpdateOptionUpdateFullSourceRange = 524288
acUpdateOptionIncludeXrefs = 1048576
AcDataLinkUpdateOption = c_int  # enum


class AcadApplicationMinorVersion2(CoClass):
    """AutoCAD Application Object"""
    _reg_clsid_ = GUID('{169B5B8E-E315-41C7-9574-66FC7E530D10}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadApplicationMinorVersion2._com_interfaces_ = [IAcadApplication]
AcadApplicationMinorVersion2._outgoing_interfaces_ = [_DAcadApplicationEvents]


class AcadSelectionSet(CoClass):
    """A group of one or more AutoCAD objects specified for processing as a single unit"""
    _reg_clsid_ = GUID('{2B8622C5-9DB4-46A7-87C8-BC2F3EF58A6D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSelectionSet._com_interfaces_ = [IAcadSelectionSet]


class AcadSortentsTable(CoClass):
    """AutoCAD AcadSortentsTable Object"""
    _reg_clsid_ = GUID('{A611C7DB-74C8-4FD9-AB5B-D083762000CD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSortentsTable._com_interfaces_ = [IAcadSortentsTable]
AcadSortentsTable._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadSelectionSets(CoClass):
    """The collection of all selection sets in the drawing"""
    _reg_clsid_ = GUID('{660424A5-79B3-4E12-81A3-CE27D057137D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadSelectionSets._com_interfaces_ = [IAcadSelectionSets]

IAcadGroup._methods_ = [
    COMMETHOD(
        [dispid(0), helpstring('Gets the member object at a given index in a collection, group, or selection set')],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IAcadEntity)), 'ppEntity')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'hidden', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal')
    ),
    COMMETHOD(
        [dispid(1), helpstring('Gets the number of items in the collection, dictionary, group, or selection set'), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pVal')
    ),
    COMMETHOD(
        [dispid(15), helpstring('Sets the true color for entities in the group.'), 'propput'],
        HRESULT,
        'TrueColor',
        (['in'], POINTER(IAcadAcCmColor), 'rhs')
    ),
    COMMETHOD(
        [dispid(3), helpstring('Specifies the layer for an entity'), 'propput'],
        HRESULT,
        'Layer',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(4), helpstring('Specifies the linetype of an entity'), 'propput'],
        HRESULT,
        'Linetype',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(5), helpstring('Specifies the linetype scale of an entity'), 'propput'],
        HRESULT,
        'LinetypeScale',
        (['in'], ACAD_NOUNITS, 'rhs')
    ),
    COMMETHOD(
        [dispid(6), helpstring('Specifies the visibility of an object or the application'), 'nonbrowsable', 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'rhs')
    ),
    COMMETHOD(
        [dispid(7), helpstring('Sets the highlight status for the given object, or for all objects in a given selection set')],
        HRESULT,
        'Highlight',
        (['in'], VARIANT_BOOL, 'HighlightFlag')
    ),
    COMMETHOD(
        [dispid(8), helpstring('Specifies the plot style name for an entity'), 'propput'],
        HRESULT,
        'PlotStyleName',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(9), helpstring('Specifies the lineweight of an individual entity or the default lineweight for the drawing'), 'propput'],
        HRESULT,
        'Lineweight',
        (['in'], ACAD_LWEIGHT, 'rhs')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the name of the object'), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pVal')
    ),
    COMMETHOD(
        [dispid(10), helpstring('Specifies the name of the object'), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pVal')
    ),
    COMMETHOD(
        [dispid(11), helpstring('Appends one or more entities to the specified group')],
        HRESULT,
        'AppendItems',
        (['in'], VARIANT, 'Objects')
    ),
    COMMETHOD(
        [dispid(12), helpstring('Removes specified items from the group or selection set')],
        HRESULT,
        'RemoveItems',
        (['in'], VARIANT, 'Objects')
    ),
    COMMETHOD(
        [dispid(14), helpstring('Updates the object to the drawing screen')],
        HRESULT,
        'Update',
    ),
    COMMETHOD(
        [dispid(16), helpstring('Specifies the material'), 'propput'],
        HRESULT,
        'Material',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(2), helpstring('Specifies the color of an entity or layer'), 'hidden', 'propput'],
        HRESULT,
        'color',
        (['in'], AcColor, 'rhs')
    ),
]

################################################################
# code template for IAcadGroup implementation
# class IAcadGroup_Impl(object):
#     def Item(self, Index):
#         'Gets the member object at a given index in a collection, group, or selection set'
#         #return ppEntity
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pVal
#
#     @property
#     def Count(self):
#         'Gets the number of items in the collection, dictionary, group, or selection set'
#         #return pVal
#
#     def _set(self, rhs):
#         'Sets the true color for entities in the group.'
#     TrueColor = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         'Specifies the layer for an entity'
#     Layer = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         'Specifies the linetype of an entity'
#     Linetype = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         'Specifies the linetype scale of an entity'
#     LinetypeScale = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         'Specifies the visibility of an object or the application'
#     Visible = property(fset = _set, doc = _set.__doc__)
#
#     def Highlight(self, HighlightFlag):
#         'Sets the highlight status for the given object, or for all objects in a given selection set'
#         #return 
#
#     def _set(self, rhs):
#         'Specifies the plot style name for an entity'
#     PlotStyleName = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         'Specifies the lineweight of an individual entity or the default lineweight for the drawing'
#     Lineweight = property(fset = _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the name of the object'
#         #return pVal
#     def _set(self, pVal):
#         'Specifies the name of the object'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def AppendItems(self, Objects):
#         'Appends one or more entities to the specified group'
#         #return 
#
#     def RemoveItems(self, Objects):
#         'Removes specified items from the group or selection set'
#         #return 
#
#     def Update(self):
#         'Updates the object to the drawing screen'
#         #return 
#
#     def _set(self, rhs):
#         'Specifies the material'
#     Material = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         'Specifies the color of an entity or layer'
#     color = property(fset = _set, doc = _set.__doc__)
#


class AcadDimStyle(CoClass):
    """A group of dimension settings that determines the appearance of a dimension"""
    _reg_clsid_ = GUID('{1B285082-1727-4600-BC69-1C1C004C6628}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadDimStyle._com_interfaces_ = [IAcadDimStyle]
AcadDimStyle._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPlot(CoClass):
    """The set of methods and properties used for plotting layouts"""
    _reg_clsid_ = GUID('{C8FC79B8-5C16-431E-B345-1165F1D19D47}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPlot._com_interfaces_ = [IAcadPlot]


class AcadLayer(CoClass):
    """A logical grouping of data, similar to transparent acetate overlays on a drawing"""
    _reg_clsid_ = GUID('{1E31CE43-12BA-4BE7-9394-6EBDCA1AADFC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLayer._com_interfaces_ = [IAcadLayer]
AcadLayer._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferences(CoClass):
    """This object specifies the current AutoCAD settings"""
    _reg_clsid_ = GUID('{02F066CC-A9C3-471D-B96D-CC260C296722}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPreferences._com_interfaces_ = [IAcadPreferences]


class AcadLineType(CoClass):
    """The line characteristics consisting of combinations of dashes, dots, and spaces"""
    _reg_clsid_ = GUID('{B392F9EC-5B73-4455-AD91-E845D5D978FC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadLineType._com_interfaces_ = [IAcadLineType]
AcadLineType._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferencesDrafting(CoClass):
    """This object contains the options from the Drafting tab on the Options dialog"""
    _reg_clsid_ = GUID('{715B87C5-3BC1-42A0-8E7E-F2DDDA8408BA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPreferencesDrafting._com_interfaces_ = [IAcadPreferencesDrafting]


class AcadMaterial(CoClass):
    """The render material characteristics"""
    _reg_clsid_ = GUID('{D2A70F44-4DD3-4067-A143-7A0F1C812F26}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadMaterial._com_interfaces_ = [IAcadMaterial]
AcadMaterial._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferencesDisplay(CoClass):
    """This object contains the options from the Display tab on the Options dialog"""
    _reg_clsid_ = GUID('{54CFD161-1607-45C6-A00C-5A8C09310218}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPreferencesDisplay._com_interfaces_ = [IAcadPreferencesDisplay]


class AcadRegisteredApplication(CoClass):
    """An external application that has been added to the drawing"""
    _reg_clsid_ = GUID('{11CC57D1-F68F-453C-A85E-CDD46E2CC3DF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadRegisteredApplication._com_interfaces_ = [IAcadRegisteredApplication]
AcadRegisteredApplication._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadPreferencesOutput._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('Gets the Application object'), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IAcadApplication)), 'pAppObj')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies the default output device for new layouts and model space'), 'propput'],
        HRESULT,
        'DefaultOutputDevice',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('Specifies the default output device for new layouts and model space'), 'propget'],
        HRESULT,
        'DefaultOutputDevice',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies whether to alert the user when the output to a device must be spooled through a system printer due to a conflict with the I/O port'), 'propput'],
        HRESULT,
        'PrinterSpoolAlert',
        (['in'], AcPrinterSpoolAlert, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('Specifies whether to alert the user when the output to a device must be spooled through a system printer due to a conflict with the I/O port'), 'propget'],
        HRESULT,
        'PrinterSpoolAlert',
        (['out', 'retval'], POINTER(AcPrinterSpoolAlert), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies whether to alert the user when a layout is configured with a paper size that is different than the default setting for the PC3 file'), 'propput'],
        HRESULT,
        'PrinterPaperSizeAlert',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743813), helpstring('Specifies whether to alert the user when a layout is configured with a paper size that is different than the default setting for the PC3 file'), 'propget'],
        HRESULT,
        'PrinterPaperSizeAlert',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Toggles if legacy plot scripts are allowed to run'), 'propput'],
        HRESULT,
        'PlotLegacy',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743815), helpstring('Toggles if legacy plot scripts are allowed to run'), 'propget'],
        HRESULT,
        'PlotLegacy',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the plot quality of OLE objects'), 'propput'],
        HRESULT,
        'OLEQuality',
        (['in'], AcOleQuality, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743817), helpstring('Specifies the plot quality of OLE objects'), 'propget'],
        HRESULT,
        'OLEQuality',
        (['out', 'retval'], POINTER(AcOleQuality), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Applies the plotting settings of the last successful plot'), 'propput'],
        HRESULT,
        'UseLastPlotSettings',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743819), helpstring('Applies the plotting settings of the last successful plot'), 'propget'],
        HRESULT,
        'UseLastPlotSettings',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring("Determines whether an object's color property is associated with its plot style name when creating a new drawing"), 'propput'],
        HRESULT,
        'PlotPolicy',
        (['in'], AcPlotPolicy, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743821), helpstring("Determines whether an object's color property is associated with its plot style name when creating a new drawing"), 'propget'],
        HRESULT,
        'PlotPolicy',
        (['out', 'retval'], POINTER(AcPlotPolicy), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('DefaultPlotStyleTable.'), 'propput'],
        HRESULT,
        'DefaultPlotStyleTable',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743823), helpstring('DefaultPlotStyleTable.'), 'propget'],
        HRESULT,
        'DefaultPlotStyleTable',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the default plot style table to attach to new drawings'), 'propput'],
        HRESULT,
        'DefaultPlotStyleForObjects',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743825), helpstring('Specifies the default plot style table to attach to new drawings'), 'propget'],
        HRESULT,
        'DefaultPlotStyleForObjects',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the default plot style for Layer 0 for new drawings or drawings created with earlier releases of AutoCAD never been saved in AutoCAD 2000 format'), 'propput'],
        HRESULT,
        'DefaultPlotStyleForLayer',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743827), helpstring('Specifies the default plot style for Layer 0 for new drawings or drawings created with earlier releases of AutoCAD never been saved in AutoCAD 2000 format'), 'propget'],
        HRESULT,
        'DefaultPlotStyleForLayer',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Determines whether to save a continuous plot log.'), 'propput'],
        HRESULT,
        'ContinuousPlotLog',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743829), helpstring('Determines whether to save a continuous plot log.'), 'propget'],
        HRESULT,
        'ContinuousPlotLog',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Determines whether to automatically save plot and publish log.'), 'propput'],
        HRESULT,
        'AutomaticPlotLog',
        (['in'], VARIANT_BOOL, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743831), helpstring('Determines whether to automatically save plot and publish log.'), 'propget'],
        HRESULT,
        'AutomaticPlotLog',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Path')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Sets the default location for plot to file operations.'), 'propput'],
        HRESULT,
        'DefaultPlotToFilePath',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(1610743833), helpstring('Sets the default location for plot to file operations.'), 'propget'],
        HRESULT,
        'DefaultPlotToFilePath',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
]

################################################################
# code template for IAcadPreferencesOutput implementation
# class IAcadPreferencesOutput_Impl(object):
#     @property
#     def Application(self):
#         'Gets the Application object'
#         #return pAppObj
#
#     def _get(self):
#         'Specifies the default output device for new layouts and model space'
#         #return Path
#     def _set(self, Path):
#         'Specifies the default output device for new layouts and model space'
#     DefaultOutputDevice = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether to alert the user when the output to a device must be spooled through a system printer due to a conflict with the I/O port'
#         #return Path
#     def _set(self, Path):
#         'Specifies whether to alert the user when the output to a device must be spooled through a system printer due to a conflict with the I/O port'
#     PrinterSpoolAlert = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies whether to alert the user when a layout is configured with a paper size that is different than the default setting for the PC3 file'
#         #return Path
#     def _set(self, Path):
#         'Specifies whether to alert the user when a layout is configured with a paper size that is different than the default setting for the PC3 file'
#     PrinterPaperSizeAlert = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Toggles if legacy plot scripts are allowed to run'
#         #return Path
#     def _set(self, Path):
#         'Toggles if legacy plot scripts are allowed to run'
#     PlotLegacy = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the plot quality of OLE objects'
#         #return Path
#     def _set(self, Path):
#         'Specifies the plot quality of OLE objects'
#     OLEQuality = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Applies the plotting settings of the last successful plot'
#         #return Path
#     def _set(self, Path):
#         'Applies the plotting settings of the last successful plot'
#     UseLastPlotSettings = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         "Determines whether an object's color property is associated with its plot style name when creating a new drawing"
#         #return Path
#     def _set(self, Path):
#         "Determines whether an object's color property is associated with its plot style name when creating a new drawing"
#     PlotPolicy = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'DefaultPlotStyleTable.'
#         #return Path
#     def _set(self, Path):
#         'DefaultPlotStyleTable.'
#     DefaultPlotStyleTable = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the default plot style table to attach to new drawings'
#         #return Path
#     def _set(self, Path):
#         'Specifies the default plot style table to attach to new drawings'
#     DefaultPlotStyleForObjects = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Specifies the default plot style for Layer 0 for new drawings or drawings created with earlier releases of AutoCAD never been saved in AutoCAD 2000 format'
#         #return Path
#     def _set(self, Path):
#         'Specifies the default plot style for Layer 0 for new drawings or drawings created with earlier releases of AutoCAD never been saved in AutoCAD 2000 format'
#     DefaultPlotStyleForLayer = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether to save a continuous plot log.'
#         #return Path
#     def _set(self, Path):
#         'Determines whether to save a continuous plot log.'
#     ContinuousPlotLog = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Determines whether to automatically save plot and publish log.'
#         #return Path
#     def _set(self, Path):
#         'Determines whether to automatically save plot and publish log.'
#     AutomaticPlotLog = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         'Sets the default location for plot to file operations.'
#         #return Path
#     def _set(self, Path):
#         'Sets the default location for plot to file operations.'
#     DefaultPlotToFilePath = property(_get, _set, doc = _set.__doc__)
#


class AcadPreferencesFiles(CoClass):
    """This object contains the options from the Files tab on the Options dialog"""
    _reg_clsid_ = GUID('{1D5A59AE-FF0B-4366-BCB6-06D8465F2D5B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPreferencesFiles._com_interfaces_ = [IAcadPreferencesFiles]


class AcadTextStyle(CoClass):
    """A named, saved collection of settings that determines the appearance of text characters"""
    _reg_clsid_ = GUID('{1830928F-7ADD-44DC-A2B0-59FD2919BAA9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadTextStyle._com_interfaces_ = [IAcadTextStyle]
AcadTextStyle._outgoing_interfaces_ = [IAcadObjectEvents]


class AcadPreferencesOpenSave(CoClass):
    """This object contains the options from the Open and Save tab on the Options dialog"""
    _reg_clsid_ = GUID('{DC580E36-67A2-406B-9867-80BE4C2FDC8A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPreferencesOpenSave._com_interfaces_ = [IAcadPreferencesOpenSave]


class AcadPreferencesOutput(CoClass):
    """This object contains the options from the Output tab on the Options dialog"""
    _reg_clsid_ = GUID('{26D940FA-984E-471F-B993-887BC6018D6D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AA9A2205-75AA-43AD-9138-1767F1BB5E0C}', 1, 0)


AcadPreferencesOutput._com_interfaces_ = [IAcadPreferencesOutput]

__all__ = [
    'acLnWt100', 'ac3_8in_1ft', 'acHeaderHorzBottomLineWeight',
    'acCellLeftVisibility', 'AcCellOption',
    'acInsertUnitsAstronomicalUnits', 'acFontRegular',
    'acColorMethodForeground', 'acVp3_32in_1ft', 'acAttachmentCenter',
    'acAlignmentAligned', 'AcUnits', 'acHeaderHorzTopLineWeight',
    'acYellow', 'AcadXline', 'acPolyline', 'acVp1_30', 'acRadians',
    'acSymAbove', 'acArrowNone', 'acUnitDistance',
    'acTitleVertInsideVisibility', 'acTitleRowFillColor',
    'ac2004_dwg', 'ac3_4in_1ft', 'acLeader', 'AcadLayer',
    'ac2010_dxf', 'acToolbarSeparator', 'acShape', 'acDegrees000',
    'IAcadUtility', 'acVp3_8in_1ft', 'acLnWtByBlock',
    'acSectionSubItemkNone', 'AcWireframeType', 'acLnWt070',
    'acEnglish', 'acCellBottomGridLineWeight', 'acControlVertices',
    'AcMenuItemType', 'AcOleQuality', 'AcadSubEntSolidNode',
    'IAcadMInsertBlock', 'IAcadPointCloudEx2',
    'acPreserveMtextFormat', 'acPartialPreview', 'AcadMInsertBlock',
    'IAcadLayers', '_DAcadApplicationEvents', 'acDrawLeaderHeadFirst',
    'AcMeshCreaseType', 'acR18_dwg', 'acTextOnly', 'acLnWt053',
    'IAcadSectionTypeSettings2', 'AcadPoint', 'IAcadPopupMenu',
    'acSubDMesh', 'ACAD_ANGLE', 'acTextFlagBackward',
    'AcadGeomapImage', 'AcadExternalReference', 'acDistance',
    'AcadPreferencesProfiles', 'AcPointCloudIntensityStyle',
    'acDimFractional', 'acIsoparms', 'acSpline', 'acMInsertBlock',
    'acLineWithArrow', 'acInsertUnitsPrompt', 'IAcadExtrudedSurface',
    'acKeyboardEntry', 'acSplineLeader', 'acDegrees090',
    'AcadPopupMenu', 'acDemandLoadOnObjectDetect', 'acHorzCellMargin',
    'acArrowBoxBlank', 'acFirstExtensionLine', 'acArrowOpen30',
    'AcRowType', 'AcSplineMethodType', 'acPolicyNewLegacy',
    'AcadPointCloudEx', 'AcSegmentAngleType', 'acAlignmentTopCenter',
    'AcadDimArcLength', 'acSimpleMesh', 'acTopToBottom',
    'acModelSpace', 'acCellRightGridLineWeight', 'acTop', 'acBestFit',
    'AcLeaderType', 'acObjectId', 'acTitleVertLeftColor',
    'ac1_32in_1ft', 'acAttributeModeNormal',
    'acHorizontalAlignmentAligned', 'AcHatchStyle',
    'acAlignmentRight', 'IAcadPreferencesUser', 'acDataVertLeftColor',
    'acPaletteBySession', 'acTableTopToBottom', 'acDimPrecisionFour',
    'AcDrawingAreaShortCutMenu', 'acTitleHorzBottomColor',
    'acSectionGenerationSourceSelectedObjects', 'acContentColor',
    'IAcadViewports', 'acCellContentTypeValue',
    'acAlignmentBottomCenter', 'acArrowsOnly', 'AcadDimOrdinate',
    'acViewport3Left', 'IAcadAcCmColor', 'acHatchStyleNormal',
    'acUseDefaultDrawingAreaShortCutMenu', 'acXline', 'acProxyShow',
    'IAcadComparedReference', 'IAcadSubDMeshEdge',
    'IAcadDimArcLength', 'AcCellType', 'ac3dPolyline',
    'acPenWidth025', 'acLsAll', 'AcadDwfUnderlay', 'ac2004_dxf',
    'acFalse', 'acPolicyLegacy', 'acSelectionSetLast',
    'acAllCellProperties', 'acDecimal', 'AcadAttributeReference',
    'AcTextAttachmentDirection', 'AcadState', 'IAcadDimStyles',
    'IAcad3DPolyline', 'acUnitAngle', 'IAcadLineType',
    'acPrinterNeverAlertLogOnce', 'IAcadPreferencesDisplay',
    'acDimArcLength', 'acSectionState2Slice', 'acDemanLoadDisable',
    'acAttachmentBottomOfBottom', 'AcPlotType', 'acOQText',
    'acTitleVertRightVisibility', 'IAcadPointCloud', 'ACAD_DISTANCE',
    'AcValueDataType', 'acPenWidth070', 'IAcadSortentsTable',
    'acPrinterAlwaysAlert', 'AcSaveAsType', 'acDataRow',
    'AcadPlotConfigurations', 'acDataHorzBottomVisibility',
    'IAcadPViewport', 'acAttachmentPointTopCenter',
    'acCellBackgroundColor', 'acPlotOrientationPortrait',
    'AcDimToleranceMethod', 'acTopRight', 'acIntensity',
    'acIgnoreMtextFormat', 'acDegrees15', 'IAcadShadowDisplay',
    'AcadSubEntSolidEdge', 'acRegion', 'IAcadGeomapImage',
    'acArrowOrigin2', 'IAcadLayer', 'acTolerance', 'AcadCircle',
    'IAcadHyperlinks', 'acCellContentTypeUnknown', 'acDimAligned',
    'IAcadSubEntSolidVertex', 'acAllViewports',
    'acSectionGenerationDestinationReplaceBlock', 'AcadUCSs',
    'AcadXRecord', 'AcBlockScaling', 'kCellOptionNone',
    'acUpdateOptionIncludeXrefs', 'acOutside', 'AcInsertUnits',
    'acBlockImperial', 'acCircle', 'acInsertUnitsNanometers',
    'acVp1_2in_1ft', 'acCellStateFormatModified',
    'AcTableStyleOverrides', 'AcadDimStyles', 'IAcadLayouts',
    'acLnWt030', 'ac1in_1ft', 'acDataHorzBottomLineWeight',
    'acVerticalAlignmentBottom', 'acTitleRowTextHeight',
    'AcCellContentType', 'AcadMaterials', 'acDimPrecisionEight',
    'acBuffer', 'acDimPrecisionTwo', 'acScaleToFit', 'acPoint3d',
    'acCellMarginBottom', 'ACAD_LAYER', 'acTitleVertLeftVisibility',
    'acLnWtByLayer', 'AcSectionState2', 'acBitProperties',
    'acAttributeModeLockPosition', 'acAlwaysRightReadingAngle',
    'acR14_dwg', 'acPenWidth035', 'Acad3DSolid', 'AcadDatabase',
    'acVp1_16', 'ac2_1', 'AcGridLineStyle', 'acViewport3Below',
    'AcadPreferencesUser', 'acArea', 'acArchitectural',
    'IAcadMLeaderLeader', 'AcadLineType', 'AcLoopType',
    'acBottomLeft', 'acTrace', 'acUnknown', 'AcExtendOption',
    'acHorizontalAlignmentMiddle', 'acArrowOblique',
    'acDegreesUnknown', 'AcadTrace', 'ac2013_Template',
    'IAcadHyperlink', 'AcadDgnUnderlay', 'AcadHatch', 'acTextStyle',
    'acAttributeReference', 'acLnWt158', 'acColorMethodByACI',
    'AcColor', 'Acad3DFace', 'AcadSelectionSet', 'IAcadMLeaderStyle',
    'IAcadToolbarItem', 'AcadSectionTypeSettings',
    'acCellBottomVisibility', 'acCellContentLayoutStackedHorizontal',
    'AcDimArrowheadType', 'AcadGeoPositionMarker', 'acBlue', 'acOCS',
    'acDimLFractional', 'acPViewport', 'acDataTypeAndFormat',
    'AcPlotRotation', 'acAlignmentTopLeft', 'acTolTop', 'AcadText',
    'acPolicyLegacyQuery', 'acR15_Template',
    'acCellStateContentModified', 'acDataVertInsideLineWeight',
    'AcadSpline', 'acAttachmentVertical', 'IAcadDatabasePreferences',
    'acHeaderRowColor', 'AcLayerStateMask',
    'ACADSECURITYPARAMS_SIGN_DATA', 'IAcadEntity', 'acTolBottom',
    'acLnWt060', 'IAcadHatch', 'AcBoolean', 'acGridLineStyleSingle',
    'acLsLineType', 'acCellTextHeight', 'acCubicSurfaceMesh',
    'acActiveViewport', 'acVp2_1', 'acHeaderRowDataType',
    'AcadLayouts', 'acDimLScientific', 'acLeftAlignment',
    'acLsFrozen', 'AcVerticalAlignment', 'acCellContentTypeBlock',
    'acDimArchitectural', 'ac1_20', 'acDimPrecisionFive',
    'acAttachmentTopOfTop', 'AcadUCS', 'IAcadPolygonMesh',
    'acDataVertInsideVisibility', 'AcadRegisteredApplications',
    'acGrads', 'AcadLayout', 'acTableSelectWindow',
    'AcAttachmentPoint', 'ac1_5', 'acViewport2Vertical',
    'ac1_64in_1ft', 'acQuadSpline3DPoly', 'AcTableDirection',
    'acVp1_10', 'AcDimToleranceJustify', 'acDragDisplayAutomatically',
    'IAcadMaterials', 'IAcadPlotConfiguration',
    'acCellLeftGridLineWeight', 'acTableFlowLeft', 'AcCellAlignment',
    'acLnWt009', 'ac2000_dxf', 'AcadLayerStateManager', 'ac2013_dwg',
    'AcadLWPolyline', 'acCastsAndReceivesShadows', 'acLnWt015',
    'acLsLineWeight', 'IAcadSection', 'acDimLArchitectural',
    'IAcadTableStyle', 'AcCellProperty', 'acMoveTextNoLeader',
    'acInsertUnitsDecimeters', 'acVerticalAlignmentMiddle',
    'acViewport3Horizontal', 'acVp1_5', 'IAcadIdPair', 'acWindow',
    'IAcadLine', 'acAttachmentPointMiddleCenter',
    'acHeaderVertInsideVisibility', 'acDataVertRightLineWeight',
    'acMarginBottom', 'acTitleHorzInsideColor', 'acAlignmentCenter',
    'acAttributeModePreset', 'acInsertUnitsFeet', 'acDiagonal',
    'acOn', 'acVertCellMargin', 'acLimits',
    'acAttachmentPointMiddleRight', 'acSimplePoly',
    'acPreDefinedGradient', 'acDragDisplayOnRequest', 'ac2007_dwg',
    'acMtext', 'acLineSpacingStyleAtLeast', 'IAcadSubEntSolidNode',
    'acViewport3Right', 'acHeaderHorzTopColor', 'acForEditing',
    'IAcadModelSpace', 'ac1_128in_1ft', 'AcDimUnits',
    'AcFormatOption', 'acSectionSubItemBackLineBottom',
    'AcadAttribute', 'AcBlockConnectionType', 'acDegrees45',
    'AcTextAttachmentType', 'ac1_16', 'IAcadTrace',
    'acOverSecondExtension', 'acProxyBoundingBox',
    'acDataVertInsideColor', 'acHeight', 'acInsertUnitsMicrons',
    'acEnableSCM', 'AcadAcCmColor', 'AcZoomScaleType', 'acDimRotated',
    'acCellMarginTop', 'acInsertUnitsHectometers', 'acUnion',
    'IAcadCircle', 'AcLoadPalette', 'AcadLoftedSurface',
    'AcParseOption', 'IAcad3DSolid', 'acSolid', 'acFontBoldItalic',
    'kFormatOptionNone', 'AcadPolyfaceMesh', 'AcadViews',
    'AcadPreferencesOutput', 'IAcadMenuGroups', 'acAttachmentAllLine',
    'acVp1_50', 'AcKeyboardPriority', 'IAcadApplication',
    'acTitleRowAlignment', 'AcShadePlot', 'acCellContentTypeField',
    'acHeaderRowFillColor', 'acToolbarFlyout',
    'acPlotOrientationLandscape', 'acVp1ft_1ft', 'acArrowArchTick',
    'AcadPointCloud', 'AcadPolygonMesh', 'acDegrees90', 'acLnWt140',
    'acAttributeModeInvisible', 'acDemandLoadDisabled', 'acElevation',
    'IAcadViews', 'acR18_dxf',
    'acMergeCellStyleConvertDuplicatesToOverrides', 'acR13_dwg',
    'AcadRegisteredApplication', 'AcadMLeaderLeader', 'ac2000_dwg',
    'acRepeatLastCommand', 'acUpdateOptionNone', 'acCellContentColor',
    'ac3in_1ft', 'acExternalReference', 'acCubicSplinePoly',
    'acPaletteByDrawing', 'acAlignmentMiddleRight',
    'IAcadAttributeReference', 'acVp10_1', 'IAcadViewport',
    'IAcadPreferencesOutput', 'AcadView', 'acSectionSubItemBackLine',
    'AcEntityName', 'acSelectionSetWindow', 'acMillimeters',
    'AcadDictionaries', 'AcadSweptSurface', 'acUseDraftAngles',
    'acDataHorzInsideVisibility', 'AcadIdPair', 'acUnder',
    'acTopMask', 'acMiddleLeft', 'acMarginLeft', 'IAcadSpline',
    'AcadSecurityParamsType', 'acBlockReference', 'acHorzBottom',
    'acUniformParam', 'AcadComparedReference', 'IAcadSection2',
    'AcadTolerance', 'AcadPaperSpace', 'IAcadLineTypes',
    'acDegrees180', 'IAcadSubEntity', 'acOTStatic', 'AcadViewport',
    'acTurnHeight', 'acSymInFront', 'acVp3_16in_1ft',
    'acSectionState2Plane', 'AcadSolid', 'acSetDefaultFormat',
    'acTitleVertRightColor', 'acEllipse',
    'IAcadRegisteredApplications', 'acInsertUnitsParsecs',
    'IAcadPopupMenuItem', 'acPolicyNamed',
    'AcDynamicBlockReferencePropertyUnitsType', 'AcadLeader', 'acRay',
    'acScale', 'acShadePlotAsDisplayed', 'acLnWt200',
    'acHeaderVertRightLineWeight', 'acInsertUnitsLightYears',
    'acLine', 'AcadSubDMeshFace', 'AcadDimAngular',
    'AcShadowDisplayType', 'acVp1_8', 'acArrowDefault',
    'AcRotationAngle', 'acPolymesh', 'acTableFlowRight', 'ac2010_dwg',
    'acHatchLoopTypeDerived', 'acLnWt035', 'acMenuSubMenu',
    'AcDrawMLeaderOrderType', 'acTitleVertLeftLineWeight',
    'AcHatchObjectType', 'acLnWt000', 'acLnWt013',
    'acDataHorzInsideLineWeight', 'acR15_dwg', 'AcMeasurementUnits',
    'acInsertUnitsUSSurveyInch', 'acAbove', 'IAcadSubEntSolidFace',
    'acGridLineStyleDouble', 'IAcadPolyfaceMesh', 'acLnWt106',
    'acSectionSubItemVerticalLineTop', 'acRed', 'acDimRadial',
    'IAcadSectionManager', 'AcadEllipse', 'acDataRowAlignment',
    'acVerticalAlignmentTop', 'acHorizontalAngle', 'acNative',
    'acAttachmentMiddle', 'acApplied', 'AcHelixConstrainType',
    'AcadRay', 'AcSplineKnotParameterizationType', 'acGradientObject',
    'acPreferenceClassic', 'acSectionGenerationDestinationNewBlock',
    'acLeftMask', 'acColorMethodByRGB', 'AcSectionState',
    'acVertRight', 'acToolbarDockLeft', 'IAcadPreferencesFiles',
    'acDataFormat', 'AcadMenuGroups', 'acToolbarDockRight',
    'AcDimLUnits', 'acContentProperties', 'acInsertUnitsGigameters',
    'acHatchStyleIgnore', 'acSqrtChord', 'AcMLeaderType', 'acString',
    'IAcadMaterial', 'acSelectionSetAll', 'acWorld', 'acView',
    'acMarginTop', 'IAcadSecurityParams', 'acOff', 'IAcadPolyline',
    'IAcadObjectEvents', 'AcadApplicationMinorVersion1',
    'IAcadPreferencesDrafting', 'acArrowOrigin', 'IAcadDimAligned',
    'acArrowDot', 'acLnWt050', 'acAlignmentMiddleLeft',
    'acDataRowTextHeight', 'acByLayer', 'acBottom', 'AcTextAngleType',
    'ac2018_dxf', 'AcProxyImage', 'AcadApplication',
    'acSectionStateBoundary', 'ACADSECURITYPARAMS_ENCRYPT_PROPS',
    'acLineSpacingStyleExactly', 'acLsNewViewport', 'IAcad3DFace',
    'acTitleVertInsideColor', 'acArrowOpen', 'AcadExtrudedSurface',
    'AcadSectionManager', 'Ac3DPolylineType', 'AcadPolyline',
    'acTitleSuppressed', 'acUpdateSourceFromData', 'acAngular',
    'AcTextGenerationFlag', 'acLayout', 'acLnWt020', 'acR13_dxf',
    'acDataType', 'acExtents', 'AcDimFit', 'acCellAlign',
    'IAcadDimRotated', 'acAlignmentMiddle', 'acUCS', 'ac3_16in_1ft',
    'acDataHorzTopLineWeight', 'AcTableFlowDirection', 'IAcadOle',
    'acSectionGenerationSourceAllObjects', 'IAcadLeader',
    'AcadDocument', 'acTable', 'AcadRasterImage',
    'acDimLWindowsDesktop', 'ac2013_dxf', 'IAcadDatabase',
    'acDimRadialLarge', 'acMetric', 'IAcadDocument', 'acIsolines',
    'acGeneral', 'acInsertUnitsMicroinches', 'acMTextContent',
    'acDimPrecisionZero', 'acInsertUnitsUnitless',
    'AcDrawingAreaSCMCommand', 'acColorMethodByBlock',
    'acLeftToRight', 'acDataHorzBottomColor', 'acDimPrecisionSeven',
    'acViewport2Horizontal', 'ac1_4', 'acHeaderSuppressed',
    'acVp1_64in_1ft', 'acVp6in_1ft', 'AcDataLinkUpdateDirection',
    'IAcadXline', 'acVp1_20', 'acForExpression',
    'acKeyboardEntryExceptScripts', 'acArrowUserDefined',
    'acDegrees60', 'AcXRefDemandLoad', 'acAttachmentMiddleOfBottom',
    'acHorizontalAlignmentLeft', 'acMergeCellStyleNone',
    'AcPlotScale', 'acDimOrdinate', 'acUserDefinedGradient',
    'acDegreesAny', 'acCenterLine', 'ac1_2in_1ft', 'acFontItalic',
    'acToolbarDockBottom', 'acSectionSubItemSectionLineTop',
    'acCreaseByLevel', 'acDataRowDataType', 'acHatch', 'AcadMText',
    'acSplineNoArrow', 'acAttachmentBottomOfTopLine',
    'acIntensityBlue', 'acDrawLeaderFirst',
    'AcAlignmentPointAcquisition', 'acDim3PointAngular',
    'acDataVertRightColor', 'ac4_1', 'IAcadBlocks', 'IAcadMenuGroup',
    'acVp1_8in_1ft', 'acUnknownCell', 'acCellMarginVertSpacing',
    'acHatchPatternTypePreDefined', 'AcadSectionSettings',
    'acTitleRowColor', 'acDimDecimal', 'acTolLimits',
    'acInsertUnitsMiles', 'acCellStateFormatLocked', 'IAcadRay',
    'acEndsNormal', 'acTextAndArrows', 'acCellTopGridColor', 'acText',
    'AcActiveSpace', 'ACAD_LTYPE', 'acHeaderRow', 'acMax',
    'IAcadShape', 'acOTEmbedded', 'AcSplineFrameType',
    'acPartialMenuGroup', 'IAcadText', 'acArrowClosed',
    'ACAD_NOUNITS', 'acVpScaleToFit', 'acIntensityRainbow',
    'AcadSurface', 'AcSectionSubItem', 'acPixels',
    'acCellTopGridLineWeight', 'IAcadDimension',
    'acAlignPntAcquisitionAutomatic', 'IAcadMLine', 'acPoint',
    'AcVerticalTextAttachmentType', 'acLong', 'AcToolbarItemType',
    'acJIS', 'AcKeyboardAccelerator', 'acMarginRight', 'acNotStacked',
    'AcadSelectionSets', 'acMiddleRight', 'AcadPdfUnderlay',
    'acDemandLoadEnabledWithCopy', 'acVertInside', 'acDimScientific',
    'acMagenta', 'acTolBasic', 'acDataHorzTopVisibility',
    'AcToolbarDockStatus', 'IAcadDictionaries', 'IAcadBlockReference',
    'acRaster', 'AcadSecurityParams', 'acCenterMark',
    'acDataRowColor', 'acUnitVolume',
    'acAlignPntAcquisitionShiftToAcquire', 'acCellTextStyle',
    'AcMLineJustification', 'acBlockBox', 'AcadDimRadialLarge',
    'IAcadToolbars', 'acDataHorzTopColor', 'AcadDim3PointAngular',
    'acEnter', 'ac1_16in_1ft', 'acObject', 'acVp1_4in_1ft',
    'acPenWidth200', 'IAcadSectionTypeSettings', 'acHatchObject',
    'AcDimCenterType', 'acObjectColor', 'AcadTextStyles',
    'IAcadDictionary', 'AcTextFontStyle', 'acAny',
    'acVerticalAlignmentBaseline', 'acSmooth', 'acPdfUnderlay',
    'ac1_8in_1ft', 'acHeaderVertInsideColor', 'AcSelect',
    'AcHorizontalAlignment', 'acQuadSurfaceMesh',
    'acInsertUnitsAutoAssign', 'acClassification', 'ac10_1',
    'ACAD_COLOR', 'IAcadSolid', 'AcadLayers', 'acConnectExtents',
    'acZero', 'acByBlock', 'acZoomScaledRelativePSpace',
    'IAcadSubDMeshFace', 'IAcadPreferencesOpenSave',
    'acTitleHorzInsideVisibility', 'acTrue', 'acPenWidth100',
    'acHeaderRowTextStyle', 'acFractional', 'AcadBlocks',
    'AcadHyperlinks', 'acByStyle', 'ac0degrees', 'AcadToolbar',
    'acInVisibleLeader', 'AcadPlotConfiguration', 'IAcadPaperSpace',
    'IAcadBlock', 'IAcadSelectionSets', 'acVertLeft',
    'ac2007_Template', 'acToolbarFloating', 'acRuled',
    'acHatchLoopTypeExternal', 'IAcadSubDMeshVertex',
    'acTitleVertRightLineWeight', 'AcadEntity',
    'acTitleHorzTopLineWeight', 'acPenWidth050', 'acOPQMonochrome',
    'acSectionSubItemSectionLineBottom', 'IAcadAttribute',
    'acDrawContentFirst', 'acTitleRowDataType', 'acPenWidth140',
    'ac2010_Template', 'acCellRightGridColor', 'acVp1and1_2in_1ft',
    'acDouble', 'acConnectBase', 'acBaseMenuGroup',
    'acHeaderVertLeftColor', 'ac2004_Template', 'acViewport4',
    'IAcadUnderlay', 'ac180degrees', 'acBlockSlot',
    'acHatchLoopTypeDefault', 'acPolylineLight', 'acVp8_1',
    'AcPatternType', 'ac6in_1ft', 'acAttributeModeMultipleLine',
    'ac2018_dwg', 'acHide', 'AcSelectType', 'AcadToolbarItem',
    'acDataVertRightVisibility', 'acPenWidth018',
    'acHeaderHorzInsideColor', 'acLock', 'ACAD_NULL', 'ac1_8',
    'acRightToLeft', 'acCellStateFormatReadOnly', 'IAcadEllipse',
    'AcDimVerticalJustification', 'acVp4_1', 'IAcadDocuments',
    'acLnWt018', 'acAttachmentHorizontal', 'AcARXDemandLoad', 'acCW',
    'AcadPlaneSurface', 'acCellMarginLeft', 'acSectionStateVolume',
    'acTurns', 'AcadDimension', 'acTitleHorzInsideLineWeight',
    'acVp1_40', 'acLastNormal', 'acDataVertLeftLineWeight',
    'IAcadTextStyles', 'acAllNormal', 'acTolMiddle',
    'acCellStateNone', 'acHeaderHorzTopVisibility',
    'IAcadSummaryInfo', 'acBlockCircle', 'IAcadSubDMesh', 'acLsPlot',
    'acDataHorzInsideColor', 'acScanColor', 'acLsPlotStyle',
    'Acad3DPolyline', 'acLnWt120', 'acPoint2d', 'AcadObject',
    'acInsertUnitsUSSurveyFeet', 'IAcadHelix', 'acUnitless',
    'acShadePlotRendered', 'acCenterNone', 'AcAlignment',
    'AcadDictionary', 'acVp3in_1ft', 'acCellContentLayoutFlow',
    'IAcadGroup', 'acInsertUnitsAngstroms', 'AcRegenType',
    'acPaperSpace', 'acTitleRowFillNone', 'acArrowBoxFilled',
    'acPolicyLegacyLegacy', 'acCCW', 'AcInsertUnitsAction',
    'acCellStateLinked', 'acNormals', 'AcadPreferencesDrafting',
    'acTitleRow', 'acDataRowFillNone', 'acHorizontalAlignmentFit',
    'acDegreeMinuteSeconds', 'ACADSECURITYPARAMS_ALGID_RC4',
    'AcGradientPatternType', 'IAcadXRecord', 'AcadDimRotated',
    'IAcadDwfUnderlay', 'acResbuf', 'acRGB', 'acNoneCrease',
    'IAcadDimAngular', 'AcViewportSplitType', 'acPolyfaceMesh',
    'acMin', 'AcMLeaderContentType', 'acPenWidthUnk',
    'acMoveTextAddLeader', 'kInheritCellFormat',
    'acCellStateContentReadOnly', 'ac3_32in_1ft',
    'acMenuFileCompiled', 'AcadDynamicBlockReferenceProperty',
    'ac1_10', 'AcadMLeader', 'IAcadMenuBar', 'acEdRepeatLastCommand',
    'acTopLeft', 'IAcadView', 'acCellRightVisibility',
    'acAttachmentPointTopRight', 'acMergeCellStyleCopyDuplicates',
    'acTitleVertInsideLineWeight', 'AcadDatabasePreferences',
    'AcDrawingAreaSCMEdit', 'IAcadUCSs', 'acIntensityGrayscale',
    'acDemandLoadCmdInvoke', 'AcDragDisplayMode', 'acArrowDotSmall',
    'acDimPrecisionThree', 'acSelectionSetFence',
    'IAcadRevolvedSurface', 'acAlignmentLeft', 'acParseOptionNone',
    'acInches', 'AcadMLeaderStyle', 'acIntensityGreen',
    'acBottomMask', 'IAcadSurface', 'acBlockContent', 'acByColor',
    'acIgnoreShadows', 'acPolicyNewDefault',
    'acHatchLoopTypePolyline', 'acEnableBackgroundColor',
    'IAcadSelectionSet', 'acHatchPatternTypeUserDefined',
    'AcWindowState', 'acLnWt005', 'acLnWtByLwDefault', 'acVp1_2',
    'acPrinterAlertOnce', 'AcPlotOrientation', 'IAcadPointCloudEx',
    'AcadApplicationMinorVersion2', 'acArc',
    'acMergeCellStyleOverwriteDuplicates', 'acTitleRowTextStyle',
    'AcHelixTwistType', 'AcadDimStyle', 'acTolDeviation',
    'acTextFlagUpsideDown', 'AcLineSpacingStyle',
    'AcadRevolvedSurface', 'acSectionState2Boundary', 'acOQHighPhoto',
    'acLnWt025', 'AcMenuFileType', 'acTitleHorzTopVisibility',
    'acVp100_1', 'acVp1_32in_1ft', 'acDwfUnderlay', 'acR12_dxf',
    'acOverFirstExtension', 'AcadOle', 'acPenWidth013', 'IAcadPoint',
    'acInsertUnitsUSSurveyYard', 'AcDataLinkUpdateOption',
    'acHeaderRowFillNone', 'acInsertUnitsMils',
    'IAcadSectionSettings', 'acPolicyLegacyDefault', 'acBottomCenter',
    'IAcadPlotConfigurations', 'IAcadPreferencesProfiles',
    'AcadBlockReference', 'AcViewportScale', 'AcOleType',
    'AcDimArcLengthSymbol', 'acOPQHighGraphics',
    'acInsertUnitsMillimeters', 'acToolbarControl',
    'acArrowDatumFilled', 'acSelectionSetCrossing',
    'AcadPreferencesSystem', 'AcLoftedSurfaceNormalType',
    'acOQGraphics', 'acBottomToTop', 'AcDimFractionType',
    'acSectionType3dSection', 'acNormal', 'acContentLayout',
    'acVp1in_1ft', 'acBezierSurfaceMesh',
    'acHeaderVertRightVisibility', 'AcUnderlayLayerOverrideType',
    'acArrowOpen90', 'acFlowDirection', 'acTolSymmetrical',
    'acCellStateContentLocked', 'acViewport3Above',
    'acHeaderVertRightColor', 'AcBooleanType', 'acFlowDirBtoT',
    'acQuadSplinePoly', 'acCellMarginHorzSpacing',
    'acTitleHorzBottomLineWeight', 'acHorizontal', 'AcadDocuments',
    'acTableFlowDownOrUp', 'IAcadDynamicBlockReferenceProperty',
    'acVp1_4', 'AcadModelSpace', 'acAlignmentBottomRight',
    'AcDrawingDirection', 'acSecondExtensionLine', 'acSymNone',
    'acExtendThisEntity', 'ac2018_Template', 'AcadSummaryInfo',
    'acTitleHorzTopColor', 'acOQPhoto', 'acInsertUnitsYards',
    'acZoomScaledAbsolute', 'acEdSCM', 'acSectionTypeLiveSection',
    'acHeaderRowTextHeight', 'AcadSortentsTable', 'acVertCentered',
    'acDataRowFillColor', 'acDimLEngineering', 'acArrowIntegral',
    'acUseMaximumPrecision', 'acMLeader', 'ACAD_LWEIGHT',
    'acNoDrawingAreaShortCutMenu', 'acInsertUnitsInches',
    'acExtendOtherEntity', 'IAcadToolbar', 'AcadPreferences',
    'acShadePlotWireframe', 'acDimEngineering', 'ac1_1',
    'acScientific', 'AcadPopupMenus', 'IAcadWipeout',
    'acHorizontalAlignmentRight', 'acAttachmentLinedCenter',
    'acDegrees30', 'acSectionState2Volume', 'acHatchLoopTypeTextbox',
    'AcCellMargin', 'acFirstNormal', 'AcPolymeshType', 'acBlockCell',
    'acZoomScaledRelative', 'acAttachmentBottomOfTop',
    'AcSectionType', 'acTolNone',
    'acSectionGenerationDestinationFile', 'AcOnOff', 'acAlignmentFit',
    'acAlignmentBottomLeft', 'IAcadRegisteredApplication',
    'acUpdateOptionOverwriteContentModifiedAfterUpdate',
    'acAlwaysCrease', 'AcColorMethod', 'AcadTableStyle',
    'acDimPrecisionSix', 'acDimLDecimal', 'ac100_1',
    'acUpdateOptionOverwriteFormatModifiedAfterUpdate',
    'AcPointCloudColorType', 'acRightAlignment', 'acAutoScale',
    'acAttachmentMiddleOfTop', 'acIntensityEditableFlag', 'acVp1_100',
    'AcadMenuBar', 'AcadSubDMesh', 'AcDrawLeaderOrderType',
    'acDataVertLeftVisibility', 'acDisplay', 'acEnableSCMOptions',
    'IAcadArc', 'acFit', 'acAttachmentPointTopLeft', 'acExtendBoth',
    'acLnWt040', 'acAlignmentTopRight', 'AcadViewports',
    'acSelectionSetCrossingPolygon', 'acNoUnits', 'AcPlotPaperUnits',
    'IAcadDimRadialLarge', 'acStraightLeader',
    'acAlignmentMiddleCenter', 'acLnWt090', 'acTableSelectCrossing',
    'acUpdateOptionUpdateFullSourceRange',
    'acDimArchitecturalStacked', 'acInvalidGridLine', 'acChord',
    'IAcadGeoPositionMarker', 'acColorMethodByLayer',
    'acPrinterNeverAlert', 'acRightMask', 'acLsNone',
    'IAcadTextStyle', 'AcadGroup', 'acCellDataType',
    'AcadPreferencesSelection', 'AcadToolbars', 'ac8_1',
    'AcISOPenWidth', 'AcadHelix', 'acArrowDotBlank', 'acOQLineArt',
    'acBackgroundColor', 'ac2000_Template', 'AcLineWeight',
    'IAcadPlot', 'IAcadLoftedSurface', '_DAcadDocumentEvents',
    'acRotation', 'AcadNurbSurface', 'LONG_PTR', 'IAcadTolerance',
    'AcadSubDMeshEdge', 'acHatchPatternTypeCustomDefined',
    'acLsColor', 'acDegrees270', 'IAcadLayerStateManager', 'acMLine',
    'acSelectionSetPrevious', 'acBottomRight', 'acNorm',
    'AcDimTextMovement', 'AcValueUnitType', 'acOPQLowGraphics',
    'acArrowClosedBlank', 'AcDimPrecision', 'IAcadDimOrdinate',
    'AcadTable', 'AcPointCloudStylizationType', 'acMiddleCenter',
    'acDemandLoadEnabled', 'AcadSubEntity', 'AcGridLineType',
    'acUniform', 'acIntensityRed', 'IAcadDim3PointAngular', 'acDate',
    'acNurbSurface', 'AcTextAlignmentType',
    'acSelectionSetWindowPolygon', 'IAcadPreferencesSelection',
    'acAttributeModeVerify', 'AcadPreferencesDisplay',
    'acCellBackgroundFillNone', 'acHeaderHorzInsideVisibility',
    'acCubicSpline3DPoly', 'acR15_dxf', 'AcCoordinateSystem',
    'acR14_dxf', 'AcadPreferencesOpenSave', 'ac1_2', 'acEngineering',
    'acBlockUserDefined', 'acCellMarginRight', 'acVp1_1',
    'AcOlePlotQuality', 'ac1_100', 'acDimLineWithText',
    'acInsertUnitsCentimeters', 'IAcadPreferencesSystem',
    'AcadDimRadial', 'AcadLine', 'AcPrinterSpoolAlert',
    'acTableBottomToTop', 'IAcadRegion',
    'acAttachmentPointBottomRight', 'acAttachmentBottomLine',
    'acIntersection', 'IAcadSubEntSolidEdge', 'ac1_4in_1ft',
    'AcadArc', 'IAcadGroups', 'acHeaderHorzBottomVisibility',
    'IAcadRasterImage', 'acTextCell', 'AcadSubEntSolidFace',
    'acCenterAlignment', 'AcadMenuGroup',
    'acAttachmentPointBottomLeft', 'ac2007_dxf', 'ac3dFace',
    'AcCellEdgeMask', 'acShadePlotHidden', 'IAcadLWPolyline',
    'acNoOverrides', 'acDegrees', 'AcCellContentLayout', 'acLsOn',
    'acWhite', 'acDimAngular', 'AcadPreferencesFiles', 'acGroup',
    'acMenuItem', 'acAttributeModeConstant', 'acLnWt211',
    'IAcadDimRadial', 'acSectionType2dSection',
    'AcPointCloudExStylizationType', 'ac270degrees', 'IAcadMText',
    'IAcadTable', 'acDrawLeaderTailFirst', 'AcadUtility',
    'acInsertUnitsDecameters', 'IAcadNurbSurface',
    'acPreferenceCustom', 'acPaperSpaceDCS', 'acHatchStyleOuter',
    'acTrueColor', 'acGreen', 'ac1_30', 'acCustomParameterization',
    'acInsertAngle', 'acDisplayDCS', 'acDragDoNotDisplay',
    'IAcadSweptSurface', 'acSimple3DPoly', 'ac1_40',
    'acInsertUnitsUSSurveyMile', 'AcadRegion', 'acToolbarDockTop',
    'acHeaderHorzBottomColor', 'acAttachmentPointMiddleLeft',
    'IAcadPreferences', 'acBlockHexagon', 'ac3dSolid',
    'IAcadExternalReference', 'ACADSECURITYPARAMS_ENCRYPT_DATA',
    'AcadBlock', 'AcadSubDMeshVertex', 'acDimPrecisionOne',
    'IAcadState', 'acArrowSmall', 'AcadPlot', 'AcPlotPolicy',
    'acSubtraction', 'acFontBold', 'acAttachmentPointBottomCenter',
    'acHeaderVertLeftVisibility', 'AcSectionGeneration', 'acLsLocked',
    'acHorzInside', 'acTopCenter', 'acHorzCentered',
    'acMergeCellStyleIgnoreNewStyles', 'acInvalidCellProperty',
    'acCastsShadows', 'AcadDimAligned', 'AcPolylineType',
    'AcadDimDiametric', 'acUnknownRow', 'acSplineWithArrow',
    'AcPlotPolicyForLegacyDwgs', 'AcAttributeMode',
    'acAlignmentProperty', 'acLnWt080', 'acUnitArea', 'acTextHeight',
    'AcCellState', 'AcadWipeout', 'ACAD_POINT', 'AcPredefBlockType',
    'acFitCurvePoly', 'acHeaderVertLeftLineWeight',
    'acCellContentLayoutStackedVertical', 'acDgnUnderlay',
    'acDimDiametric', 'acTitleHorzBottomVisibility',
    'acViewport3Vertical', 'acInsertUnitsKilometers',
    'IAcadPlaneSurface', 'acSCM', 'acProxyNotShow',
    'AcDrawingAreaSCMDefault', 'acOTLink', 'acVp1_16in_1ft',
    'IAcadPopupMenus', 'acDimFractionalStacked', 'acDefaultUnits',
    'acBlockTriangle', 'AcadSubEntSolidVertex', 'acDataRowTextStyle',
    'acFullPreview', 'acDimWindowsDesktop', 'acIntensities',
    'ac1ft_1ft', 'IAcadDimDiametric', 'AcDimHorizontalJustification',
    'acCellTopVisibility', 'acSectionSubItemSectionLine', 'acHorzTop',
    'IAcadMLeader', 'AcadSecurityParamsConstants', 'IAcadUCS',
    'acCyan', 'IAcadDimStyle', 'acVp1_128in_1ft', 'AcMenuGroupType',
    'AcadGroups', 'AcadMaterial', 'IAcadObject', 'AcadLineTypes',
    'acHorizontalAlignmentCenter', 'acLineNoArrow', 'acExtendNone',
    'acSectionSubItemBackLineTop', 'acShow', 'acMenuSeparator',
    'acDegreesHorz', 'acSectionSubItemVerticalLineBottom', 'ac1_50',
    'AcadPopupMenuItem', 'acSectionStatePlane', 'AcadSection',
    'acCellBottomGridColor', 'acR18_Template', 'AcPreviewMode',
    'acVp3_4in_1ft', 'acNoneContent', 'acHeaderHorzInsideLineWeight',
    'acUpdateDataFromSource', 'ac90degrees', 'acCellLeftGridColor',
    'acHeaderRowAlignment', 'IAcadLayout', 'acInsertUnitsMeters',
    'acToolbarButton', 'acUnknownDataType',
    'acHeaderVertInsideLineWeight', 'acArrowDatumBlank',
    'acKeyboardRunningObjSnap', 'AcadPViewport', 'acVpCustomScale',
    'ACADSECURITYPARAMS_ADD_TIMESTAMP', 'AcAngleUnits',
    'AcMergeCellStyleOption', 'AcadShape', 'acMergeAll',
    'acAttribute', 'AcPlotPolicyForNewDwgs', 'AcadTextStyle',
    'acMenuFileSource', 'AcadMLine', 'AcadHyperlink',
    'acReceivesShadows'
]

_check_version('1.2.0', 1643688466.000000)

